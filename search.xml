<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux</title>
    <url>/2022/09/25/linux/linux/</url>
    <content><![CDATA[<p>su root 切换root权限</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>vector</title>
    <url>/2022/02/17/vector/</url>
    <content><![CDATA[<p><a href="https://so.csdn.net/so/search?q=vector&spm=1001.2101.3001.7020">vector</a> 是向量类型，它可以容纳许多类型的数据</p>
<p>1 基本操作</p>
<p>(1)头文件#include<vector>.</p>
<p>(2)创建vector对象，vector<int> vec;</p>
<p>(3)尾部插入数字：vec.push_back(a);</p>
<p>(4)使用下标访问元素，cout&lt;&lt;vec[0]&lt;&lt;endl;记住下标是从0开始的。</p>
<p>(5)使用迭代器访问元素.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int&gt;::iterator it;</span><br><span class="line">for(it=vec.begin();it!=vec.end();it++)</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>(6)插入元素：  vec.insert(vec.begin()+i,a);在第i+1个元素前面插入a;</p>
<p>(7)删除元素：  vec.erase(vec.begin()+2);删除第3个元素</p>
<p>vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始</p>
<p>(8)向量大小:vec.size();</p>
<p>(9)清空:vec.clear();</p>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2022/11/17/git%E6%93%8D%E4%BD%9C/git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="为什么需要Git"><a href="#为什么需要Git" class="headerlink" title="为什么需要Git"></a>为什么需要Git</h1><p>因为手动进行版本管理太复杂，尤其是多个人的时候。想象一下， 如果好几个人在一起写代码，然后别人在增加功能后，需要把代 码发给你，由你手动添加新增的代码，那多复杂？</p>
<h1 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h1><img src="/2022/11/17/git%E6%93%8D%E4%BD%9C/git%E6%93%8D%E4%BD%9C/image-20221217142241146.png" class="" title="image-20221217142241146">

<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><ol>
<li>创建repository –&gt; 创建一个文件夹，文件的更改都会被监控</li>
<li>将更改commit到本地git –&gt; 保存文件夹此时的快照到本地的git</li>
<li>恢复到某个commit –&gt; 将文件夹恢复到之前保存的某个快照</li>
<li>push和pull操作–&gt; 同步本地git和云端git的内容</li>
<li>使用分支 –&gt; 将当前文件夹copy一份再做更改</li>
<li>常用工作流 –&gt; 分支的使用方式</li>
</ol>
<h1 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h1><p>使用git clone + git仓库地址将某个仓库下载到本地</p>
<h1 id="将更改commit到本地git"><a href="#将更改commit到本地git" class="headerlink" title="将更改commit到本地git"></a>将更改commit到本地git</h1><p>常规流程： </p>
<p>• Git status –&gt; 查看修改的状态 </p>
<p>• Git add –&gt; 指定此次commit包含的文件</p>
<p>•  Git reset HEAD –&gt;把暂存区的修改撤销</p>
<p> • Git commit -a –m “注释”–&gt; 完成一次到本地git的commit</p>
<h1 id="恢复到某个commit"><a href="#恢复到某个commit" class="headerlink" title="恢复到某个commit"></a>恢复到某个commit</h1><p>常规流程： </p>
<p>• Git log 看一下之前的commit </p>
<p>• Git reset –-hard commit_id 恢复到某个commit</p>
<h1 id="Push和pull操作"><a href="#Push和pull操作" class="headerlink" title="Push和pull操作"></a>Push和pull操作</h1><p>• Git push origin –&gt; 将本地内容同步到云端 </p>
<p>• Git pull –&gt; 从云端拉取内容</p>
<h1 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h1><p>• Git branch 新branch名称 –&gt; 创建新branch </p>
<p>• Git checkout –&gt; 切换branch</p>
<p> • Git merge –&gt; 合并分支</p>
<p> • Git branch –D –&gt; 删除分支</p>
<h1 id="常用工作流"><a href="#常用工作流" class="headerlink" title="常用工作流"></a>常用工作流</h1><p>• Centralized Workflow –&gt; 大家都在master/main上搞开发</p>
<p> • Feature Branch Workflow –&gt; 为新feature创建branch</p>
<img src="/2022/11/17/git%E6%93%8D%E4%BD%9C/git%E6%93%8D%E4%BD%9C/image-20221117194637186.png" class="" title="image-20221117194637186">

<p>• Gitflow Workflow –&gt; 发布、开发、feature各占一个分支，hotfix</p>
<img src="/2022/11/17/git%E6%93%8D%E4%BD%9C/git%E6%93%8D%E4%BD%9C/image-20221117194652890.png" class="" title="image-20221117194652890">]]></content>
      <categories>
        <category>git常用操作</category>
      </categories>
  </entry>
  <entry>
    <title>一天SpringBoot+VUe全栈开发</title>
    <url>/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="SpringController"><a href="#SpringController" class="headerlink" title="SpringController"></a>SpringController</h1><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024145849040.png" class="" title="image-20221024145849040">

<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024145914952.png" class="" title="image-20221024145914952">

<p>如果返回的是数据是视图，则使用@Controller，@Controller通常会Thymeleaf模板使用，但结合使用就达不到前后端分离的效果</p>
<p>通常返回数据只用@RestController就好了</p>
<h2 id="Controller的用法"><a href="#Controller的用法" class="headerlink" title="@Controller的用法"></a>@Controller的用法</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024150057690.png" class="" title="image-20221024150057690">

<h2 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h2><p>通常只用前两个参数</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024150218313.png" class="" title="image-20221024150218313">

<p>二者等价</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="控制器的使用"><a href="#控制器的使用" class="headerlink" title="控制器的使用"></a>控制器的使用</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024150708922.png" class="" title="image-20221024150708922">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/getTest1&quot;,method = RequestMethod.GET)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;GET请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/getTest2&quot;,method = RequestMethod.GET)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTest2</span><span class="params">(String nickname,String phone)</span></span>&#123;</span><br><span class="line">		System.out.println(phone);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>+nickname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//（1）不加@RequestParam前端的参数名需要和后端控制器的变量名保持一致才能生效</span></span><br><span class="line">	<span class="comment">//（2）不加@RequestParam参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</span></span><br><span class="line">	<span class="comment">//（3）@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/getTest3&quot;,method = RequestMethod.GET)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTest3</span><span class="params">(<span class="meta">@RequestParam(value = &quot;nickname&quot;,required = false)</span>String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>+name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//POST请求参数写在请求体，GET请求参数写在请求行</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/postTest1&quot;,method = RequestMethod.POST)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">postTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;POST请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/postTest2&quot;,method = RequestMethod.POST)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">postTest2</span><span class="params">(String name,String age)</span></span>&#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;POST请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/postTest3&quot;,method = RequestMethod.POST)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">postTest3</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;POST请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；GET方式无请求体，所以使用@RequestBody接收数据时，前端不能使用GET方式提交数据，而是用POST方式进行提交。</span></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/postTest4&quot;,method = RequestMethod.POST)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">postTest4</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;POST请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/test/*&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;通配符请求&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot文件上传-拦截器"><a href="#SpringBoot文件上传-拦截器" class="headerlink" title="SpringBoot文件上传+拦截器"></a>SpringBoot文件上传+拦截器</h1><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>在application.properties中能定义过滤规则和静态资源位置</p>
<p>一般在static下就够用了，不用更改静态资源位置     </p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024153834493.png" class="" title="image-20221024153834493">



<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024160153091.png" class="" title="image-20221024160153091">

<p>一般配置信息在config包下</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024161902294.png" class="" title="image-20221024161902294">

<h2 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;LoginInterceptor&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="拦截器注册"><a href="#拦截器注册" class="headerlink" title="拦截器注册"></a>拦截器注册</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器对象， 注入到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        HandlerInterceptor interceptor = <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定拦截的请求uri地址</span></span><br><span class="line">        String path []= &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//指定不拦截的地址</span></span><br><span class="line">        String excludePath  [] = &#123;<span class="string">&quot;/user/login&quot;</span>&#125;;</span><br><span class="line">        registry.addInterceptor(interceptor)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RESTful服务-Swagger"><a href="#RESTful服务-Swagger" class="headerlink" title="RESTful服务+Swagger"></a>RESTful服务+Swagger</h1><h2 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h2><p>与Apipost结合使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//@PathVariable : 从url中获取数据</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">      System.out.println(id);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;根据Id获取用户信息&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;添加用户&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">updateUserById</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;更新用户&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">      System.out.println(id);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;删除用户&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h2 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger"></a>什么是Swagger</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024190848001.png" class="" title="image-20221024190848001">

<h2 id="在SpringBoot项目中整合Swagger"><a href="#在SpringBoot项目中整合Swagger" class="headerlink" title="在SpringBoot项目中整合Swagger"></a>在SpringBoot项目中整合Swagger</h2><p>1.引入springfox-swagger2和springfox-swagger-ui依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.配置Swagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//启用Swagger2功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* 配置Swagger2相关的bean</span></span><br><span class="line"><span class="comment">	* */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span>  <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">				.apiInfo(apiInfo())</span><br><span class="line">				.select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com&quot;</span>))<span class="comment">//com下的包都交给Swagger2管理</span></span><br><span class="line">				.paths(PathSelectors.any()).build();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* 此处主要是API文档页面显示信息*/</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">				.title(<span class="string">&quot;项目演示API&quot;</span>)<span class="comment">//标题</span></span><br><span class="line">				.description(<span class="string">&quot;演示项目&quot;</span>)<span class="comment">//描述</span></span><br><span class="line">				.version(<span class="string">&quot;1.0&quot;</span>)<span class="comment">//版本</span></span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.启动项目访问<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<p>如果显示不出则可能是项目中有配置注解类（@Configuration）继承了WebMvcConfigurationSupport，导致默认的Swagger静态资源被覆盖，而缺失了配置。</p>
<p>可在该继承配置类中，显式添加如下swagger静态资源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="MybatisPlus快速上手"><a href="#MybatisPlus快速上手" class="headerlink" title="MybatisPlus快速上手"></a>MybatisPlus快速上手</h1><h2 id="Mybatis的使用"><a href="#Mybatis的使用" class="headerlink" title="Mybatis的使用"></a>Mybatis的使用</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatisPlus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接池druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置数据库相关信息"><a href="#配置数据库相关信息" class="headerlink" title="配置数据库相关信息"></a>配置数据库相关信息</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<h3 id="mapper下写要被动态代理实现的接口"><a href="#mapper下写要被动态代理实现的接口" class="headerlink" title="mapper下写要被动态代理实现的接口"></a>mapper下写要被动态代理实现的接口</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221024211331078.png" class="" title="image-20221024211331078">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Select(&quot;select * from user where id =#&#123;i&#125; &quot;)</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Delete(&quot;delete from user where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Controller中将动态代理对象注入，然后接受请求"><a href="#Controller中将动态代理对象注入，然后接受请求" class="headerlink" title="Controller中将动态代理对象注入，然后接受请求"></a>Controller中将动态代理对象注入，然后接受请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/user/&#123;i&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List <span class="title">query</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">      List&lt;User&gt; list= userMapper.find(i);</span><br><span class="line">      System.out.println(list);</span><br><span class="line">      <span class="comment">//返回对象会自动转为json</span></span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i=userMapper.insert(user);</span><br><span class="line">      <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;插入成功&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;插入失败&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i=userMapper.delete(id);</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.update(user);</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;更新成功&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;更新失败&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MybatisPlus的使用"><a href="#MybatisPlus的使用" class="headerlink" title="MybatisPlus的使用"></a>MybatisPlus的使用</h2><h3 id="mapper接口直接继承BaseMapper-lt-T-gt-T是对应表的实体类"><a href="#mapper接口直接继承BaseMapper-lt-T-gt-T是对应表的实体类" class="headerlink" title="mapper接口直接继承BaseMapper&lt; T &gt;,T是对应表的实体类"></a>mapper接口直接继承BaseMapper&lt; T &gt;,T是对应表的实体类</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025094203245.png" class="" title="image-20221025094203245">

<h3 id="然后利用所写好的方法直接完成请求"><a href="#然后利用所写好的方法直接完成请求" class="headerlink" title="然后利用所写好的方法直接完成请求"></a>然后利用所写好的方法直接完成请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;User&gt; list= userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		<span class="comment">//返回对象会自动转为json</span></span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i=userMapper.insert(user);</span><br><span class="line">		<span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;插入成功&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span>  <span class="string">&quot;插入失败&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过主键id进行删除</span></span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">delete1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i=userMapper.deleteById(id);</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//根据map来删除，注意，map里面的字段与数据库字段需要保持一致哦</span></span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/user/&#123;username&#125;/&#123;password&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">delete2</span><span class="params">(<span class="meta">@PathVariable</span> String username,String password)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">		map.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">		<span class="keyword">int</span> i = userMapper.deleteByMap(map);</span><br><span class="line">		<span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span>  <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = userMapper.updateById(user);</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;更新成功&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;更新失败&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="TableName（”t-user”）"><a href="#TableName（”t-user”）" class="headerlink" title="@TableName（”t_user”）"></a>@TableName（”t_user”）</h3><p>如果实体类名称和表名不一致，则可以利用这一标签进行实体类与表的配对（括号里为表名）</p>
<h3 id="TableId-type-IdType-AUTO"><a href="#TableId-type-IdType-AUTO" class="headerlink" title="@TableId(type = IdType.AUTO)"></a>@TableId(type = IdType.AUTO)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br></pre></td></tr></table></figure>

<p>如在实体类表明id为主键，则这个用户对象就会自动带上id字段的属性值（插入的时候只写其他属性）</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025095244905.png" class="" title="image-20221025095244905">

<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025095501753.png" class="" title="image-20221025095501753">



<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025095446445.png" class="" title="image-20221025095446445">

<h3 id="TableField-“”"><a href="#TableField-“”" class="headerlink" title="@TableField(“”)"></a>@TableField(“”)</h3><p>如果实体类中属性与表中字段名称不同，则可以利用该注解来进行一个说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<h1 id="MybatisPlus多表查询及分页查询"><a href="#MybatisPlus多表查询及分页查询" class="headerlink" title="MybatisPlus多表查询及分页查询"></a>MybatisPlus多表查询及分页查询</h1><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>多表查询可参考<a href="https://blog.csdn.net/heartsdance/article/details/119734906">https://blog.csdn.net/heartsdance/article/details/119734906</a></p>
<p>MybatisPlus主要是优化了单表查询，对于多表查询，还是使用Mybatis</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025190008265.png" class="" title="image-20221025190008265">

<p>现有用户信息表(t_user)和订单表(t_order)两张表</p>
<p>t_user</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025190335921.png" class="" title="image-20221025190335921">

<p>t_order</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221025190359034.png" class="" title="image-20221025190359034">

<h3 id="查询用户信息时顺带将该用户订单信息一同查出"><a href="#查询用户信息时顺带将该用户订单信息一同查出" class="headerlink" title="查询用户信息时顺带将该用户订单信息一同查出"></a>查询用户信息时顺带将该用户订单信息一同查出</h3><h4 id="用户与订单为一对多关系"><a href="#用户与订单为一对多关系" class="headerlink" title="用户与订单为一对多关系"></a>用户与订单为一对多关系</h4><p>在用户实体类中包含订单属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Order&gt; orders;</span><br></pre></td></tr></table></figure>

<h4 id="UserMapper接口中定义selectAllUserAndOrders（）方法"><a href="#UserMapper接口中定义selectAllUserAndOrders（）方法" class="headerlink" title="UserMapper接口中定义selectAllUserAndOrders（）方法"></a>UserMapper接口中定义selectAllUserAndOrders（）方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看用户及其所有的订单</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line"><span class="meta">@Results(</span></span><br><span class="line"><span class="meta">      &#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;, property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;, property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;, property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;birthday&quot;, property = &quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;, property = &quot;orders&quot;, javaType = List.class,</span></span><br><span class="line"><span class="meta">                  many = @Many(select = &quot;com.example.mpdemo.mapper.OrderMapper.selectByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">      &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectAllUserAndOrders</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>@Many注解中调用的是OrderMapper接口中的selectByUid方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from t_order where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Order&gt; <span class="title">selectByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="UserController中接受请求并返回数据"><a href="#UserController中接受请求并返回数据" class="headerlink" title="UserController中接受请求并返回数据"></a>UserController中接受请求并返回数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/findAll&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">find</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> userMapper.selectAllUserAndOrders();&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询订单并将其所属的用户信息一同查出"><a href="#查询订单并将其所属的用户信息一同查出" class="headerlink" title="查询订单并将其所属的用户信息一同查出"></a>查询订单并将其所属的用户信息一同查出</h3><h4 id="订单与用户是一对一关系"><a href="#订单与用户是一对一关系" class="headerlink" title="订单与用户是一对一关系"></a>订单与用户是一对一关系</h4><p>在订单实体类中包含用户属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>

<h4 id="OrderMapper接口中定义selectALlOrdersAndUser（）方法"><a href="#OrderMapper接口中定义selectALlOrdersAndUser（）方法" class="headerlink" title="OrderMapper接口中定义selectALlOrdersAndUser（）方法"></a>OrderMapper接口中定义selectALlOrdersAndUser（）方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from t_order&quot;)</span></span><br><span class="line"><span class="meta">@Results(</span></span><br><span class="line"><span class="meta">   &#123;</span></span><br><span class="line"><span class="meta">      @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">      @Result(column = &quot;ordertime&quot; ,property = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="meta">      @Result(column = &quot;total&quot;,property =&quot;total&quot;),</span></span><br><span class="line"><span class="meta">      @Result(column = &quot;uid&quot;,property = &quot;user&quot;,javaType = User.class,</span></span><br><span class="line"><span class="meta">         one = @One(select = &quot;com.example.mpdemo.mapper.UserMapper.selectById&quot;)</span></span><br><span class="line"><span class="meta">      )</span></span><br><span class="line"><span class="meta">   &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function">List&lt;Order&gt; <span class="title">selectALlOrdersAndUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>@one注解中调用的是UserMapper接口中的selectById()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from t_user where id= #&#123;id&#125; &quot;)</span></span><br><span class="line"><span class="function">User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="OrderController中接受请求并返回数据"><a href="#OrderController中接受请求并返回数据" class="headerlink" title="OrderController中接受请求并返回数据"></a>OrderController中接受请求并返回数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/order/findAll&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> orderMapper.selectALlOrdersAndUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="Mybatis版条件查询"><a href="#Mybatis版条件查询" class="headerlink" title="Mybatis版条件查询"></a>Mybatis版条件查询</h3><h4 id="UserMapper中"><a href="#UserMapper中" class="headerlink" title="UserMapper中"></a>UserMapper中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id =#&#123;i&#125; &quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="UserController中"><a href="#UserController中" class="headerlink" title="UserController中"></a>UserController中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">   List&lt;User&gt; list= userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">   System.out.println(list);</span><br><span class="line">   <span class="comment">//返回对象会自动转为json</span></span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MybatisPlus版条件查询"><a href="#MybatisPlus版条件查询" class="headerlink" title="MybatisPlus版条件查询"></a>MybatisPlus版条件查询</h3><p>UserController中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/find&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByCond</span><span class="params">()</span></span>&#123;</span><br><span class="line">   QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">   queryWrapper.eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="先定义一个配置类"><a href="#先定义一个配置类" class="headerlink" title="先定义一个配置类"></a>先定义一个配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">   <span class="comment">//对分页拦截器做一个添加</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">      MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">      PaginationInnerInterceptor paginationInnerInterceptor=<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL);</span><br><span class="line">      interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">      <span class="keyword">return</span> interceptor;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在UserController中接受请求并响应"><a href="#在UserController中接受请求并响应" class="headerlink" title="在UserController中接受请求并响应"></a>在UserController中接受请求并响应</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/findByPage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPage <span class="title">findByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//Page是来描述分页情况的</span></span><br><span class="line">   Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">   <span class="comment">//Ipage是来描述结果集的</span></span><br><span class="line">   IPage iPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">return</span> iPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Vue框架快速上手"><a href="#Vue框架快速上手" class="headerlink" title="Vue框架快速上手"></a>Vue框架快速上手</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.引入vue的脚本文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="number">2.</span>声明要被vue控制的DOM区域--&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.创建vue的实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> hello=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app=Vue.createApp(hello);</span></span><br><span class="line"><span class="javascript">    app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;desc&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--内容以html方式渲染出来--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">desc</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width:w&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">link</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">inputValue</span>: <span class="string">&#x27;请输入内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">imgSrc</span>: <span class="string">&#x27;./images/demo.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">w</span>: <span class="string">&#x27;500px&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.声明要被vue控制的DOM区域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;number+1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;ok?&#x27;True&#x27;:&#x27;False&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:id</span>=<span class="string">&quot;&#x27;list-&#x27;+id&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.创建vue的实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">number</span>: <span class="number">9</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">ok</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>: <span class="string">&#x27;ABC&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">    app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.声明要被vue控制的DOM区域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>count的值为:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.创建vue的实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">count</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">addCount</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.count++;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">    app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>v-if和v-show的区别：</p>
<p>​    如果v-if为false，则它所在的p标签不会被创造出来</p>
<p>​    如果v-show为false，它所在的p标签仍旧会被创造出来，只不过是以css的格式隐藏了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;flag =!flag&quot;</span>&gt;</span>Toggle flag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>请求成功 ---被v-if控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>请求成功 ---被v-show控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="v-else和v-else-if指令"><a href="#v-else和v-else-if指令" class="headerlink" title="v-else和v-else-if指令"></a>v-else和v-else-if指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;num&gt;0.5&quot;</span>&gt;</span>随机数大于0.5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>随机数小于0.5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;C&#x27;&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">num</span>: <span class="built_in">Math</span>.random(),</span></span><br><span class="line"><span class="javascript">          <span class="attr">type</span>: <span class="string">&#x27;C&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userList&quot;</span>&gt;</span>索引是&#123;&#123;index&#125;&#125;,姓名是&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">userList</span>: [</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;王五&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加用户的区域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNewUser&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--用户列表区--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        //要用user中的id，因为其是我们设定的，不会发生改变</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">                    姓名：&#123;&#123;user.name&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//用户列表</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">userList</span>: [</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;王五&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript">          ],</span></span><br><span class="line"><span class="javascript">          <span class="comment">//输入的用户名</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">//下一个可用的id值</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">nextId</span>: <span class="number">4</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击了添加按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">addNewUser</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.userList.unshift(&#123;<span class="attr">id</span>: <span class="built_in">this</span>.nextId,<span class="attr">name</span>: <span class="built_in">this</span>.name&#125;),</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.name=<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.nextId++</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app=Vue.createApp(vm);</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue组件化开发"><a href="#Vue组件化开发" class="headerlink" title="Vue组件化开发"></a>Vue组件化开发</h1><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221027201054676.png" class="" title="image-20221027201054676">

<h2 id="新建的组件在components文件夹"><a href="#新建的组件在components文件夹" class="headerlink" title="新建的组件在components文件夹"></a>新建的组件在components文件夹</h2><p>分为三部分，template是自定义模板，export为导出（需有名字），以及样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在App-vue中导入"><a href="#在App-vue中导入" class="headerlink" title="在App.vue中导入"></a>在App.vue中导入</h2><p>导入组件后要在export中的components注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">  &lt;Hello&gt;&lt;/Hello&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import Hello from &quot;@/components/Hello&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在main.js中创建并绑定所要控制的区域，绑定的区域在index.html中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="第三方组件element-ui"><a href="#第三方组件element-ui" class="headerlink" title="第三方组件element-ui"></a>第三方组件element-ui</h1><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><p>给自定义的组件传值可利用props，定义该组件有何属性</p>
<p>然后将app.vue中的值与该组件的属性绑定即可</p>
<p>Movie.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;rating&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;button @click=&quot;fun&quot;&gt;点击收藏&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Movie&quot;,</span><br><span class="line">  props: [&#x27;title&#x27;,&#x27;rating&#x27;],</span><br><span class="line">  data: function ()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fun: function ()&#123;</span><br><span class="line">      alert(&quot;收藏成功&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Movie v-for=&quot;movie in movies&quot; :key=&quot;movie.id&quot; :title=&quot;movie.title&quot; :rating=&quot;movie.rating&quot;&gt;&lt;/Movie&gt;</span><br><span class="line">    &lt;Hello&gt;&lt;/Hello&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Movie from &quot;@/components/Movie&quot;;</span><br><span class="line">import Hello from &quot;@/components/Hello&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Movie,</span><br><span class="line">    Hello</span><br><span class="line">  &#125;,</span><br><span class="line">  data: function ()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      movies: [</span><br><span class="line">        &#123;id:1,title:&quot;金刚狼1&quot;,rating:8.7&#125;,</span><br><span class="line">        &#123;id:2,title:&quot;金刚狼2&quot;,rating:8.6&#125;,</span><br><span class="line">        &#123;id:3,title:&quot;金刚狼3&quot;,rating:8.5&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="项目中的依赖"><a href="#项目中的依赖" class="headerlink" title="项目中的依赖"></a>项目中的依赖</h2><p>项目中的依赖在node_modules中，如果项目不能运行，则可通过npm install命令</p>
<p><strong>npm install</strong> :它会根据package.json中的信息联网进行下载该项目中的依赖</p>
<h2 id="第三方组件的使用"><a href="#第三方组件的使用" class="headerlink" title="第三方组件的使用"></a>第三方组件的使用</h2><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><p><a href="https://element.eleme.cn/">https://element.eleme.cn</a></p>
<h4 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h4><p>npm install element-ui</p>
<h4 id="引入Element"><a href="#引入Element" class="headerlink" title="引入Element"></a>引入Element</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.js中引入</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用该组件</span></span><br><span class="line">Vue.use(Element);</span><br></pre></td></tr></table></figure>

<h4 id="按需引入需要组件"><a href="#按需引入需要组件" class="headerlink" title="按需引入需要组件"></a>按需引入需要组件</h4><p>选择希望使用的组件</p>
<p>将其直接放到template标签中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">        :data=&quot;tableData&quot;</span><br><span class="line">        style=&quot;width: 100%&quot;</span><br><span class="line">        :row-class-name=&quot;tableRowClassName&quot;&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;date&quot;</span><br><span class="line">          label=&quot;日期&quot;</span><br><span class="line">          width=&quot;180&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;name&quot;</span><br><span class="line">          label=&quot;姓名&quot;</span><br><span class="line">          width=&quot;180&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;address&quot;</span><br><span class="line">          label=&quot;地址&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">        v-model=&quot;value1&quot;</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;选择日期&quot;&gt;</span><br><span class="line">    &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.el-table .warning-row &#123;</span><br><span class="line">  background: oldlace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-table .success-row &#123;</span><br><span class="line">  background: #f0f9eb;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">      if (rowIndex === 1) &#123;</span><br><span class="line">        return &#x27;warning-row&#x27;;</span><br><span class="line">      &#125; else if (rowIndex === 3) &#123;</span><br><span class="line">        return &#x27;success-row&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [&#123;</span><br><span class="line">        date: &#x27;2016-05-02&#x27;,</span><br><span class="line">        name: &#x27;王小虎&#x27;,</span><br><span class="line">        address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &#x27;2016-05-04&#x27;,</span><br><span class="line">        name: &#x27;王小虎&#x27;,</span><br><span class="line">        address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &#x27;2016-05-01&#x27;,</span><br><span class="line">        name: &#x27;王小虎&#x27;,</span><br><span class="line">        address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: &#x27;2016-05-03&#x27;,</span><br><span class="line">        name: &#x27;王小虎&#x27;,</span><br><span class="line">        address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h3><h4 id="npm安装-1"><a href="#npm安装-1" class="headerlink" title="npm安装"></a>npm安装</h4><p>npm install font-awesome</p>
<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>在main.js中引入</p>
<p>import ‘font-awesome/css/font-awesome.min.css’</p>
<h4 id="按需引入所需图标"><a href="#按需引入所需图标" class="headerlink" title="按需引入所需图标"></a>按需引入所需图标</h4><p>将其放在div中</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029103911100.png" class="" title="image-20221029103911100">

<h1 id="Axios网络请求"><a href="#Axios网络请求" class="headerlink" title="Axios网络请求"></a>Axios网络请求</h1><h2 id="Axios简介"><a href="#Axios简介" class="headerlink" title="Axios简介"></a>Axios简介</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029170028701.png" class="" title="image-20221029170028701">



<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029155742429.png" class="" title="image-20221029155742429">

<h2 id="跨域问题解决"><a href="#跨域问题解决" class="headerlink" title="跨域问题解决"></a>跨域问题解决</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029155858975.png" class="" title="image-20221029155858975">

<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029160428372.png" class="" title="image-20221029160428372">

<h3 id="简单请求的服务器处理"><a href="#简单请求的服务器处理" class="headerlink" title="简单请求的服务器处理"></a>简单请求的服务器处理</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029160636146.png" class="" title="image-20221029160636146">

<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029160814768.png" class="" title="image-20221029160814768">

<h3 id="非简单请求的服务器处理"><a href="#非简单请求的服务器处理" class="headerlink" title="非简单请求的服务器处理"></a>非简单请求的服务器处理</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029161102760.png" class="" title="image-20221029161102760">

<h2 id="两种策略"><a href="#两种策略" class="headerlink" title="两种策略"></a>两种策略</h2><h3 id="Spring-Boot中配置CORS"><a href="#Spring-Boot中配置CORS" class="headerlink" title="Spring Boot中配置CORS"></a>Spring Boot中配置CORS</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029161651920.png" class="" title="image-20221029161651920">

<h3 id="在所要发请求的controller上添加-CrossOrigin这一注解"><a href="#在所要发请求的controller上添加-CrossOrigin这一注解" class="headerlink" title="在所要发请求的controller上添加@CrossOrigin这一注解"></a>在所要发请求的controller上添加@CrossOrigin这一注解</h3><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221029161738668.png" class="" title="image-20221029161738668">

<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">        :data=&quot;tableData&quot;</span><br><span class="line">        style=&quot;width: 100%&quot;</span><br><span class="line">        :row-class-name=&quot;tableRowClassName&quot;&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;id&quot;</span><br><span class="line">          label=&quot;编号&quot;</span><br><span class="line">          width=&quot;180&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;username&quot;</span><br><span class="line">          label=&quot;姓名&quot;</span><br><span class="line">          width=&quot;180&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column</span><br><span class="line">          prop=&quot;birthday&quot;</span><br><span class="line">          label=&quot;生日&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">        v-model=&quot;value1&quot;</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;选择日期&quot;&gt;</span><br><span class="line">    &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.el-table .warning-row &#123;</span><br><span class="line">  background: oldlace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-table .success-row &#123;</span><br><span class="line">  background: #f0f9eb;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from  &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">      if (rowIndex === 1) &#123;</span><br><span class="line">        return &#x27;warning-row&#x27;;</span><br><span class="line">      &#125; else if (rowIndex === 3) &#123;</span><br><span class="line">        return &#x27;success-row&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function () &#123;</span><br><span class="line">    //箭头函数作用域继承了父级</span><br><span class="line">    axios.get(&quot;http://localhost:8088/user/find&quot;).then( (response)=&gt;&#123;</span><br><span class="line">        this.tableData=response.data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="与vue整合"><a href="#与vue整合" class="headerlink" title="与vue整合"></a>与vue整合</h2><p>在main.js中写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">//其他vue文件可不用重复导入axios</span></span><br><span class="line">axios.defaults.baseURL=<span class="string">&quot;http://localhost:8088&quot;</span></span><br><span class="line"><span class="comment">//默认URL</span></span><br><span class="line">Vue.prototype.$http=axios</span><br><span class="line"><span class="comment">//如果需要设置全局变量，在main.js中，Vue实例化的代码里添加。</span></span><br><span class="line"><span class="comment">//不想污染全局作用域。这种情况下，你可以通过在原型上定义它们使其在每个Vue实例中可用</span></span><br><span class="line"><span class="comment">//这样 $http 就在所有Vue实例中可用了</span></span><br></pre></td></tr></table></figure>

<p>eg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">created: function () &#123;</span><br><span class="line">  //箭头函数作用域继承了父级</span><br><span class="line">  this.$http.get(&quot;/user/find&quot;).then( (response)=&gt;&#123;</span><br><span class="line">      this.tableData=response.data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="前端路由VueRouter"><a href="#前端路由VueRouter" class="headerlink" title="前端路由VueRouter"></a>前端路由VueRouter</h1><h2 id="SPA-与前端路由"><a href="#SPA-与前端路由" class="headerlink" title="SPA 与前端路由"></a><strong>SPA</strong> <strong>与前端路由</strong></h2><p>路由是根据不同的url地址来显示不同的页面或内容的功能，这个概念很早是由后端提出的，既浏览器向</p>
<p>不同的地址发送请求，后端返回相应的内容。</p>
<p>SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面</p>
<p>内完成。此时，不同组件之间的切换需要通过前端路由来实现。</p>
<p>前端路由通常是通过监听URL hash属性值的变化，切换页面，hash 属性是一个 可读可写的字符串 ，该字</p>
<p>符串是 URL 的锚部分（从 # 号开始的部分）。</p>
<h3 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h3><p>前端路由，指的是 Hash 地址与组件之间的对应关系。</p>
<p>用户点击了页面上的路由链接</p>
<p>导致了 URL 地址栏中的 Hash 值发生了变化</p>
<p>前端路由监听了到 Hash 地址的变化</p>
<p>前端路由把当前 Hash 地址对应的组件渲染都浏览器中</p>
<h2 id="vue-router基本使用"><a href="#vue-router基本使用" class="headerlink" title="vue-router基本使用"></a><strong>vue-router</strong>基本使用</h2><p>vue-router的基本使用步骤</p>
<ul>
<li>在项目中安装 vue-router</li>
<li>定义路由组件</li>
<li>声明路由链接和占位符</li>
<li>创建路由模块</li>
<li>导入并挂载路由模块</li>
</ul>
<h3 id="vue-router安装"><a href="#vue-router安装" class="headerlink" title="vue-router安装"></a><strong>vue-router</strong>安装</h3><p>npm install vue-router@3</p>
<h3 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h3><p>在项目中定义 Discover.vue、Friends.vue、My.vue 三个组件，将来要使用 vue-router 来控制它们的</p>
<p>展示与切换：</p>
<p>Discover.vue：</p>
<p>npm install <a href="mailto:&#118;&#117;&#x65;&#x2d;&#x72;&#x6f;&#x75;&#116;&#101;&#x72;&#x40;&#x33;&#70;&#x72;&#x69;&#101;&#110;&#100;&#x73;&#x2e;&#x76;&#x75;&#101;">&#118;&#117;&#x65;&#x2d;&#x72;&#x6f;&#x75;&#116;&#101;&#x72;&#x40;&#x33;&#70;&#x72;&#x69;&#101;&#110;&#100;&#x73;&#x2e;&#x76;&#x75;&#101;</a>：</p>
<p>My.vue：</p>
<p><strong>声明路由链接和占位标签</strong></p>
<p>可以使用 <router-link> 标签来声明路由链接，并使用 <router-view> 标签来声明路由占位符。示例</p>
<p>代码如下：</p>
<p>App.vue：</p>
<p><strong>创建路由模块</strong></p>
<p>在项目中创建 index.js 路由模块，加入以下代码：</p>
<p>Discover.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;发现音乐&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>Friends.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;关注&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>My.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我的音乐&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="声明路由链接和占位标签"><a href="#声明路由链接和占位标签" class="headerlink" title="声明路由链接和占位标签"></a><strong>声明路由链接和占位标签</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以使用 &lt;router-link&gt; 标签来声明路由链接，并使用 &lt;router-view&gt; 标签来声明路由占位符。示例</span><br><span class="line"></span><br><span class="line">代码如下：</span><br><span class="line">App.vue：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;APP组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 声明路由链接 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/discover&quot;&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/friend&quot;&gt;关注&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- 声明路由占位标签 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h3><p>在项目中创建 index.js 路由模块，加入以下代码：    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Discover <span class="keyword">from</span> <span class="string">&#x27;@/components/Discover.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Friends <span class="keyword">from</span> <span class="string">&#x27;@/components/Friends.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> My <span class="keyword">from</span> <span class="string">&#x27;@/components/My.vue&#x27;</span></span><br><span class="line"><span class="comment">//将VueRouter设置为Vue的插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">// 指定hash属性与组件的对应关系</span></span><br><span class="line">        <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/discover&#x27;</span>, <span class="attr">component</span>: Discover &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/friends&#x27;</span>, <span class="attr">component</span>: Friends &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: My &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h3 id="挂载路由模块"><a href="#挂载路由模块" class="headerlink" title="挂载路由模块"></a>挂载路由模块</h3><p>在main.js中导入并挂载router</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="vue-router进阶"><a href="#vue-router进阶" class="headerlink" title="vue-router进阶"></a>vue-router进阶</h2><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。</p>
<p>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">// 指定hash属性与组件的对应关系</span></span><br><span class="line">	  <span class="attr">routes</span>: [</span><br><span class="line"><span class="comment">// 当用户访问 / 时，跳转到 /discover</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/discover&#x27;</span>, <span class="attr">component</span>: Discover &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/friends&#x27;</span>, <span class="attr">component</span>: Friends &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: My &#125;,</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>在 Discover.vue 组件中，声明 toplist和 playlist的子路由链接以及子路由占位符。示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;发现音乐&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 子路由链接 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/discover/toplist&quot;&gt;推荐&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/discover/playlist&quot;&gt;歌单&lt;/router-link&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在 src/router/index.js 路由模块中，导入需要的组件，并使用 children 属性声明子路由规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">// 指定hash属性与组件的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">    	&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/discover&#x27;</span>&#125;,</span><br><span class="line">    	&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/discover&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: Discover,</span><br><span class="line">                <span class="comment">// 通过children属性，嵌套声明子路由</span></span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                &#123;<span class="attr">path</span>:<span class="string">&quot;toplist&quot;</span>,<span class="attr">component</span>:TopList&#125;,</span><br><span class="line">                &#123;<span class="attr">path</span>:<span class="string">&quot;playlist&quot;</span>,<span class="attr">component</span>:PlayList&#125;,</span><br><span class="line">                ]</span><br><span class="line">    	&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/friends&#x27;</span>, <span class="attr">component</span>: Friends &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: My &#125;,</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。在 vue-router 中使用英文的冒号（**:**）来定义路由的参数项。示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/product/:id&#x27;</span>,<span class="attr">component</span>:Product &#125;</span><br></pre></td></tr></table></figure>

<p>通过动态路由匹配的方式渲染出来的组件中，可以使用 $route.params 对象访问到动态匹配的参数值，</p>
<p><strong>比如在商品详情组件的内部，根据id值，请求不同的商品数据</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;Product组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 获取动态的id值 --&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	// 组件的名称</span><br><span class="line">	name: &#x27;Product&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>为了简化路由参数的获取形式，vue-router 允许在路由规则中开启 props 传参。示例代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/product/:id&#x27;</span>,<span class="attr">component</span>: Product, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;Product组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 获取动态的id值 --&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;id&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 组件的名称</span><br><span class="line">    name: &#x27;Product&#x27;,</span><br><span class="line">    props : [id]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><h2 id="Vuex介绍"><a href="#Vuex介绍" class="headerlink" title="Vuex介绍"></a>Vuex介绍</h2><p>由于状态零散地分布在许多组件和组件之间的交互中，大型应用复杂度也经常逐渐增长。为了解决这个</p>
<p>问题，Vue 提供 Vuex：我们有受到 Elm 启发的状态管理库。</p>
<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong> <strong>+</strong> <strong>库</strong>。它采用集中式存储管理应用的所有组件的</p>
<p>状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<h2 id="什么情况下应该使用-Vuex？"><a href="#什么情况下应该使用-Vuex？" class="headerlink" title="什么情况下应该使用 Vuex？"></a><strong>什么情况下应该使用</strong> Vuex？</h2><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p>
<p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简</p>
<p>单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型</p>
<p>单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221030165957097.png" class="" title="image-20221030165957097">

<p>store</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueX <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.use(VueX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store=<span class="keyword">new</span> VueX.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state,n</span>)</span>&#123;</span><br><span class="line">            state.count+=n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">doneTodos</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  state.todos.filter(<span class="function"><span class="params">todo</span>=&gt;</span>todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import store from &quot;@/store&quot;;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  store: store</span><br><span class="line"></span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<p>components</p>
<p>HelloWorld.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">        &lt;!-- &#123;&#123;this.$store.state.count&#125;&#125;--&gt;</span><br><span class="line">        &#123;&#123;count&#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;todo in doneTodos&quot; :key=&quot;todo.id&quot;&gt;&#123;&#123;todo.text&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapGetters&#125; from &quot;vuex&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([</span><br><span class="line">               //映射 this.count 为store.store.count</span><br><span class="line">               &quot;count&quot;, &quot;todos&quot;</span><br><span class="line">             ]),</span><br><span class="line">    ...mapGetters([</span><br><span class="line">        &#x27;doneTodos&#x27;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add: function ()&#123;</span><br><span class="line">      this.$store.commit(&quot;increment&quot;,2)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="前端数据模拟MockJS"><a href="#前端数据模拟MockJS" class="headerlink" title="前端数据模拟MockJS"></a>前端数据模拟MockJS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Mock.js 是一款前端开发中拦截Ajax请求再生成随机数据响应的工具，可以用来模拟服务器响应.<br>优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类型.。<br>支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。<br>安装：npm install mockjs</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在项目中创建mock目录，新建index.js文件</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221030173653503.png" class="" title="image-20221030173653503">

<p>组件中调用mock.js中模拟的数据接口，这时返回的response就是mock.js中用Mock.mock(‘url’,data）中设置的data</p>
<img src="/2022/10/24/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/%E4%B8%80%E5%A4%A9SpringBoot-VUe%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/image-20221030173726199.png" class="" title="image-20221030173726199">

<h1 id="vue-element-admin后台继承方案"><a href="#vue-element-admin后台继承方案" class="headerlink" title="vue-element-admin后台继承方案"></a>vue-element-admin后台继承方案</h1><p>地址：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></p>
<p>克隆项目，git clone <a href="https://github.com/PanJiaChen/vue-element-admin.git">https://github.com/PanJiaChen/vue-element-admin.git</a><br>进入项目目录，cd vue-element-admin<br>安装依赖，npm install<br>使用淘宝镜像，npm install –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br> 本地开发 启动项目，npm run dev</p>
<h1 id="JWT跨域认证"><a href="#JWT跨域认证" class="headerlink" title="JWT跨域认证"></a>JWT跨域认证</h1>]]></content>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/03/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>动态规划三要素：起始状态+终止状态+方程式</p>
<p>动态规划就是通过起始状态到终止状态结合方程式求出中间所有的元素并将其放入数组中</p>
<p>能做什么？ </p>
<p>eg：斐波那契数列</p>
<p><img src="/2022/03/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220422204215970.png"></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven笔记</title>
    <url>/2022/08/06/Maven/Maven%E7%AC%94%E8%AE%B0/Maven%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="1-完成一个java项目，需要做哪些工作"><a href="#1-完成一个java项目，需要做哪些工作" class="headerlink" title="1.完成一个java项目，需要做哪些工作"></a>1.完成一个java项目，需要做哪些工作</h3><p>1.分析项目要做什么，知道项目有哪些组成部分。<br>2.设计项目，通过哪些步骤，使用哪些技术。需要多少人， 多长的时间。<br>3.组建团队，招人， 购置设备，服务器， 软件， 笔记本。<br>4.开发人员写代码。 开发人员需要测试自己写代码。 重复多次的工作。<br>5.测试人员，测试项目功能是否符合要求。<br>  测试开发人员提交代码-如果测试有问题–需要开发人员修改–在提交代码给测试<br>  –测试人员在测试代码-如果还有问题-在交给开发人员-开发人员在提交-在测试<br>  直到-测试代码通过。</p>
<h3 id="2-传统开发项目的问题，没有使用maven【meivn】管理的项目"><a href="#2-传统开发项目的问题，没有使用maven【meivn】管理的项目" class="headerlink" title="2.传统开发项目的问题，没有使用maven【meivn】管理的项目"></a>2.传统开发项目的问题，没有使用maven【meivn】管理的项目</h3><p>  1）很多模块，模块之间有关系， 手工管理关系，比较繁琐。<br>  2）需要很多第三方功能， 需要很多jar文件，需要手工从网络中获取各个jar<br>  3）需要管理jar的版本， 你需要的是mysql.5.1.5.jar 拿你不能给给一个mysql.4.0.jar<br>  4）管理jar文件之间的依赖， 你的项目要使用a.jar 需要使用b.jar里面的类。<br>     必须首先获取到b.jar才可以， 然后才能使用a.jar. </p>
<p>​    a.jar需要b.jar这个关系叫做依赖， 或者你的项目中要使用mysql的驱动， 也可以叫做项目依赖mysql驱动。</p>
<pre><code> a.class使用b.class， a依赖b类
</code></pre>
<h3 id="3-需要改进项目的开发和管理，需要maven"><a href="#3-需要改进项目的开发和管理，需要maven" class="headerlink" title="3.需要改进项目的开发和管理，需要maven"></a>3.需要改进项目的开发和管理，需要maven</h3><p>​    1）maven可以管理jar文件<br>​    2）自动下载jar和他的文档，源代码<br>​    3）管理jar直接的依赖， a.jar需要b.jar ， maven会自动下载b.jar<br>​    4）管理你需要的jar版本<br>​    5）帮你编译程序，把java编译为class<br>​    6）帮你测试你的代码是否正确。<br>​    7）帮你打包文件，形成jar文件，或者war文件<br>​    8）帮你部署项目</p>
<h3 id="4-构建：-项目的构建。"><a href="#4-构建：-项目的构建。" class="headerlink" title="4.构建： 项目的构建。"></a>4.构建： 项目的构建。</h3><p>   构建是面向过程的，就是一些步骤，完成项目代码的编译，测试，运行，打包，部署等等。<br>   maven支持的构建包括有：<br>    1.清理， 把之前项目编译的东西删除掉，我新的编译代码做准备。<br>    2.编译， 把程序源代码编译为执行代码， java-class文件<br>             批量的，maven可以同时把成千上百的文件编译为class。<br>         javac 不一样，javac一次编译一个文件。<br>    3.测试， maven可以执行测试程序代码，验证你的功能是否正确。<br>             批量的，maven同时执行多个测试代码，同时测试很多功能。<br>    4.报告， 生成测试结果的文件， 测试通过没有。<br>    5.打包， 把你的项目中所有的class文件，配置文件等所有资源放到一个压缩文件中。<br>              这个压缩文件就是项目的结果文件， 通常java程序，压缩文件是jar扩展名的。<br>          对于web应用，压缩文件扩展名是.war<br>    6.安装， 把5中生成的文件jar，war安装到本机仓库<br>    7.部署， 把程序安装好可以执行。</p>
<h3 id="5-maven核心概念：-用好maven，了解这些概念"><a href="#5-maven核心概念：-用好maven，了解这些概念" class="headerlink" title="5.maven核心概念： 用好maven，了解这些概念"></a>5.maven核心概念： 用好maven，了解这些概念</h3><p>①POM ： 一个文件 名称是pom.xml ,  pom翻译过来叫做项目对象模型。<br>         maven把一个项目当做一个模型使用。控制maven构建项目的过程，管理jar依赖。</p>
<p>②约定的目录结构 ： maven项目的目录和文件的位置都是规定的。</p>
<p>③坐标 ： 是一个唯一的字符串，用来表示资源的。</p>
<p>④依赖管理 ： 管理你的项目可以使用jar文件</p>
<p>⑤仓库管理（了解） ：你的资源存放的位置</p>
<p>⑥生命周期 (了解) ： maven工具构建项目的过程，就是生命周期。<br>⑦插件和目标（了解）：执行maven构建的时候用的工具是插件<br>⑧继承<br>⑨聚合</p>
<p>讲maven的使用，先难后易的。 难是说使用maven的命令，完成maven使用 ， 在idea中直接使用maven，代替命令。</p>
<h3 id="6-maven工具的安装和配置。"><a href="#6-maven工具的安装和配置。" class="headerlink" title="6.maven工具的安装和配置。"></a>6.maven工具的安装和配置。</h3><p>  1）需要从maven的官网下载maven的安装包 apache-maven-3.3.9-bin.zip<br>  2）解压安装包，解压到一个目录，非中文目录。<br>      子目录 bin :执行程序，主要是mvn.cmd<br>               conf :maven工具本身的配置文件 settings.xml<br>  3）配置环境变量<br>     在系统的环境变量中，指定一个M2_HOME的名称， 指定它的值是maven工具安装目录，bin之前的目录</p>
<p>M2_HOME=D:\work\maven_work\apache-maven-3.3.9</p>
<p> 再把M2_HOME加入到path之中，在所有路径之前加入 %M2_HOME%\bin;</p>
<p>  4）验证，新的命令行中，执行mvn -v</p>
<p>注意：需要配置JAVA_HOME ，指定jdk路径</p>
<pre><code>C:\Users\Administrator&gt;mvn -v
 出现如下内容，maven安装，配置正确。
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:4
Maven home: D:\work\maven_work\apache-maven-3.3.9
Java version: 1.8.0_40, vendor: Oracle Corporation
Java home: C:\java\JDK8-64\jre
Default locale: zh_CN, platform encoding: GBK
OS name: &quot;windows 7&quot;, version: &quot;6.1&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot;
</code></pre>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="1-maven约定的目录结构，-约定是大家都遵循的一个规则。"><a href="#1-maven约定的目录结构，-约定是大家都遵循的一个规则。" class="headerlink" title="1.maven约定的目录结构， 约定是大家都遵循的一个规则。"></a>1.maven约定的目录结构， 约定是大家都遵循的一个规则。</h3><p>   每一个maven项目在磁盘中都是一个文件夹（项目-Hello）<br>    Hello/<br>      —/src<br>      ——/main           #放你主程序java代码和配置文件<br>      ———-/java       #你的程序包和包中的java文件<br>      ———-/resources  #你的java程序中要使用的配置文件</p>
<pre><code>  ------/test  #放测试程序代码和文件的（可以没有）
   ----------/java       #测试程序包和包中的java文件
    ----------/resources  #测试java程序中要使用的配置文件
</code></pre>
<p>​      —/pom.xml  #maven的核心文件（maven项目必须有）</p>
<h3 id="2-疑问：-mvn-compile-编译src-main目录下的所有java文件的。"><a href="#2-疑问：-mvn-compile-编译src-main目录下的所有java文件的。" class="headerlink" title="2.疑问： mvn compile 编译src/main目录下的所有java文件的。"></a>2.疑问： mvn compile 编译src/main目录下的所有java文件的。</h3><p>   1）为什么要下载<br>       maven工具执行的操作需要很多插件（java类–jar文件）完成的<br>    2）下载什么东西了<br>        jar文件–叫做插件–插件是完成某些功能</p>
<p>​    3）下载的东西存放到哪里了。<br>            默认仓库（本机仓库）：<br>           C:\Users\（登录操作系统的用户名）Administrator.m2\repository</p>
<p>Downloading: <a href="https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter-2.0.9.pom">https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter-2.0.9.pom</a></p>
<p>   <a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a> ：中央仓库的地址</p>
<p>执行mvn compile， 结果是在项目的根目录下生成target目录（结果目录），<br>maven编译的java程序，最后的class文件都放在target目录中</p>
<p>设置本机存放资源的目录位置(设置本机仓库)：</p>
<ol>
<li><p>修改maven的配置文件， maven安装目录/conf/settings.xml<br>先备份 settings.xml</p>
</li>
<li><p>修改 <localRepository>  指定你的目录（不要使用中文目录）</p>
</li>
</ol>
<p> D:\work\maven_work\maven_repository</p>
<h3 id="3-仓库"><a href="#3-仓库" class="headerlink" title="3.仓库"></a>3.仓库</h3><p>  1）仓库是什么： 仓库是存放东西的， 存放maven使用的jar 和 我们项目使用的jar<br>     &gt; maven使用的插件（各种jar）<br>      &gt; 我项目使用的jar(第三方的工具)</p>
<p>  2）仓库的分类<br>     &gt;本地仓库， 就是你的个人计算机上的文件夹，存放各种jar<br>      &gt;远程仓库， 在互联网上的，使用网络才能使用的仓库<br>          ①：中央仓库，最权威的， 所有的开发人员都共享使用的一个集中的仓库，<br>                  <a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a> ：中央仓库的地址<br>            ②：中央仓库的镜像：就是中央仓库的备份， 在各大洲，重要的城市都是镜像。</p>
<p>​            ③：私服，在公司内部，在局域网中使用的， 不是对外使用的。</p>
<p>  3）仓库的使用，maven仓库的使用不需要人为参与。<br>           开发人员需要使用mysql驱动—&gt;maven首先查本地仓库—&gt;私服—&gt;镜像—&gt;中央仓库</p>
<h3 id="4-pom-项目对象模型，是一个pom-xml文件"><a href="#4-pom-项目对象模型，是一个pom-xml文件" class="headerlink" title="4.pom:项目对象模型，是一个pom.xml文件"></a>4.pom:项目对象模型，是一个pom.xml文件</h3><p>​    1）坐标：唯一值， 在互联网中唯一标识一个项目的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;groupId&gt;公司域名的倒写&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;自定义项目名称&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;自定版本号&lt;/version&gt;</span><br></pre></td></tr></table></figure>

<p>   <a href="https://mvnrepository.com/">https://mvnrepository.com/</a> 搜索使用的中央仓库， 使用groupId 或者 artifactId作为搜索条件</p>
<p>  2） packaging： 打包后压缩文件的扩展名，默认是jar ，web应用是war<br>      packaging 可以不写， 默认是jar</p>
<ol start="3">
<li>依赖<br>dependencies 和dependency ，相当于是 java代码中import</li>
</ol>
<p>​     你的项目中要使用的各种资源说明， 比我的项目要使用mysql驱动</p>
<pre><code> &lt;dependencies&gt;
    &lt;!--依赖  java代码中 import --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.9&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;/dependencies&gt;
</code></pre>
<p>  4）properties：设置属性</p>
<p>  5）build ： maven在进行项目的构建时， 配置信息，例如指定编译java代码使用的jdk的版本等</p>
<h3 id="5-maven生命周期，-maven的命令，maven的插件"><a href="#5-maven生命周期，-maven的命令，maven的插件" class="headerlink" title="5.maven生命周期， maven的命令，maven的插件"></a>5.maven生命周期， maven的命令，maven的插件</h3><p>​    maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署<br>​     maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。<br>​                  maven可以使用命令，完成项目的清理，编译，测试等等</p>
<p>​     maven的插件： maven命令执行时，真正完成功能的是插件，插件就是一些jar文件， 一些类。</p>
<p>   1）单元测试（测试方法）：用的是junit， junit是一个专门测试的框架（工具）。<br>       junit测试的内容： 测试的是类中的方法， 每一个方法都是独立测试的。<br>                           方法是测试的基本单位（单元）。</p>
<p>​          maven借助单元测试，批量的测试你类中的大量方法是否符合预期的。</p>
<p>  2）使用步骤<br>     1.加入依赖，在pom.xml加入单元测试依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 单元测试 --&gt;</span><br><span class="line">		 &lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		 &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p> 2.在maven项目中的src/test/java目录下，创建测试程序。<br>    推荐的创建类和方法的提示：<br>     1.测试类的名称 是Test + 你要测试的类名<br>     2.测试的方法名称 是：Test + 方法名称</p>
<p>例如你要测试HelloMaven ,<br> 创建测试类 TestHelloMaven</p>
<p>   @Test<br>     public void testAdd(){<br>      测试HelloMaven的add方法是否正确<br>     }</p>
<p>其中testAdd叫做测试方法，它的定义规则<br> 1.方法是public的，必须的<br> 2.方法没有返回值， 必须的<br> 3.方法名称是自定义的，推荐是Test + 方法名称<br> 4.在方法的上面加入 @Test</p>
<p>​    </p>
<p> 3)mvn compile<br>   编译main/java/目录下的java 为class文件， 同时把class拷贝到 target/classes目录下面<br>    把main/resources目录下的所有文件 都拷贝到target/classes目录下</p>
<img src="/2022/08/06/Maven/Maven%E7%AC%94%E8%AE%B0/Maven%E7%AC%94%E8%AE%B0/image-20220807175631731.png" class="" title="image-20220807175631731">

<h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><h3 id="1-在idea中设置maven-，让idea和maven结合使用。"><a href="#1-在idea中设置maven-，让idea和maven结合使用。" class="headerlink" title="1.在idea中设置maven ，让idea和maven结合使用。"></a>1.在idea中设置maven ，让idea和maven结合使用。</h3><p>   idea中内置了maven ，一般不使用内置的， 因为用内置修改maven的设置不方便。<br>    使用自己安装的maven， 需要覆盖idea中的默认的设置。让idea指定maven安装位置等信息</p>
<p>配置的入口 ①：配置当前工程的设置， file–settings —Build, Excution,Deployment–Build Tools<br>               –Maven<br>                       Maven Home directory: maven的安装目录<br>                        User Settings File :  就是maven安装目录conf/setting.xml配置文件<br>                        Local Repository :    本机仓库的目录位置</p>
<p>​                                    –Build Tools–Maven–Runner<br>​                                              VM Options : archetypeCatalog=internal<br>​                                              JRE: 你项目的jdk</p>
<p>​                                        archetypeCatalog=internal , maven项目创建时，会联网下载模版文件，比较大， 使用-DarchetypeCatalog=internal，不用下载， 创建maven项目速度快。</p>
<p>​                        ②：配置以后新建工程的设置， file–other settings–Settings for New Project</p>
<h3 id="2-使用模版创建项目"><a href="#2-使用模版创建项目" class="headerlink" title="2.使用模版创建项目"></a>2.使用模版创建项目</h3><p>  1）maven-archetype-quickstart : 普通的java项目<br>  2）maven-archetype-webapp : web工程</p>
<h2 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h2><h3 id="1依赖范围，-使用scope表示的。"><a href="#1依赖范围，-使用scope表示的。" class="headerlink" title="1依赖范围， 使用scope表示的。"></a>1依赖范围， 使用scope表示的。</h3><p>   scope的值有 compile, test, provided ,默认是compile<br>    scope:表示依赖使用的范围，也就是在maven构建项目的那些阶段中起作用。<br>        maven构建项目  编译， 测试 ，打包， 安装 ，部署 过程（阶段）</p>
<p>   junit的依赖范围是 test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;a&lt;/groupId&gt;
  &lt;artifactId&gt;b&lt;/artifactId&gt;   b.jar
  &lt;version&gt;4.11&lt;/version&gt;
&lt;/dependency&gt;


 &lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
  &lt;version&gt;3.1.0&lt;/version&gt;          servlet.jar
  &lt;scope&gt;provided&lt;/scope&gt; 提供者
&lt;/dependency&gt;
</code></pre>
<p>   你在写项目的中的用到的所有依赖（jar ） ，必须在本地仓库中有。<br>​    没有必须通过maven下载， 包括provided的都必须下载。</p>
<pre><code>你在servlet需要继承HttpServlet( provided) , 你使用的HttpServlet是maven仓库中的。

当你的写好的程序， 放到 tomat服务器中运行时， 此时你的程序中不包含servlet的jar
因为tomcat提供了 servlet的.jar
</code></pre>
<h2 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h2><p>  maven常用操作</p>
<h3 id="1-maven的属性设置"><a href="#1-maven的属性设置" class="headerlink" title="1.maven的属性设置"></a>1.maven的属性设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt; 设置maven的常用属性</span><br></pre></td></tr></table></figure>

<h3 id="2-maven的全局变量"><a href="#2-maven的全局变量" class="headerlink" title="2.maven的全局变量"></a>2.maven的全局变量</h3><p>​     自定义的属性，1.在properties通过自定义标签声明变量（标签名就是变量名）<br>​                     2.在pom.xml文件中的其它位置，使用 ${标签名} 使用变量的值</p>
<pre><code>自定义全局变量一般是定义 依赖的版本号， 当你的项目中要使用多个相同的版本号，
先使用全局变量定义， 在使用$&#123;变量名&#125;
</code></pre>
<img src="/2022/08/06/Maven/Maven%E7%AC%94%E8%AE%B0/Maven%E7%AC%94%E8%AE%B0/image-20220808111108740.png" class="" title="image-20220808111108740">



<img src="/2022/08/06/Maven/Maven%E7%AC%94%E8%AE%B0/Maven%E7%AC%94%E8%AE%B0/image-20220808111133319.png" class="" title="image-20220808111133319">

<h3 id="3-资源插件"><a href="#3-资源插件" class="headerlink" title="3.资源插件"></a>3.资源插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;build&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/java&lt;/directory&gt;&lt;!--所在的目录--&gt;</span><br><span class="line">&lt;includes&gt;&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;!—filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line"> &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>  作用： mybatis课程中会用到这个作用</p>
<ol>
<li><p>默认没有使用resources的时候， maven执行编译代码时， 会把src/main/resource目录中的文件拷贝到target/classes目录中。</p>
</li>
<li><p>我们的程序有需要把一些文件放在src/main/java目录中，当我在执行Java程序时，需要用到src/main/java目录中的文件。</p>
<p>需要告诉maven在mvn compile src/main/java目录下的程序时，需要把文件一同拷贝到target/classes目录中。</p>
<p>此时就需要在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;中加入&lt;resources&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="六思维导图"><a href="#六思维导图" class="headerlink" title="六思维导图"></a>六思维导图</h2><img src="/2022/08/06/Maven/Maven%E7%AC%94%E8%AE%B0/Maven%E7%AC%94%E8%AE%B0/image-20220808175247328.png" class="" title="image-20220808175247328">]]></content>
      <categories>
        <category>Maven</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet-jsp</title>
    <url>/2022/05/10/Javaweb/Servlet-Jsp/Servlet-jsp/</url>
    <content><![CDATA[<ul>
<li>从JavaWEB开始。（Servlet为核心，从Servlet开始学习。）</li>
<li>JSP（JSP使用较少了，但是还有用，所以时间上少一些。快速地学习一下JSP。）</li>
<li>AJAX（异步通信技术。）</li>
<li>jQuery（JavaScript库。）</li>
<li>MyBatis</li>
<li>Spring</li>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
<li>….</li>
</ul>
<h1 id="需要提前准备了哪些技术，接下来的课才能听懂？"><a href="#需要提前准备了哪些技术，接下来的课才能听懂？" class="headerlink" title="需要提前准备了哪些技术，接下来的课才能听懂？"></a>需要提前准备了哪些技术，接下来的课才能听懂？</h1><ul>
<li>JavaSE（Java语言的标准版，Java提供的最基本的类库）<ul>
<li>Java的开发环境搭建</li>
<li>Java的基础语法</li>
<li>Java的面向对象</li>
<li>数组</li>
<li>常用类</li>
<li>异常</li>
<li>集合</li>
<li>多线程</li>
<li>IO流</li>
<li>反射机制</li>
<li>注解Annotation</li>
<li>…..</li>
</ul>
</li>
<li>MySQL（数据库）<ul>
<li>最基本的要求是：能够编写增删改查等简单的SQL语句即可。</li>
</ul>
</li>
<li>JDBC（Java语言链接数据库）<ul>
<li>这是一套Java语言链接数据库的接口。</li>
</ul>
</li>
<li>WEB前端（会一些）<ul>
<li>HTML（网页）</li>
<li>CSS（层叠样式表语言，修饰HTML）</li>
<li>JavaScript（一种脚本语言，运行在浏览器当中，让浏览器中的元素可以增删改。让网页产生更强的交互效果）</li>
</ul>
</li>
<li>WEB后端<ul>
<li>Servlet（Server Applet：服务器端的Java小程序）</li>
<li>JSP</li>
<li>AJAX</li>
<li>jQuery</li>
<li>MyBatis</li>
<li>Spring</li>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
<li>……</li>
</ul>
</li>
</ul>
<h1 id="Typora软件介绍"><a href="#Typora软件介绍" class="headerlink" title="Typora软件介绍"></a>Typora软件介绍</h1><ul>
<li><p>Markdown文本编辑器（可以编辑xxx.md文件）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test code!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><ol>
<li>系统架构包括什么形式？<ul>
<li>C/S架构</li>
<li>B/S架构</li>
</ul>
</li>
<li>C/S架构？<ul>
<li>Client / Server（客户端 / 服务器）</li>
<li>C/S架构的软件或者说系统有哪些呢？<ul>
<li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li>
</ul>
</li>
<li>C/S架构的特点：需要安装特定的客户端软件。</li>
<li>C/S架构的系统优点和缺点分别是什么？<ul>
<li>优点：<ul>
<li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C/S结构的系统速度快）</li>
<li>体验好（速度又快，界面又酷炫，当然体验好了。）</li>
<li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li>
<li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li>
<li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C/S结构的系统比较安全。）</li>
<li>…..</li>
</ul>
</li>
<li>缺点：<ul>
<li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>B/S架构？<ul>
<li>B/S（Browser / Server，浏览器 / 服务器）</li>
<li><a href="http://www.baidu.com/">http://www.baidu.com</a></li>
<li><a href="http://www.jd.com/">http://www.jd.com</a></li>
<li><a href="http://www.126.com/">http://www.126.com</a></li>
<li>B/S结构的系统是不是一个特殊的C/S系统？<ul>
<li>实际上B/S结构的系统还是一个C/S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li>
</ul>
</li>
<li>B/S结构的系统优点和缺点是：<ul>
<li>优点：<ul>
<li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li>
<li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li>
</ul>
</li>
<li>缺点：<ul>
<li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B/S结构的系统在网络中传送的数据量比较大。）</li>
<li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li>
<li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li>
<li>….</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>C/S和B/S结构的系统，哪个好，哪个不好？<ul>
<li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li>
<li>娱乐性软件建议使用？<ul>
<li>C/S 结构</li>
</ul>
</li>
<li>公司内部使用的一些业务软件建议使用？<ul>
<li>公司内部使用的系统，需要维护成本低。</li>
<li>公司内部使用的系统，不需要很酷炫。</li>
<li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li>
<li>B/S 结构。</li>
</ul>
</li>
</ul>
</li>
<li>注意了：开发B/S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。<ul>
<li>开发一个WEB系统你需要会哪些技术？<ul>
<li>WEB前端（运行在浏览器上的程序。）<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
</li>
<li>WEB后端（WEB服务器端的程序。）<ul>
<li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li>
<li>C语言也可以</li>
<li>C++也可以</li>
<li>Python也行</li>
<li>PHP也可以</li>
<li>….</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>JavaEE是什么？<ul>
<li>Java包括三大块：<ul>
<li>JavaSE<ul>
<li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li>
</ul>
</li>
<li>JavaEE（WEB方向，WEB系统。）<ul>
<li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li>
<li>别人写好的，你用就行了，用它可以开发企业级项目。</li>
<li>可以开发web系统。</li>
<li>Java比较火爆的就是这个JavaEE方向。</li>
</ul>
</li>
<li>JavaME<ul>
<li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li>
<li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li>
</ul>
</li>
</ul>
</li>
<li>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</li>
</ul>
</li>
</ol>
<h2 id="B-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B/S结构的系统通信原理（没有涉及到Java小程序）"></a>B/S结构的系统通信原理（没有涉及到Java小程序）</h2><ul>
<li>WEB系统的访问过程<ul>
<li>第一步：打开浏览器</li>
<li>第二步：找到地址栏</li>
<li>第三步：输入一个合法的网址</li>
<li>第四步：回车</li>
<li>第五步：在浏览器上会展示响应的结果。</li>
</ul>
</li>
<li>关于域名：<ul>
<li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li>
<li><a href="http://www.baidu.com/">www.baidu.com</a> 是一个域名</li>
<li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li>
<li>解析结果也许是：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li>
</ul>
</li>
<li>IP地址是啥？<ul>
<li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li>
<li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li>
</ul>
</li>
<li>端口号是啥？<ul>
<li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li>
<li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li>
<li>在同一个计算机上，端口号具有唯一性。</li>
</ul>
</li>
<li>一个WEB系统的通信原理？通信步骤：<ul>
<li>第一步：用户输入网址（URL）</li>
<li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li>
<li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li>
<li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li>
<li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li>
<li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li>
<li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li>
<li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li>
</ul>
</li>
<li>什么是URL？<ul>
<li>统一资源定位符（<a href="http://www.baidu.com)/">http://www.baidu.com）</a></li>
</ul>
</li>
<li>什么是请求，什么是响应？<ul>
<li>请求和响应实际上说的是数据的流向不同。</li>
<li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li>
<li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li>
<li>B –&gt; S （请求request）</li>
<li>S –&gt; B （响应response）</li>
</ul>
</li>
</ul>
<h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><ul>
<li><p>WEB服务器软件都有哪些呢？（这些软件都是提前开发好的。）</p>
<ul>
<li>Tomcat（WEB服务器）</li>
<li>jetty（WEB服务器）</li>
<li>JBOSS（应用服务器）</li>
<li>WebLogic（应用服务器）</li>
<li>WebSphere（应用服务器）</li>
</ul>
</li>
<li><p>应用服务器和WEB服务器的关系？</p>
<ul>
<li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li>
<li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li>
<li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li>
<li>用过JBOSS服务器的同学应该很清楚，JBOSS中内嵌了一个Tomcat服务器。</li>
</ul>
</li>
<li><p>Tomcat下载</p>
<ul>
<li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li>
<li>tomcat官网地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li>
<li>tomcat开源免费的轻量级WEB服务器。</li>
<li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li>
<li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li>
<li>tomcat是java语言写的。</li>
<li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li>
</ul>
</li>
<li><p>Tomcat服务器要想运行，需要先有jre，所以要先安装JDK，配置java运行环境。</p>
<ul>
<li>JAVA_HOME=C:\Program Files\Java\jdk-17.0.1</li>
<li>PATH=%JAVA_HOME%\bin</li>
<li>目前JAVA_HOME没有配置，思考一个问题，这样行不行呢？目前只运行java程序是没问题的。真的没问题吗？</li>
</ul>
</li>
<li><p>Tomcat服务器的安装：</p>
<ul>
<li>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。</li>
<li>我有一个好习惯，在C盘的根目录下新建一个dev目录，java开发所有相关的工具都安装到dev目录下，这样比较方便管理。（你随意）</li>
<li>启动Tomcat<ul>
<li>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。<ul>
<li>xxx.bat文件是个什么文件？bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</li>
<li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li>
<li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li>
<li>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</li>
<li>catalina.bat文件中有这样一行配置：MAINCLASS=org.apache.catalina.startup.Bootstrap （这个类就是main方法所在的类。）</li>
<li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</li>
</ul>
</li>
<li>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</li>
<li>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置：<ul>
<li>JAVA_HOME=JDK的根</li>
<li>CATALINA_HOME=Tomcat服务器的根</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>关于Tomcat服务器的目录</p>
<ul>
<li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li>
<li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li>
<li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li>
<li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li>
<li>temp：Tomcat服务器的临时目录。存储临时文件。</li>
<li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li>
<li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li>
</ul>
</li>
<li><p>配置Tomcat服务器需要哪些环境变量？</p>
<ul>
<li>JAVA_HOME=JDK的根</li>
<li>CATALINA_HOME=Tomcat服务器的根</li>
<li>PATH=%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li>
</ul>
</li>
<li><p>启动Tomcat： startup</p>
</li>
<li><p>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。）</p>
</li>
<li><p>怎么测试Tomcat服务器有没有启动成功呢？</p>
<ul>
<li>打开浏览器，在浏览器的地址栏上输入URL即可：<ul>
<li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li>
<li>ip地址是什么？端口号我知道，是8080</li>
<li>本机的IP地址是：127.0.0.1，或者是localhost，都行。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><ul>
<li><p>第一步：找到CATALINA_HOME\webapps目录</p>
<ul>
<li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li>
</ul>
</li>
<li><p>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa</p>
<ul>
<li>这个目录名oa就是你这个webapp的名字。</li>
</ul>
</li>
<li><p>第三步：在oa目录下新建资源文件，例如：index.html</p>
<ul>
<li>编写index.html文件的内容。</li>
</ul>
</li>
<li><p>第四步：启动Tomcat服务器</p>
</li>
<li><p>第五步：打开浏览器，在浏览器地址栏上输入这样的URL：</p>
</li>
<li><p><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></p>
</li>
<li><p>思考一个问题：</p>
<ul>
<li><p>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> <ul>
<li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li>
<li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。（动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的数据是动态的，根据数据库中数据的变化而变化。）</li>
</ul>
</li>
</ul>
<h2 id="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"><a href="#对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议" class="headerlink" title="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"></a>对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议</h2><img src="/2022/05/10/Javaweb/Servlet-Jsp/Servlet-jsp/BS%E7%BB%93%E6%9E%84%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%862.png" class="">

<ul>
<li>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）<ul>
<li>浏览器软件的开发团队（浏览器软件太多了：谷歌浏览器、火狐浏览器、IE浏览器….）</li>
<li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li>
<li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li>
<li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li>
</ul>
</li>
<li>角色和角色之间需要遵守哪些规范，哪些协议<ul>
<li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。<ul>
<li>Servlet规范的作用是什么？<ul>
<li>WEB Server   和   webapp解耦合。</li>
</ul>
</li>
</ul>
</li>
<li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li>
<li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li>
</ul>
</li>
</ul>
<img src="/2022/05/10/Javaweb/Servlet-Jsp/Servlet-jsp/BS%E7%BB%93%E6%9E%84%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%92%E8%89%B2%E5%92%8C%E5%8D%8F%E8%AE%AE.png" class="">

<ul>
<li>Servlet规范是一个什么规范？<ul>
<li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li>
<li>Servlet规范包括什么呢？<ul>
<li>规范了哪些接口</li>
<li>规范了哪些类</li>
<li>规范了一个web应用中应该有哪些配置文件</li>
<li>规范了一个web应用中配置文件的名字</li>
<li>规范了一个web应用中配置文件存放的路径</li>
<li>规范了一个web应用中配置文件的内容</li>
<li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li>
<li>…..</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="开发一个带有Servlet（Java小程序）的webapp（重点）"><a href="#开发一个带有Servlet（Java小程序）的webapp（重点）" class="headerlink" title="开发一个带有Servlet（Java小程序）的webapp（重点）"></a>开发一个带有Servlet（Java小程序）的webapp（重点）</h2><ul>
<li><p>开发步骤是怎样的？</p>
<ul>
<li><p>第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</p>
<ul>
<li>注意：crm就是这个webapp的根</li>
</ul>
</li>
<li><p>第二步：在webapp的根下新建一个目录：WEB-INF</p>
<ul>
<li>注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。</li>
</ul>
</li>
<li><p>第三步：在WEB-INF目录下新建一个目录：classes</p>
<ul>
<li>注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。</li>
</ul>
</li>
<li><p>第四步：在WEB-INF目录下新建一个目录：lib</p>
<ul>
<li>注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。</li>
</ul>
</li>
<li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p>
<ul>
<li><p>注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。</p>
</li>
<li><p>这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。</p>
<ul>
<li>这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）</li>
<li>Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）</li>
<li>Servlet接口是JavaEE的规范中的一员。</li>
<li>Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOME\lib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。</li>
</ul>
</li>
<li><p>重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet</p>
</li>
</ul>
</li>
<li><p>注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</p>
</li>
<li><p>第七步：编译我们编写的HelloServlet</p>
<ul>
<li><p>重点：你怎么能让你的HelloServlet编译通过呢？配置环境变量CLASSPATH</p>
<p>CLASSPATH=.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar</p>
</li>
<li><p>思考问题：以上配置的CLASSPATH和Tomcat服务器运行有没有关系？</p>
<ul>
<li>没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。</p>
</li>
<li><p>第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。</p>
<ul>
<li>这一步用专业术语描述：在web.xml文件中注册Servlet类。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--servlet描述信息--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这个位置必须是带有包名的全限定类名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--servlet映射信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这个也是随便的，不过这里写的内容要和上面的一样。--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这里需要一个路径--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--当前这个路径可以随便写--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fd/saf/d/sa/fd/sa/fd<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>第十步：启动Tomcat服务器</p>
<ul>
<li><p>第十一步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是：</p>
<ul>
<li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>   </li>
</ul>
</li>
<li><p>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</p>
</li>
<li><p>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：/crm</p>
</li>
<li><p>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>）</p>
</li>
<li><p>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。</p>
</li>
<li><p>总结一下：一个合法的webapp目录结构应该是怎样的？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webapproot</span><br><span class="line">     |------WEB-INF</span><br><span class="line">     		  |------classes(存放字节码)</span><br><span class="line">     		  |------lib(第三方jar包)</span><br><span class="line">     		  |------web.xml(注册Servlet)</span><br><span class="line">     |------html</span><br><span class="line">     |------css</span><br><span class="line">     |------javascript</span><br><span class="line">     |------image</span><br><span class="line"> ....</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。）</p>
<ul>
<li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>  </li>
<li>然后Tomcat服务器接收到请求，截取路径：/crm/fdsa/fd/saf/d/sa/fd/sa/fd  </li>
<li>Tomcat服务器找到crm项目</li>
<li>Tomcat服务器在web.xml文件中查找/fdsa/fd/saf/d/sa/fd/sa/fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li>
<li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li>
<li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h2><ul>
<li>JavaEE目前最高版本是 JavaEE8</li>
<li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li>
<li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li>
<li>以后没有JavaEE了。以后都叫做Jakarta EE。</li>
<li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li>
<li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li>
<li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li>
<li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li>
</ul>
<h2 id="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）</h2><p>将CATALINA_HOME/conf/logging.properties文件中的内容修改如下：</p>
<p>java.util.logging.ConsoleHandler.encoding = GBK</p>
<h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h2><ul>
<li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li>
<li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF/lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li>
</ul>
<h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul>
<li><p>集成开发工具很多，其中目前使用比较多的是：</p>
<ul>
<li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li>
<li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li>
</ul>
</li>
<li><p>使用IDEA集成开发工具开发Servlet</p>
<ul>
<li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li>
<li>第二步：新建模块（File –&gt; new –&gt; Module…）<ul>
<li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li>
<li>这个Module自动会被放在javaweb的project下面。</li>
<li>这个Module起名：servlet01</li>
</ul>
</li>
<li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul>
<li>在Module上点击右键：Add Framework Support…（添加框架支持）</li>
<li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li>
<li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li>
<li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li>
</ul>
</li>
<li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li>
<li>第五步：编写Servlet（StudentServlet）<ul>
<li>class StudentServlet implements Servlet</li>
<li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME/lib/servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul>
<li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li>
</ul>
</li>
<li>实现jakarta.servlet.Servlet接口中的5个方法。</li>
</ul>
</li>
<li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li>
<li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li>
<li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">bjpowernode</span>.<span class="title">javaweb</span>.<span class="title">servlet</span>.<span class="title">StudentServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">studentServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">servlet</span>/<span class="title">student</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p>
<ul>
<li><p>student.html</p>
</li>
<li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p>
</li>
<li><p>student.html文件的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>student page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/xmm/servlet/student&quot;</span>&gt;</span>student list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</p>
<ul>
<li>IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</li>
</ul>
</li>
<li><p>左上角加号，点击Tomcat Server –&gt; local</p>
<ul>
<li>在弹出的界面中设置服务器Server的参数（基本上不用动）</li>
<li>在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</li>
<li>修改 Application context为：/xmm</li>
</ul>
</li>
<li><p>第十一步：启动Tomcat服务器</p>
<ul>
<li>在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</li>
</ul>
</li>
<li><p>我们开发中建议适用debug模式启动Tomcat</p>
</li>
<li><p>第十二步：打开浏览器，在浏览器地址栏上输入：<a href="http://localhost:8080/xmm/student.html">http://localhost:8080/xmm/student.html</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="Servlet对象的生命周期"><a href="#Servlet对象的生命周期" class="headerlink" title="Servlet对象的生命周期"></a>Servlet对象的生命周期</h2><ul>
<li><p>什么是Servlet对象生命周期？</p>
<ul>
<li>Servlet对象什么时候被创建。</li>
<li>Servlet对象什么时候被销毁。</li>
<li>Servlet对象创建了几个？</li>
<li>Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</li>
</ul>
</li>
<li><p>Servlet对象是由谁来维护的？</p>
<ul>
<li>Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</li>
<li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li>
<li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li>
<li>WEB容器来管理Servlet对象的死活。</li>
</ul>
</li>
<li><p>思考：我们自己new的Servlet对象受WEB容器的管理吗？</p>
<ul>
<li>我们自己new的Servlet对象是不受WEB容器管理的。</li>
<li>WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）</li>
<li>web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</li>
<li><img src="/2022/05/10/Javaweb/Servlet-Jsp/Servlet-jsp/WEB%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84Map%E9%9B%86%E5%90%88.png" class=""></li>
</ul>
</li>
<li><p>研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？</p>
<ul>
<li>在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。</li>
<li>经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。</li>
<li>这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</li>
</ul>
</li>
<li><p>怎么让服务器启动的时候创建Servlet对象呢？</p>
<ul>
<li><p>在servlet标签中添加<load-on-startup>子标签，在该子标签中填写整数，越小的整数优先级越高。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Servlet对象生命周期</p>
<ul>
<li><p>默认情况下服务器启动的时候AServlet对象并没有被实例化</p>
</li>
<li><p>用户发送第一次请求的时候，控制台输出了以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AServlet无参数构造方法执行了</span><br><span class="line">AServlet&#x27;s init method execute!</span><br><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li>
<li><p>根据以上输出内容得出结论：</p>
<ul>
<li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）</li>
<li>AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li>
<li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li>
</ul>
</li>
<li><p>用户继续发送第二次请求，控制台输出了以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li>
<li><p>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：</p>
<ul>
<li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li>
<li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li>
<li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li>
</ul>
</li>
<li><p>关闭服务器的时候，控制台输出了以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AServlet&#x27;s destroy method execute!</span><br></pre></td></tr></table></figure></li>
<li><p>通过以上输出内容，可以得出以下结论：</p>
<ul>
<li>Servlet的destroy方法只被Tomcat服务器调用一次。</li>
<li>destroy方法是在什么时候被调用的？<ul>
<li>在服务器关闭的时候。</li>
<li>因为服务器关闭的时候要销毁AServlet对象的内存。</li>
<li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li>
</ul>
</li>
</ul>
</li>
<li><p>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？</p>
<ul>
<li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li>
</ul>
</li>
<li><p>Servlet对象更像一个人的一生：</p>
<ul>
<li>Servlet的无参数构造方法执行：标志着你出生了。</li>
<li>Servlet对象的init方法的执行：标志着你正在接受教育。</li>
<li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li>
<li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li>
</ul>
</li>
<li><p>关于Servlet类中方法的调用次数？</p>
<ul>
<li>构造方法只执行一次。</li>
<li>init方法只执行一次。</li>
<li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li>
<li>destroy方法只执行一次。</li>
</ul>
</li>
<li><p>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</p>
<ul>
<li>报错了：500错误。</li>
<li>注意：500是一个HTTP协议的错误状态码。</li>
<li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li>
<li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li>
<li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li>
</ul>
</li>
<li><p>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</p>
<ul>
<li>不能。</li>
<li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li>
</ul>
</li>
<li><p>init、service、destroy方法中使用最多的是哪个方法？</p>
<ul>
<li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li>
<li>什么时候使用init方法呢？<ul>
<li>init方法很少用。</li>
<li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li>
</ul>
</li>
<li>什么时候使用destroy方法呢？<ul>
<li>destroy方法也很少用。</li>
<li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><ul>
<li><p>我们编写一个Servlet类直接实现Servlet接口有什么缺点？</p>
<ul>
<li>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</li>
</ul>
</li>
<li><p>适配器设计模式Adapter</p>
<ul>
<li>手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</li>
</ul>
</li>
<li><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p>
<ul>
<li>GenericServlet实现Servlet接口。</li>
<li>GenericServlet是一个适配器。</li>
<li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li>
</ul>
</li>
<li><p>思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？</p>
<ul>
<li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p>
<ul>
<li>还会执行。会执行GenericServlet类中的init方法。</li>
</ul>
</li>
<li><p>思考第二个问题：init方法是谁调用的？</p>
<ul>
<li>Tomcat服务器调用的。</li>
</ul>
</li>
<li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p>
<ul>
<li>都是Tomcat干的。</li>
<li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li>
</ul>
</li>
<li><p>思考一下Tomcat服务器伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tomcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">        <span class="comment">// Tomcat服务器伪代码</span></span><br><span class="line">        <span class="comment">// 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;</span>);</span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Servlet servlet = (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ServletConfig对象</span></span><br><span class="line">        <span class="comment">// Tomcat服务器负责将ServletConfig对象实例化出来。</span></span><br><span class="line">        <span class="comment">// 多态（Tomcat服务器完全实现了Servlet规范）</span></span><br><span class="line">        ServletConfig servletConfig = <span class="keyword">new</span> org.apache.catalina.core.StandardWrapperFacade();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的init方法</span></span><br><span class="line">        servlet.init(servletConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的service方法</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><ul>
<li><p>什么是ServletConfig？</p>
<ul>
<li>Servlet对象的配置信息对象。</li>
<li>ServletConfig对象中封装了<servlet></servlet>标签中的配置信息。（web.xml文件中servlet的配置信息）</li>
</ul>
</li>
<li><p>一个Servlet对应一个ServletConfig对象。</p>
</li>
<li><p>Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。</p>
</li>
<li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p>
</li>
<li><p>ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。）</p>
</li>
<li><p>ServletConfig接口有哪些常用的方法？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span></span>; <span class="comment">// 获取Servlet的name</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</li>
</ul>
</li>
</ul>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul>
<li><p>一个Servlet对象对应一个ServletConfig。100个Servlet对象则对应100个ServletConfig对象。</p>
</li>
<li><p>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p>
</li>
<li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。</p>
</li>
<li><p>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。</p>
</li>
<li><p>ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。）</p>
</li>
<li><p>一个ServletContext对象通常对应的是一个web.xml文件。</p>
</li>
<li><p>ServletContext对应显示生活中的什么例子呢？</p>
<ul>
<li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li>
</ul>
</li>
<li><p>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</p>
<ul>
<li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li>
</ul>
</li>
<li><p>ServletContext接口中有哪些常用的方法？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span></span><br><span class="line"><span class="comment">// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContextPath</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//String contextPath = application.getContextPath();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件的绝对路径（真实路径）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRealPath</span><span class="params">(String path)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span></span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span></span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么是所有用户共享的数据？ 不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么数据量要小？ 因为数据量比较大的话，太占用堆内存，并且这个对象的生命周期比较长，服务器关闭的时候，这个对象才会被销毁。大数据量会影响服务器的性能。占用内存较小的数据量可以考虑放进去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么这些共享数据很少的修改，或者说几乎不修改？</span></span><br><span class="line"><span class="comment">// 所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据量小、所有用户共享、又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存（怎么向ServletContext应用域中存数据）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span></span>; <span class="comment">// map.put(k, v)</span></span><br><span class="line"><span class="comment">// 取（怎么从ServletContext应用域中取数据）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// Object v = map.get(k)</span></span><br><span class="line"><span class="comment">// 删（怎么删除ServletContext应用域中的数据）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// map.remove(k)</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B/S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jakarta.servlet.Servlet（接口）【爷爷】</span><br><span class="line">jakarta.servlet.GenericServlet implements Servlet（抽象类）【儿子】</span><br><span class="line">jakarta.servlet.http.HttpServlet extends GenericServlet（抽象类）【孙子】</span><br><span class="line"></span><br><span class="line">我们以后编写的Servlet要继承HttpServlet类。</span><br></pre></td></tr></table></figure></li>
<li><p>大家到目前为止都接触过哪些缓存机制了？</p>
<ul>
<li>堆内存当中的字符串常量池。<ul>
<li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li>
</ul>
</li>
<li>堆内存当中的整数型常量池。<ul>
<li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li>
</ul>
</li>
<li>连接池(Connection Cache)<ul>
<li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li>
<li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li>
<li>连接池<ul>
<li>最小连接数</li>
<li>最大连接数</li>
<li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li>
</ul>
</li>
</ul>
</li>
<li>线程池<ul>
<li>Tomcat服务器本身就是支持多线程的。</li>
<li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？<ul>
<li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li>
<li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li>
</ul>
</li>
</ul>
</li>
<li>redis<ul>
<li>NoSQL数据库。非关系型数据库。缓存数据库。</li>
</ul>
</li>
<li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</li>
</ul>
</li>
</ul>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul>
<li><p>什么是协议？</p>
<ul>
<li>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</li>
<li>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</li>
<li>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</li>
</ul>
</li>
<li><p>什么是HTTP协议？</p>
<ul>
<li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li>
<li>W3C：<ul>
<li>万维网联盟组织</li>
<li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li>
<li>万维网之父：蒂姆·伯纳斯·李</li>
</ul>
</li>
<li>什么是超文本？<ul>
<li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li>
<li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li>
</ul>
</li>
<li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li>
<li>什么是解耦合？<ul>
<li>B不依赖S。</li>
<li>S也不依赖B。</li>
</ul>
</li>
<li>B/S表示：B/S结构的系统（浏览器访问WEB服务器的系统）</li>
<li>浏览器   向   WEB服务器发送数据，叫做：请求（request)</li>
<li>WEB服务器   向   浏览器发送数据，叫做：响应（response）</li>
<li>HTTP协议包括：<ul>
<li>请求协议<ul>
<li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li>
</ul>
</li>
<li>响应协议<ul>
<li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li>
</ul>
</li>
</ul>
</li>
<li>HTTP协议就是提前制定好的一种消息模板。<ul>
<li>不管你是哪个品牌的浏览器，都是这么发。</li>
<li>不管你是哪个品牌的WEB服务器，都是这么发。</li>
<li>FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li>
<li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li>
</ul>
</li>
</ul>
</li>
<li><p>HTTP的请求协议（B –&gt; S）</p>
<ul>
<li><p>HTTP的请求协议包括：4部分</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>空白行</li>
<li>请求体</li>
</ul>
</li>
<li><p>HTTP请求协议的具体报文：GET请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /servlet05/getServlet?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="line">Host: localhost:8080                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9                                                       </span><br><span class="line">																					    空白行	</span><br><span class="line">																					    请求体</span><br></pre></td></tr></table></figure></li>
<li><p>HTTP请求协议的具体报文：POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /servlet05/postServlet HTTP/1.1                                                  请求行</span><br><span class="line">Host: localhost:8080                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 25</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure></li>
<li><p>请求行</p>
<ul>
<li>包括三部分：<ul>
<li>第一部分：请求方式（7种）<ul>
<li>get（常用的）</li>
<li>post（常用的）</li>
<li>delete</li>
<li>put</li>
<li>head</li>
<li>options</li>
<li>trace</li>
</ul>
</li>
<li>第二部分：URI<ul>
<li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li>
<li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li>
<li>URI和URL什么关系，有什么区别？<ul>
<li>URL包括URI</li>
<li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li>
<li>/servlet05/index.html 这是URI。</li>
</ul>
</li>
</ul>
</li>
<li>第三部分：HTTP协议版本号</li>
</ul>
</li>
</ul>
</li>
<li><p>请求头</p>
<ul>
<li>请求的主机</li>
<li>主机的端口</li>
<li>浏览器信息</li>
<li>平台信息</li>
<li>cookie等信息</li>
<li>….</li>
</ul>
</li>
<li><p>空白行</p>
<ul>
<li>空白行是用来区分“请求头”和“请求体”</li>
</ul>
</li>
<li><p>请求体</p>
<ul>
<li>向服务器发送的具体数据。</li>
</ul>
</li>
</ul>
</li>
<li><p>HTTP的响应协议（S –&gt; B）</p>
<ul>
<li><p>HTTP的响应协议包括：4部分</p>
<ul>
<li>状态行</li>
<li>响应头</li>
<li>空白行</li>
<li>响应体</li>
</ul>
</li>
<li><p>HTTP响应协议的具体报文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 ok                                     状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8               响应头</span><br><span class="line">Content-Length: 160</span><br><span class="line">Date: Mon, 08 Nov 2021 13:19:32 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">                                                    空白行</span><br><span class="line">&lt;!doctype html&gt;                                     响应体</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;from get servlet&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;from get servlet&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>状态行</p>
<ul>
<li>三部分组成<ul>
<li>第一部分：协议版本号（HTTP/1.1）</li>
<li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）<ul>
<li>200 表示请求响应成功，正常结束。</li>
<li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li>
<li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生：<ul>
<li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li>
<li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li>
</ul>
</li>
<li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li>
<li>以4开始的，一般是浏览器端的错误导致的。</li>
<li>以5开始的，一般是服务器端的错误导致的。</li>
</ul>
</li>
<li>第三部分：状态的描述信息<ul>
<li>ok 表示正常成功结束。</li>
<li>not found 表示资源找不到。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>响应头：</p>
<ul>
<li>响应的内容类型</li>
<li>响应的内容长度</li>
<li>响应的时间</li>
<li>….</li>
</ul>
</li>
<li><p>空白行：</p>
<ul>
<li>用来分隔“响应头”和“响应体”的。</li>
</ul>
</li>
<li><p>响应体：</p>
<ul>
<li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li>
</ul>
</li>
</ul>
</li>
<li><p>怎么查看的协议内容？</p>
<ul>
<li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li>
</ul>
</li>
<li><p>怎么向服务器发送GET请求，怎么向服务器发送POST请求？</p>
<ul>
<li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method=”post”。</li>
<li>其他所有情况一律都是get请求：<ul>
<li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li>
<li>在浏览器上直接点击超链接，属于get请求。</li>
<li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li>
<li>或者使用form的时候，form标签中method属性值为：method=”get”</li>
<li>….</li>
</ul>
</li>
</ul>
</li>
<li><p>GET请求和POST请求有什么区别？</p>
<ul>
<li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）<ul>
<li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</a></li>
</ul>
</li>
<li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li>
<li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li>
<li>get请求无法发送大数据量。</li>
<li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li>
<li>post请求可以发送大数据量，理论上没有长度限制。</li>
<li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li>
<li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li>
<li>get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li>
<li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li>
<li>get请求支持缓存。<ul>
<li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li>
<li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：<ul>
<li>一个get请求的路径a  对应  一个资源。</li>
<li>一个get请求的路径b  对应  一个资源。</li>
<li>一个get请求的路径c  对应  一个资源。</li>
<li>……</li>
</ul>
</li>
<li>实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li>
<li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。<ul>
<li>只要每一次get请求的请求路径不同即可。</li>
<li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li>
<li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li>
<li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=%E7%B3%BB%E7%BB%9F%E6%AF%AB%E7%A7%92%E6%95%B0">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li>
<li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li>
</ul>
</li>
</ul>
</li>
<li>post请求不支持缓存。（POST是用来修改服务器端的资源的。）<ul>
<li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li>
</ul>
</li>
</ul>
</li>
<li><p>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</p>
<ul>
<li>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li>
<li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存/修改等。</li>
<li>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li>
<li>做文件上传，一定是post请求。要传的数据不是普通文本。</li>
<li>其他情况都可以使用get请求。</li>
</ul>
</li>
<li><p>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</p>
<ul>
<li>name=value&amp;name=value&amp;name=value&amp;name=value</li>
<li>name是什么？<ul>
<li>以form表单为例：form表单中input标签的name。</li>
</ul>
</li>
<li>value是什么？<ul>
<li>以form表单为例：form表单中input标签的value。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><ul>
<li>什么是设计模式？<ul>
<li>某个问题的固定的解决方案。(可以被重复使用。)</li>
</ul>
</li>
<li>你知道哪些设计模式？<ul>
<li>GoF设计模式：<ul>
<li>通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</li>
<li>单例模式</li>
<li>工厂模式</li>
<li>代理模式</li>
<li>门面模式</li>
<li>责任链设计模式</li>
<li>观察者模式</li>
<li>模板方法设计模式</li>
<li>…..</li>
</ul>
</li>
<li>JavaEE设计模式：<ul>
<li>DAO</li>
<li>DTO</li>
<li>VO</li>
<li>PO</li>
<li>pojo</li>
<li>….</li>
</ul>
</li>
<li>….</li>
</ul>
</li>
<li>什么是模板方法设计模式？<ul>
<li>在模板类的模板方法当中定义核心算法骨架，具体的实现步骤可以延迟到子类当中完成。</li>
</ul>
</li>
<li>模板类通常是一个抽象类，模板类当中的模板方法定义核心算法，这个方法通常是final的（但也可以不是final的）</li>
<li>模板类当中的抽象方法就是不确定实现的方法，这个不确定怎么实现的事儿交给子类去做。</li>
</ul>
<h2 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h2><ul>
<li>HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</li>
<li>HttpServlet在哪个包下？<ul>
<li>jakarta.servlet.http.HttpServlet</li>
</ul>
</li>
<li>到目前为止我们接触了servlet规范中哪些接口？<ul>
<li>jakarta.servlet.Servlet  核心接口（接口）</li>
<li>jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</li>
<li>jakarta.servlet.ServletContext Servlet上下文接口（接口）</li>
<li>jakarta.servlet.ServletRequest Servlet请求接口（接口）</li>
<li>jakarta.servlet.ServletResponse Servlet响应接口（接口）</li>
<li>jakarta.servlet.ServletException Servlet异常（类）</li>
<li>jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</li>
</ul>
</li>
<li>http包下都有哪些类和接口呢？jakarta.servlet.http.*;<ul>
<li>jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</li>
<li>jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</li>
<li>jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</li>
</ul>
</li>
<li>HttpServletRequest对象中封装了什么信息？<ul>
<li>HttpServletRequest，简称request对象。</li>
<li>HttpServletRequest中封装了请求协议的全部内容。</li>
<li>Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</li>
<li>也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</li>
</ul>
</li>
<li>HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</li>
<li>回忆Servlet生命周期？<ul>
<li>用户第一次请求<ul>
<li>Tomcat服务器通过反射机制，调用无参数构造方法。创建Servlet对象。(web.xml文件中配置的Servlet类对应的对象。)</li>
<li>Tomcat服务器调用Servlet对象的init方法完成初始化。</li>
<li>Tomcat服务器调用Servlet对象的service方法处理请求。</li>
</ul>
</li>
<li>用户第二次请求<ul>
<li>Tomcat服务器调用Servlet对象的service方法处理请求。</li>
</ul>
</li>
<li>用户第三次请求<ul>
<li>Tomcat服务器调用Servlet对象的service方法处理请求。</li>
</ul>
</li>
<li>….<ul>
<li>Tomcat服务器调用Servlet对象的service方法处理请求。</li>
</ul>
</li>
<li>服务器关闭<ul>
<li>Tomcat服务器调用Servlet对象的destroy方法，做销毁之前的准备工作。</li>
<li>Tomcat服务器销毁Servlet对象。</li>
</ul>
</li>
</ul>
</li>
<li>HttpServlet源码分析：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//override 重写 doGet方法</span></span><br><span class="line">    <span class="comment">//override 重写 doPost方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">           </span><br><span class="line">	<span class="comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HttpServlet模板类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用户发送第一次请求的时候这个service会执行</span></span><br><span class="line">    <span class="comment">// 用户发送第N次请求的时候，这个service方法还是会执行。</span></span><br><span class="line">    <span class="comment">// 用户只要发送一次请求，这个service方法就会执行一次。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用重载的service方法。</span></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个service方法的两个参数都是带有Http的。</span></span><br><span class="line">    <span class="comment">// 这个service是一个模板方法。</span></span><br><span class="line">    <span class="comment">// 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        <span class="comment">// 这个请求方式最终可能是：&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span></span><br><span class="line">        <span class="comment">// GET POST PUT DELETE HEAD OPTIONS TRACE</span></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求方式是GET请求，则执行doGet方法。</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            <span class="comment">// 如果请求方式是POST请求，则执行doPost方法。</span></span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过以上源代码分析：</span></span><br><span class="line"><span class="comment">	假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span></span><br><span class="line"><span class="comment">	假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span></span><br><span class="line"><span class="comment">	会发生什么呢？</span></span><br><span class="line"><span class="comment">		发生405这样的一个错误。</span></span><br><span class="line"><span class="comment">		405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">怎么避免405的错误呢？</span></span><br><span class="line"><span class="comment">	后端重写了doGet方法，前端一定要发get请求。</span></span><br><span class="line"><span class="comment">	后端重写了doPost方法，前端一定要发post请求。</span></span><br><span class="line"><span class="comment">	这样可以避免405错误。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span></span><br><span class="line"><span class="comment">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span></span><br><span class="line"><span class="comment">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span></span><br><span class="line"><span class="comment">少写一点。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？</p>
<ul>
<li>可以，只不过你享受不到405错误。享受不到HTTP协议专属的东西。</li>
</ul>
</li>
<li><p>到今天我们终于得到了最终的一个Servlet类的开发步骤：</p>
<ul>
<li>第一步：编写一个Servlet类，直接继承HttpServlet</li>
<li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li>
<li>第三步：将Servlet类配置到web.xml文件当中。</li>
<li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li>
</ul>
</li>
</ul>
<h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><ul>
<li><p>什么是一个web站点的欢迎页面？</p>
<ul>
<li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li>
<li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li>
<li>我们一般的访问方式是：<ul>
<li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li>
</ul>
</li>
<li>如果我们访问的方式是：<ul>
<li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li>
<li>默认会访问你设置的欢迎页面。</li>
</ul>
</li>
</ul>
</li>
<li><p>怎么设置欢迎页面呢？</p>
<ul>
<li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p>
</li>
<li><p>第二步：在web.xml文件中进行了以下的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。</li>
</ul>
</li>
<li><p>第三步：启动服务器，浏览器地址栏输入地址</p>
<ul>
<li><a href="http://localhost:8080/servlet07">http://localhost:8080/servlet07</a></li>
</ul>
</li>
</ul>
</li>
<li><p>如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？</p>
<ul>
<li><p>在webapp根下新建page1</p>
</li>
<li><p>在page1下新建page2目录</p>
</li>
<li><p>在page2目录下新建page.html页面</p>
</li>
<li><p>在web.xml文件中应该这样配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>page1/page2/page.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：路径不需要以“/”开始，并且路径默认从webapp的根下开始找。</li>
</ul>
</li>
</ul>
</li>
<li><p>一个webapp是可以设置多个欢迎页面的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>page1/page2/page.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：越靠上的优先级越高。找不到的继续向下找。</li>
</ul>
</li>
<li><p>你有没有注意一件事：当我的文件名设置为index.html的时候，不需要在web.xml文件中进行配置欢迎页面。这是为什么？</p>
<ul>
<li><p>这是因为小猫咪Tomcat服务器已经提前配置好了。</p>
</li>
<li><p>实际上配置欢迎页面有两个地方可以配置：</p>
<ul>
<li><p>一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）</p>
</li>
<li><p>一个是在CATALINA_HOME/conf/web.xml文件中进行配置。（在这个地方配置的属于全局配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Tomcat服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，Tomcat服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</li>
</ul>
</li>
<li><p>注意原则：局部优先原则。（就近原则）</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>欢迎页可以是一个Servlet吗？</p>
<ul>
<li><p>当然可以。</p>
</li>
<li><p>你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</p>
</li>
<li><p>静态资源：index.html welcome.html …..</p>
</li>
<li><p>动态资源：Servlet类。</p>
</li>
<li><p>步骤：</p>
<ul>
<li><p>第一步：写一个Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;h1&gt;welcome to bjpowernode!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二步：在web.xml文件中配置servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第三步：在web.xml文件中配置欢迎页</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="关于WEB-INF目录"><a href="#关于WEB-INF目录" class="headerlink" title="关于WEB-INF目录"></a>关于WEB-INF目录</h2><ul>
<li>在WEB-INF目录下新建了一个文件：welcome.html</li>
<li>打开浏览器访问：<a href="http://localhost:8080/servlet07/WEB-INF/welcome.html">http://localhost:8080/servlet07/WEB-INF/welcome.html</a> 出现了404错误。</li>
<li>注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</li>
</ul>
<h2 id="HttpServletRequest接口详解"><a href="#HttpServletRequest接口详解" class="headerlink" title="HttpServletRequest接口详解"></a>HttpServletRequest接口详解</h2><ul>
<li><p>HttpServletRequest是一个接口，全限定名称：jakarta.servlet.http.HttpServletRequest</p>
</li>
<li><p>HttpServletRequest接口是Servlet规范中的一员。</p>
</li>
<li><p>HttpServletRequest接口的父接口：ServletRequest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpServletRequest</span> <span class="keyword">extends</span> <span class="title">ServletRequest</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</p>
<ul>
<li><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFacade</span> <span class="keyword">implements</span> <span class="title">HttpServletRequest</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！</p>
</li>
</ul>
</li>
<li><p>HttpServletRequest对象中都有什么信息？都包装了什么信息？</p>
<ul>
<li>HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了HTTP的请求协议。</li>
<li>实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</li>
<li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</li>
</ul>
</li>
<li><p>request和response对象的生命周期？</p>
<ul>
<li>request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</li>
<li>一次请求对应一个request。</li>
<li>两次请求则对应两个request。</li>
<li>…..</li>
</ul>
</li>
<li><p>HttpServletRequest接口中有哪些常用的方法？</p>
<ul>
<li><p>怎么获取前端浏览器用户提交的数据？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap() 这个是获取<span class="function">Map</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> 这个是获取Map集合中所有的key</span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span> 根据key获取Map集合的value</span></span><br><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span>  获取value这个一维数组当中的第一个元素。这个方法最常用。</span></span><br><span class="line"><span class="function"><span class="comment">// 以上的4个方法，和获取用户提交的数据有关系。</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>思考：如果是你，前端的form表单提交了数据之后，你准备怎么存储这些数据，你准备采用什么样的数据结构去存储这些数据呢？</p>
<ul>
<li><p>前端提交的数据格式：username=abc&amp;userpwd=111&amp;aihao=s&amp;aihao=d&amp;aihao=tt</p>
</li>
<li><p>我会采用Map集合来存储：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt;</span><br><span class="line">    key存储String</span><br><span class="line">    value存储String</span><br><span class="line">    这种想法对吗？不对。</span><br><span class="line">    如果采用以上的数据结构存储会发现key重复的时候value覆盖。</span><br><span class="line">    key         value</span><br><span class="line">    ---------------------</span><br><span class="line">    username    abc</span><br><span class="line">    userpwd     <span class="number">111</span></span><br><span class="line">    aihao       s</span><br><span class="line">    aihao       d</span><br><span class="line">    aihao       tt</span><br><span class="line">    这样是不行的，因为map的key不能重复。</span><br><span class="line">Map&lt;String, String[]&gt;</span><br><span class="line">    key存储String</span><br><span class="line">    value存储String[]</span><br><span class="line">    key				value</span><br><span class="line">    -------------------------------</span><br><span class="line">    username		&#123;<span class="string">&quot;abc&quot;</span>&#125;</span><br><span class="line">    userpwd			&#123;<span class="string">&quot;111&quot;</span>&#125;</span><br><span class="line">    aihao			&#123;<span class="string">&quot;s&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;tt&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意：前端表单提交数据的时候，假设提交了120这样的“数字”，其实是以字符串”120”的方式提交的，所以服务器端获取到的一定是一个字符串的”120”，而不是一个数字。（前端永远提交的是字符串，后端获取的也永远是字符串。）</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>手工开发一个webapp。测试HttpServletRequest接口中的相关方法。</p>
<ul>
<li><p>先测试了4个常用的方法，获取请求参数的四个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">String[] values = request.getParameterValues(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String value = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>request对象实际上又称为“请求域”对象。</p>
<ul>
<li><p>应用域对象是什么？</p>
<ul>
<li><p>ServletContext （Servlet上下文对象。）</p>
</li>
<li><p>什么情况下会考虑向ServletContext这个应用域当中绑定数据呢？</p>
<ul>
<li>第一：所有用户共享的数据。</li>
<li>第二：这个共享的数据量很小。</li>
<li>第三：这个共享的数据很少的修改操作。</li>
<li>在以上三个条件都满足的情况下，使用这个应用域对象，可以大大提高我们程序执行效率。</li>
<li>实际上向应用域当中绑定数据，就相当于把数据放到了缓存（Cache）当中，然后用户访问的时候直接从缓存中取，减少IO的操作，大大提升系统的性能，所以缓存技术是提高系统性能的重要手段。</li>
</ul>
</li>
<li><p>你见过哪些缓存技术呢？</p>
<ul>
<li>字符串常量池</li>
<li>整数型常量池 [-128~127]，但凡是在这个范围当中的Integer对象不再创建新对象，直接从这个整数型常量池中获取。大大提升系统性能。</li>
<li>数据库连接池（提前创建好N个连接对象，将连接对象放到集合当中，使用连接对象的时候，直接从缓存中拿。省去了连接对象的创建过程。效率提升。）</li>
<li>线程池（Tomcat服务器就是支持多线程的。所谓的线程池就是提前先创建好N个线程对象，将线程对象存储到集合中，然后用户请求过来之后，直接从线程池中获取线程对象，直接拿来用。提升系统性能）</li>
<li>后期你还会学习更多的缓存技术，例如：redis、mongoDB…..</li>
</ul>
</li>
<li><p>ServletContext当中有三个操作域的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object obj)</span></span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上的操作类似于Map集合的操作。</span></span><br><span class="line">Map&lt;String, Object&gt; map;</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, obj); <span class="comment">// 向map集合中放key和value</span></span><br><span class="line">Object obj = map.get(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过map集合的key获取value</span></span><br><span class="line">map.remove(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过Map集合的key删除key和value这个键值对。</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>“请求域”对象</p>
<ul>
<li><p>“请求域”对象要比“应用域”对象范围小很多。生命周期短很多。请求域只在一次请求内有效。</p>
</li>
<li><p>一个请求对象request对应一个请求域对象。一次请求结束之后，这个请求域就销毁了。</p>
</li>
<li><p>请求域对象也有这三个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object obj)</span></span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br></pre></td></tr></table></figure></li>
<li><p>请求域和应用域的选用原则？</p>
<ul>
<li>尽量使用小的域对象，因为小的域对象占用的资源较少。</li>
</ul>
</li>
</ul>
</li>
<li><p>跳转</p>
<ul>
<li><p>转发（一次请求）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line">RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line"><span class="comment">// 第二步：调用转发器的forward方法完成跳转/转发</span></span><br><span class="line">dispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步和第二步代码可以联合在一起。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>两个Servlet怎么共享数据？</p>
<ul>
<li>将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。</li>
<li>可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。</li>
</ul>
</li>
<li><p>转发的下一个资源必须是一个Servlet吗？</p>
<ul>
<li>不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html….</li>
<li>注意：转发的时候，路径的写法要注意，转发的路径以“/”开始，不加项目名。</li>
</ul>
</li>
<li><p>关于request对象中两个非常容易混淆的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span></span><br><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span></span><br><span class="line">Object obj = request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个方法的区别是什么？</span></span><br><span class="line"><span class="comment">// 第一个方法：获取的是用户在浏览器上提交的数据。</span></span><br><span class="line"><span class="comment">// 第二个方法：获取的是请求域当中绑定的数据。</span></span><br></pre></td></tr></table></figure></li>
<li><p>HttpServletRequest接口的其他常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取客户端的IP地址</span></span><br><span class="line">String remoteAddr = request.getRemoteAddr();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求在请求行上提交数据。</span></span><br><span class="line"><span class="comment">// post请求在请求体中提交数据。</span></span><br><span class="line"><span class="comment">// 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）</span></span><br><span class="line"><span class="comment">// Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。</span></span><br><span class="line"><span class="comment">// Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意一个细节</span></span><br><span class="line"><span class="comment">// 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求乱码问题怎么解决？</span></span><br><span class="line"><span class="comment">// get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。</span></span><br><span class="line"><span class="comment">// get请求乱码怎么解决</span></span><br><span class="line"><span class="comment">// 方案：修改CATALINA_HOME/conf/server.xml配置文件</span></span><br><span class="line">&lt;Connector URIEncoding=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取应用的根路径</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求的URI</span></span><br><span class="line">String uri = request.getRequestURI();  <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servlet path</span></span><br><span class="line">String servletPath = request.getServletPath(); <span class="comment">//   /testRequest</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="使用纯Servlet做一个单表的CRUD操作"><a href="#使用纯Servlet做一个单表的CRUD操作" class="headerlink" title="使用纯Servlet做一个单表的CRUD操作"></a>使用纯Servlet做一个单表的CRUD操作</h2><ul>
<li><p>使用纯粹的Servlet完成单表【对部门的】的增删改查操作。（B/S结构的。）</p>
</li>
<li><p>实现步骤</p>
<ul>
<li><p>第一步：准备一张数据库表。（sql脚本）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 部门表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dept;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">	deptno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">10</span>, <span class="string">&#x27;XiaoShouBu&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">20</span>, <span class="string">&#x27;YanFaBu&#x27;</span>, <span class="string">&#x27;SHANGHAI&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">30</span>, <span class="string">&#x27;JiShuBu&#x27;</span>, <span class="string">&#x27;GUANGZHOU&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">40</span>, <span class="string">&#x27;MeiTiBu&#x27;</span>, <span class="string">&#x27;SHENZHEN&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure></li>
<li><p>第二步：准备一套HTML页面（项目原型）【前端开发工具使用HBuilder】</p>
<ul>
<li>把HTML页面准备好</li>
<li>然后将HTML页面中的链接都能够跑通。（页面流转没问题。）</li>
<li>应该设计哪些页面呢？<ul>
<li>欢迎页面：index.html</li>
<li>列表页面：list.html（以列表页面为核心，展开其他操作。）</li>
<li>新增页面：add.html</li>
<li>修改页面：edit.html</li>
<li>详情页面：detail.html</li>
</ul>
</li>
</ul>
</li>
<li><p>第三步：分析我们这个系统包括哪些功能？</p>
<ul>
<li>什么叫做一个功能呢？<ul>
<li>只要 这个操作连接了数据库，就表示一个独立的功能。</li>
</ul>
</li>
<li>包括哪些功能？<ul>
<li>查看部门列表</li>
<li>新增部门</li>
<li>删除部门</li>
<li>查看部门详细信息</li>
<li>跳转到修改页面</li>
<li>修改部门</li>
</ul>
</li>
</ul>
</li>
<li><p>第四步：在IDEA当中搭建开发环境</p>
<ul>
<li>创建一个webapp（给这个webapp添加servlet-api.jar和jsp-api.jar到classpath当中。）</li>
<li>向webapp中添加连接数据库的jar包（mysql驱动）<ul>
<li>必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个lib目录下。这个目录名必须叫做lib，全部小写的。</li>
</ul>
</li>
<li>JDBC的工具类</li>
<li>将所有HTML页面拷贝到web目录下。</li>
</ul>
</li>
<li><p>第五步：实现第一个功能：查看部门列表</p>
<ul>
<li><p>我们应该怎么去实现一个功能呢？</p>
<ul>
<li>建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。</li>
<li>从哪里开始？<ul>
<li>假设从前端开始，那么一定是从用户点击按钮那里开始的。</li>
</ul>
</li>
</ul>
</li>
<li><p>第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/dept/list&quot;</span>&gt;</span>查看部门列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二：编写web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第三：编写DeptListServlet类继承HttpServlet类。然后重写doGet方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第四：在DeptListServlet类的doGet方法中连接数据库，查询所有的部门，动态的展示部门列表页面.</p>
<ul>
<li><p>分析list.html页面中哪部分是固定死的，哪部分是需要动态展示的。</p>
</li>
<li><p>list.html页面中的内容所有的双引号要替换成单引号，因为out.print(“”)这里有一个双引号，容易冲突。</p>
</li>
<li><p>现在写完这个功能之后，你会有一种感觉，感觉开发很繁琐，只使用servlet写代码太繁琐了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    String deptno = rs.getString(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">    String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    out.print(<span class="string">&quot;			&lt;tr&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+(++i)+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+deptno+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+dname+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;					&lt;a href=&#x27;&#x27;&gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;					&lt;a href=&#x27;edit.html&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;					&lt;a href=&#x27;detail.html&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;				&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;			&lt;/tr&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>第六步：查看部门详情。</p>
<ul>
<li><p>建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？</p>
<ul>
<li><p>一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;写一个路径&#x27;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>详情  是需要连接数据库的，所以这个超链接点击之后也是需要执行一段java代码的。所以要将这个超链接的路径修改一下。</p>
</li>
<li><p>注意：修改路径之后，这个路径是需要加项目名的。”/oa/dept/detail”</p>
</li>
</ul>
</li>
<li><p>技巧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.print(<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/detail?deptno=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重点：向服务器提交数据的格式：uri?name=value&amp;name=value&amp;name=value&amp;name=value</p>
</li>
<li><p>这里的问号，必须是英文的问号。不能中文的问号。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>解决404的问题。写web.xml文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDetailServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/detail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个类：DeptDetailServlet继承HttpServlet，重写doGet方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptDetailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//中文思路（思路来源于：你要做什么？目标：查看部门详细信息。）</span></span><br><span class="line">        <span class="comment">// 第一步：获取部门编号</span></span><br><span class="line">        <span class="comment">// 第二步：根据部门编号查询数据库，获取该部门编号对应的部门信息。</span></span><br><span class="line">        <span class="comment">// 第三步：将部门信息响应到浏览器上。（显示一个详情。）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在doGet方法当中：连接数据库，根据部门编号查询该部门的信息。动态展示部门详情页。</p>
</li>
</ul>
</li>
<li><p>第七步：删除部门</p>
<ul>
<li><p>怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del(30)&quot;</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">dno</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;亲，删了不可恢复哦！&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.location.href = <span class="string">&quot;/oa/dept/delete?deptno=&quot;</span> + dno;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>以上的前端程序要写到后端的java代码当中：</p>
<ul>
<li>DeptListServlet类的doGet方法当中，使用out.print()方法，将以上的前端代码输出到浏览器上。</li>
</ul>
</li>
<li><p>解决404的问题：</p>
<ul>
<li><p><a href="http://localhost:8080/oa/dept/delete?deptno=30">http://localhost:8080/oa/dept/delete?deptno=30</a> </p>
</li>
<li><p>web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDelServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/delete<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写DeptDelServlet继承HttpServlet，重写doGet方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptDelServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据部门编号，删除部门。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>删除成功或者失败的时候的一个处理（这里我们选择了转发，并没有使用重定向机制。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断删除成功了还是失败了。</span></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//删除成功</span></span><br><span class="line">    <span class="comment">//仍然跳转到部门列表页面</span></span><br><span class="line">    <span class="comment">//部门列表页面的显示需要执行另一个Servlet。怎么办？转发。</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 删除失败</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/error.html&quot;</span>).forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>第八步：新增部门</p>
<ul>
<li>注意：最后保存成功之后，转发到 /dept/list 的时候，会出现405，为什么？<ul>
<li>第一：保存用的是post请求。底层要执行doPost方法。</li>
<li>第二：转发是一次请求，之前是post，之后还是post，因为它是一次请求。</li>
<li>第三：/dept/list Servlet当中只有一个doGet方法。</li>
<li>怎么解决？两种方案<ul>
<li>第一种：在/dept/list Servlet中添加doPost方法，然后在doPost方法中调用doGet。</li>
<li>第二种：重定向。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>第九步：跳转到修改部门的页面</p>
</li>
<li><p>第十步：修改部门</p>
</li>
</ul>
</li>
</ul>
<h2 id="在一个web应用中应该如何完成资源的跳转"><a href="#在一个web应用中应该如何完成资源的跳转" class="headerlink" title="在一个web应用中应该如何完成资源的跳转"></a>在一个web应用中应该如何完成资源的跳转</h2><ul>
<li><p>在一个web应用中通过两种方式，可以完成资源的跳转：</p>
<ul>
<li>第一种方式：转发</li>
<li>第二种方式：重定向</li>
</ul>
</li>
<li><p>转发和重定向有什么区别？</p>
<ul>
<li><p>代码上有什么区别？</p>
<ul>
<li><p>转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求转发器对象</span></span><br><span class="line">RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"><span class="comment">// 调用请求转发器对象的forward方法完成转发</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并一行代码</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line"><span class="comment">// 转发的时候是一次请求，不管你转发了多少次。都是一次请求。</span></span><br><span class="line"><span class="comment">// AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。</span></span><br><span class="line"><span class="comment">// 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</span></span><br></pre></td></tr></table></figure></li>
<li><p>重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：路径上要加一个项目名。为什么？</span></span><br><span class="line"><span class="comment">// 浏览器发送请求，请求路径上是需要添加项目名的。</span></span><br><span class="line"><span class="comment">// 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器</span></span><br><span class="line"><span class="comment">// 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/list</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/oa/dept/list&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>形式上有什么区别？</p>
<ul>
<li>转发（一次请求）<ul>
<li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li>
</ul>
</li>
<li>重定向（两次请求）<ul>
<li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li>
</ul>
</li>
</ul>
</li>
<li><p>转发和重定向的本质区别？</p>
<ul>
<li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li>
<li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li>
</ul>
</li>
<li><p>使用一个例子去描述这个转发和重定向</p>
<ul>
<li>借钱（转发：发送了一次请求）<ul>
<li>杜老师没钱了，找张三借钱，其实张三没有钱，但是张三够义气，张三自己找李四借了钱，然后张三把这个钱给了杜老师，杜老师不知道这个钱是李四的，杜老师只求了一个人。杜老师以为这个钱就是张三的。</li>
</ul>
</li>
<li>借钱（重定向：发送了两次请求）<ul>
<li>杜老师没钱了，找张三借钱，张三没有钱，张三有一个好哥们，叫李四，李四是个富二代，于是张三将李四的家庭住址告诉了杜老师，杜老师按照这个地址去找到李四，然后从李四那里借了钱。显然杜老师在这个过程中，求了两个人。并且杜老师知道最终这个钱是李四借给俺的。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>转发和重定向应该如何选择？什么时候使用转发，什么时候使用重定向？</p>
<ul>
<li>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</li>
<li>剩下所有的请求均使用重定向。（重定向使用较多。）</li>
</ul>
</li>
<li><p>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</p>
<ul>
<li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li>
</ul>
</li>
<li><p>转发会存在浏览器的刷新问题。</p>
</li>
</ul>
<h2 id="将oa项目中的资源跳转修改为合适的跳转方式"><a href="#将oa项目中的资源跳转修改为合适的跳转方式" class="headerlink" title="将oa项目中的资源跳转修改为合适的跳转方式"></a>将oa项目中的资源跳转修改为合适的跳转方式</h2><ul>
<li>删除之后，重定向</li>
<li>修改之后，重定向</li>
<li>保存之后，重定向</li>
<li>重定向：<ul>
<li>成功</li>
<li>失败</li>
</ul>
</li>
</ul>
<h2 id="Servlet注解，简化配置"><a href="#Servlet注解，简化配置" class="headerlink" title="Servlet注解，简化配置"></a>Servlet注解，简化配置</h2><ul>
<li><p>分析oa项目中的web.xml文件</p>
<ul>
<li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li>
<li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li>
<li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li>
</ul>
</li>
<li><p>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</p>
<ul>
<li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li>
<li>web.xml文件体积变小了。</li>
</ul>
</li>
<li><p>并不是说注解有了之后，web.xml文件就不需要了：</p>
<ul>
<li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li>
<li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li>
</ul>
</li>
<li><p>我们的第一个注解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jakarta.servlet.annotation.WebServlet</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？</p>
<ul>
<li>name属性：用来指定Servlet的名字。等同于：servlet-name标签</li>
<li>urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。url-pattern标签</li>
<li>loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：load-on-startup标签</li>
<li>value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</li>
<li>注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）</li>
<li>注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</li>
</ul>
</li>
</ul>
</li>
<li><p>注解对象的使用格式：</p>
<ul>
<li>@注解名称(属性名=属性值, 属性名=属性值, 属性名=属性值….)</li>
</ul>
</li>
</ul>
<h2 id="使用模板方法设计模式优化oa项目"><a href="#使用模板方法设计模式优化oa项目" class="headerlink" title="使用模板方法设计模式优化oa项目"></a>使用模板方法设计模式优化oa项目</h2><ul>
<li>上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。<ul>
<li>一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</li>
<li>怎么解决这个类爆炸问题？可以使用模板方法设计模式。</li>
</ul>
</li>
<li>怎么解决类爆炸问题？<ul>
<li>以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</li>
<li>可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。</li>
<li>处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</li>
</ul>
</li>
</ul>
<h2 id="分析使用纯粹Servlet开发web应用的缺陷"><a href="#分析使用纯粹Servlet开发web应用的缺陷" class="headerlink" title="分析使用纯粹Servlet开发web应用的缺陷"></a>分析使用纯粹Servlet开发web应用的缺陷</h2><ul>
<li>在Servlet当中编写HTML/CSS/JavaScript等前端代码。存在什么问题？<ul>
<li>java程序中编写前端代码，编写难度大。麻烦。</li>
<li>java程序中编写前端代码，显然程序的耦合度非常高。</li>
<li>java程序中编写前端代码，代码非常不美观。</li>
<li>java程序中编写前端代码，维护成本太高。（非常难于维护）<ul>
<li>修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</li>
</ul>
</li>
</ul>
</li>
<li>思考一下，如果是你的话，你准备怎么解决这个问题？<ul>
<li>思路很重要。使用什么样的思路去做、去解决这个问题<ul>
<li>上面的那个Servlet（Java程序）能不能不写了，让机器自动生成。我们程序员只需要写这个Servlet程序中的“前端的那段代码”，然后让机器将我们写的“前端代码”自动翻译生成“Servlet这种java程序”。然后机器再自动将“java”程序编译生成”class”文件。然后再使用JVM调用这个class中的方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="关于B-S结构系统的会话机制（session机制）"><a href="#关于B-S结构系统的会话机制（session机制）" class="headerlink" title="关于B/S结构系统的会话机制（session机制）"></a>关于B/S结构系统的会话机制（session机制）</h2><ul>
<li><p>什么是会话？</p>
<ul>
<li>会话对应的英语单词：session</li>
<li>用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</li>
<li>什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</li>
<li>一个会话当中包含多次请求。（一次会话对应N次请求。）</li>
</ul>
</li>
<li><p>在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）</p>
</li>
<li><p>session机制属于B/S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。</p>
</li>
<li><p>session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）</p>
</li>
<li><p>为什么需要session对象来保存会话状态呢？</p>
<ul>
<li>因为HTTP协议是一种无状态协议。</li>
<li>什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</li>
<li>只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？<ul>
<li>不知道。服务器是不知道浏览器关闭的。</li>
</ul>
</li>
</ul>
</li>
<li><p>张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</p>
<ul>
<li>张三专属的session对象</li>
<li>李四专属的session对象</li>
</ul>
</li>
<li><p>为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</p>
<ul>
<li>request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</li>
<li>request是一次请求一个对象。</li>
<li>ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</li>
<li>ServletContext对象的域太大。</li>
<li>request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</li>
<li>request &lt; session &lt; application</li>
</ul>
</li>
<li><p>思考一下：session对象的实现原理。</p>
<ul>
<li>HttpSession session = request.getSession();</li>
<li>这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。</li>
</ul>
</li>
<li><p>session的实现原理：</p>
<ul>
<li>JSESSIONID=xxxxxx  这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。</li>
<li>session列表是一个Map，map的key是sessionid，map的value是session对象。</li>
<li>用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。</li>
<li>用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。</li>
<li>关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</li>
</ul>
</li>
<li><p>Cookie禁用了，session还能找到吗？</p>
<ul>
<li>cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</li>
<li>找不到了。每一次请求都会获取到新的session对象。</li>
<li>cookie禁用了，session机制还能实现吗？<ul>
<li>可以。需要使用URL重写机制。</li>
<li><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a></li>
<li>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</li>
</ul>
</li>
</ul>
</li>
<li><p>总结一下到目前位置我们所了解的域对象：</p>
<ul>
<li>request（对应的类名：HttpServletRequest）<ul>
<li>请求域（请求级别的）</li>
</ul>
</li>
<li>session（对应的类名：HttpSession）<ul>
<li>会话域（用户级别的）</li>
</ul>
</li>
<li>application（对应的类名：ServletContext）<ul>
<li>应用域（项目级别的，所有用户共享的。）</li>
</ul>
</li>
<li>这三个域对象的大小关系<ul>
<li>request &lt; session &lt; application</li>
</ul>
</li>
<li>他们三个域对象都有以下三个公共的方法：<ul>
<li>setAttribute（向域当中绑定数据）</li>
<li>getAttribute（从域当中获取数据）</li>
<li>removeAttribute（删除域当中的数据）</li>
</ul>
</li>
<li>使用原则：尽量使用小的域。</li>
</ul>
</li>
<li><p>session掌握之后，我们怎么解决oa项目中的登录问题，怎么能让登录起作用。</p>
<ul>
<li>登录成功之后，可以将用户的登录信息存储到session当中。也就是说session中如果有用户的信息就代表用户登录成功了。session中没有用户信息，表示用户没有登录过。则跳转到登录页面。</li>
</ul>
</li>
<li><p>销毁session对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul>
<li><p>session的实现原理中，每一个session对象都会关联一个sessionid，例如：</p>
<ul>
<li>JSESSIONID=41C481F0224664BDB28E95081D23D5B8</li>
<li>以上的这个键值对数据其实就是cookie对象。</li>
<li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li>
<li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li>
<li>例如，这个Cookie: JSESSIONID=41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li>
<li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li>
</ul>
</li>
<li><p>cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？</p>
</li>
<li><p>cookie最终是保存在浏览器客户端上的。</p>
<ul>
<li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li>
<li>也可以保存在硬盘文件中。（永久保存。）</li>
</ul>
</li>
<li><p>cookie有啥用呢？</p>
<ul>
<li>cookie和session机制其实都是为了保存会话的状态。</li>
<li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li>
<li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li>
<li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li>
</ul>
</li>
<li><p>cookie的经典案例</p>
<ul>
<li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？<ul>
<li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。<ul>
<li>京东存储购物车中商品的cookie可能是这样的：productIds=xxxxx,yyyy,zzz,kkkk</li>
<li>注意：cookie如果清除掉，购物车中的商品就消失了。</li>
</ul>
</li>
</ul>
</li>
<li>126邮箱中有一个功能：十天内免登录<ul>
<li>这个功能也是需要cookie来实现的。</li>
<li>怎么实现的呢？<ul>
<li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li>
<li>怎么让cookie失效？<ul>
<li>十天过后自动失效。</li>
<li>或者改密码。</li>
<li>或者在客户端浏览器上清除cookie。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。</p>
</li>
<li><p>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。</p>
</li>
<li><p>在java的servlet中，对cookie提供了哪些支持呢？</p>
<ul>
<li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li>
<li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li>
</ul>
</li>
<li><p>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</p>
</li>
<li><p>关于cookie的有效时间</p>
<ul>
<li>怎么用java设置cookie的有效时间<ul>
<li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li>
</ul>
</li>
<li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li>
<li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li>
<li>设置cookie的有效时间 = 0 呢？<ul>
<li>cookie被删除，同名cookie被删除。</li>
</ul>
</li>
<li>设置cookie的有效时间 &lt; 0 呢？<ul>
<li>保存在运行内存中。和不设置一样。</li>
</ul>
</li>
</ul>
</li>
<li><p>关于cookie的path，cookie关联的路径：</p>
<ul>
<li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a><ul>
<li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li>
<li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li>
</ul>
</li>
<li>手动设置cookie的path<ul>
<li>cookie.setPath(“/servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li>
</ul>
</li>
</ul>
</li>
<li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies(); <span class="comment">// 这个方法可能返回null</span></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="comment">// 获取cookie的name</span></span><br><span class="line">        String name = cookie.getName();</span><br><span class="line">        <span class="comment">// 获取cookie的value</span></span><br><span class="line">        String value = cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用cookie实现一下十天内免登录功能。</p>
<ul>
<li>先实现登录功能<ul>
<li>登录成功<ul>
<li>跳转到部门列表页面</li>
</ul>
</li>
<li>登录失败<ul>
<li>跳转到登录失败页面</li>
</ul>
</li>
</ul>
</li>
<li>修改前端页面<ul>
<li>在登录页面给一个复选框，复选框后面给一句话：十天内免登录。</li>
<li>用户选择了复选框：表示要支持十天内免登录。</li>
<li>用户没有选择复选框：表示用户不想使用十天内免登录功能。</li>
</ul>
</li>
<li>修改Servlet中的login方法<ul>
<li>如果用户登录成功了，并且用户登录时选择了十天内免登录功能，这个时候应该在Servlet的login方法中创建cookie，用来存储用户名和密码，并且设置路径，设置有效期，将cookie响应给浏览器。（浏览器将其自动保存在硬盘文件当中10天）</li>
</ul>
</li>
<li>用户再次访问该网站的时候，访问这个网站的首页的时候，有两个走向:<ul>
<li>要么跳转到部门列表页面</li>
<li>要么跳转到登录页面</li>
<li>以上分别有两个走向，这显然是需要编写java程序进行控制的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><ul>
<li><p>我的第一个JSP程序：</p>
<ul>
<li>在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</li>
</ul>
</li>
<li><p>将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址：</p>
<ul>
<li><a href="http://localhost:8080/jsp/index.jsp">http://localhost:8080/jsp/index.jsp</a> 展现在大家面前的是一个空白。</li>
<li>实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</li>
<li>这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</li>
<li>访问index.jsp，实际上执行的是index_jsp.class中的方法。</li>
</ul>
</li>
<li><p>JSP实际上就是一个Servlet。</p>
<ul>
<li>index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</li>
<li>index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</li>
<li>jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</li>
<li>jsp和servlet一样，都是单例的。（假单例。）</li>
</ul>
</li>
<li><p>jsp文件第一次访问的时候是比较慢的，为什么？</p>
<ul>
<li>为什么大部分的运维人员在给客户演示项目的时候，为什么提前先把所有的jsp文件先访问一遍。</li>
<li>第一次比较麻烦：<ul>
<li>要把jsp文件翻译生成java源文件</li>
<li>java源文件要编译生成class字节码文件</li>
<li>然后通过class去创建servlet对象</li>
<li>然后调用servlet对象的init方法</li>
<li>最后调用servlet对象的service方法。</li>
</ul>
</li>
<li>第二次就比较快了，为什么？<ul>
<li>因为第二次直接调用单例servlet对象的service方法即可。</li>
</ul>
</li>
</ul>
</li>
<li><p>JSP是什么？</p>
<ul>
<li>JSP是java程序。（JSP本质还是一个Servlet）</li>
<li>JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</li>
<li>Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</li>
<li>JSP是一套规范。所有的web容器/web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</li>
<li>每一个web容器/web服务器都会内置一个JSP翻译引擎。</li>
</ul>
</li>
<li><p>对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码。</p>
</li>
<li><p>开发JSP的最高境界：</p>
<ul>
<li>眼前是JSP代码，但是脑袋中呈现的是java代码。</li>
</ul>
</li>
<li><p>JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？</p>
<ul>
<li>职责不同：<ul>
<li>Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取/收集数据。）</li>
<li>JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</li>
</ul>
</li>
</ul>
</li>
<li><p>JSP的基础语法</p>
<ul>
<li><p>在jsp文件中直接编写文字，都会自动被翻译到哪里？</p>
<ul>
<li>翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</li>
<li>在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</li>
</ul>
</li>
<li><p>JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：</p>
<ul>
<li>通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset=UTF-8<ul>
<li>&lt;%@page contentType=”text/html;charset=UTF-8”%&gt;，表示响应的内容类型是text/html，采用的字符集UTF-8</li>
<li>&lt;%@page import=”java.util.List,java.util.ArrayList”%&gt;</li>
</ul>
</li>
</ul>
</li>
<li><p>怎么在JSP中编写Java程序：</p>
<ul>
<li>&lt;% java语句; %&gt;<ul>
<li>在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</li>
<li>这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</li>
<li>在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</li>
<li>service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。</li>
<li>在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</li>
</ul>
</li>
<li>&lt;%! %&gt;<ul>
<li>在这个符号当中编写的java程序会自动翻译到service方法之外。</li>
<li>这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</li>
</ul>
</li>
<li>JSP的输出语句<ul>
<li>怎么向浏览器上输出一个java变量。</li>
<li>&lt;% String name = “jack”;  out.write(“name = “ + name); %&gt;</li>
<li>注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</li>
<li>如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</li>
<li>如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：<ul>
<li>&lt;%= %&gt; 注意：在=的后面编写要输出的内容。</li>
<li>&lt;%= %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ <ul>
<li>翻译成了这个java代码：   out.print();</li>
<li>翻译到service方法当中了。</li>
</ul>
</li>
<li>什么时候使用&lt;%=%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>在JSP中如何编写JSP的专业注释</p>
<ul>
<li>&lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;</li>
<li><!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--></li>
</ul>
</li>
<li><p>JSP基础语法总结：</p>
<ul>
<li>JSP中直接编写普通字符串<ul>
<li>翻译到service方法的out.write(“这里”)</li>
</ul>
</li>
<li>&lt;%%&gt;<ul>
<li>翻译到service方法体内部，里面是一条一条的java语句。</li>
</ul>
</li>
<li>&lt;%! %&gt;<ul>
<li>翻译到service方法之外。</li>
</ul>
</li>
<li>&lt;%= %&gt;<ul>
<li>翻译到service方法体内部，翻译为：out.print();</li>
</ul>
</li>
<li>&lt;%@page  contentType=”text/html;charset=UTF-8”%&gt;<ul>
<li>page指令，通过contentType属性用来设置响应的内容类型。</li>
</ul>
</li>
</ul>
</li>
<li><p>使用Servlet + JSP完成oa项目的改造。</p>
<ul>
<li><p>使用Servlet处理业务，收集数据。 使用JSP展示数据。</p>
</li>
<li><p>将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。</p>
</li>
<li><p>完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）</p>
<ul>
<li>&lt;%=request.getContextPath() %&gt;  在JSP中动态的获取应用的根路径。</li>
</ul>
</li>
<li><p>Servlet中连接数据库，查询所有的部门，遍历结果集。</p>
<ul>
<li>遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。</li>
<li>将java对象存放到List集合中。</li>
<li>将List集合存储到request域当中。</li>
<li>转发forward到jsp。</li>
</ul>
</li>
<li><p>在JSP中：</p>
<ul>
<li>从request域当中取出List集合。</li>
<li>遍历List集合，取出每个部门对象。动态生成tr。</li>
</ul>
</li>
<li><p>思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？</p>
<ul>
<li>当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的&lt;%%&gt;里面写的代码就是在service方法当中的，所以在&lt;%%&gt;当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。</li>
<li>虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet + jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。</li>
</ul>
</li>
<li><p>JSP文件的扩展名必须是xxx.jsp吗？</p>
<ul>
<li><p>jsp文件的扩展名是可以配置的。不是固定的。</p>
</li>
<li><p>在CATALINA_HOME/conf/web.xml，在这个文件当中配置jsp文件的扩展名。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>xxx.jsp文件对于小猫咪来说，只是一个普通的文本文件，web容器会将xxx.jsp文件最终生成java程序，最终调用的是java对象相关的方法，真正执行的时候，和jsp文件就没有关系了。</p>
</li>
<li><p>小窍门：JSP如果看不懂，建议把jsp翻译成java代码，就能看懂了。</p>
</li>
</ul>
</li>
<li><p>同学问：包名bean是什么意思？</p>
<ul>
<li>javabean（java的logo是一杯冒着热气的咖啡。javabean被翻译为：咖啡豆）</li>
<li>java是一杯咖啡，咖啡又是由一粒一粒的咖啡豆研磨而成。</li>
<li>整个java程序中有很多bean的存在。由很多bean组成。</li>
<li>什么是javabean？实际上javabean你可以理解为符合某种规范的java类，比如：<ul>
<li>有无参数构造方法</li>
<li>属性私有化</li>
<li>对外提供公开的set和get方法</li>
<li>实现java.io.Serializable接口</li>
<li>重写toString</li>
<li>重写hashCode+equals</li>
<li>….</li>
</ul>
</li>
<li>javabean其实就是java中的实体类。负责数据的封装。</li>
<li>由于javabean符合javabean规范，具有更强的通用性。</li>
</ul>
</li>
<li><p>完成剩下所有功能的改造。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>当前的oa应用存在的问题：</p>
<ul>
<li>任何一个用户都可以访问这个系统，都可以对这个系统当中的数据进行增删改这些危险的操作。我只想让合法的用户去使用这个系统，不合法的用户不能访问这个系统，怎么办？<ul>
<li>加一个登录功能。登录成功的可以访问该系统，登录失败不能访问。</li>
</ul>
</li>
<li>实现登录功能：<ul>
<li>步骤1：数据库当中添加一个用户表：t_user<ul>
<li>t_user表当中存储的是用户的登录信息，最基本的也包括：登录的用户名和登录的密码。</li>
<li>密码一般在数据库表当中存储的是密文。一般不以明文的形式存储。（这里先使用明文方式。）</li>
<li>向t_user表中插入数据。</li>
</ul>
</li>
<li>步骤2：再实现一个登录页面。<ul>
<li>登录页面上应该有一个登录的表单。有用户名和密码输入的框。</li>
<li>用户点击登录，提交表单，提交用户名和密码。form是post方式提交。</li>
</ul>
</li>
<li>步骤3：后台要有一个对应的Servlet来处理登录的请求。<ul>
<li>登录成功：跳转到部门列表页面。</li>
<li>登录失败：跳转到失败的页面。</li>
</ul>
</li>
<li>步骤4：再提供一个登录失败的页面。</li>
</ul>
</li>
</ul>
</li>
<li><p>登录功能实现了，目前存在的最大的问题：</p>
<ul>
<li>这个登录功能目前只是一个摆设，没有任何作用。只要用户知道后端的请求路径，照样可以在不登录的情况下访问。</li>
<li>这个登录没有真正起到拦截的作用。怎么解决？</li>
</ul>
</li>
<li><p>JSP的指令</p>
<ul>
<li><p>指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</p>
</li>
<li><p>指令包括哪些呢？</p>
<ul>
<li>include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</li>
<li>taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</li>
<li>page指令：目前重点学习一个page指令。</li>
</ul>
</li>
<li><p>指令的使用语法是什么？</p>
<ul>
<li>&lt;%@指令名  属性名=属性值  属性名=属性值  属性名=属性值….%&gt;</li>
</ul>
</li>
<li><p>关于page指令当中都有哪些常用的属性呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page session=&quot;true|false&quot; %&gt;</span><br><span class="line">true表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。</span><br><span class="line">如果没有设置，默认值就是session=&quot;true&quot;</span><br><span class="line">session=&quot;false&quot; 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/json&quot; %&gt;</span><br><span class="line">contentType属性用来设置响应的内容类型</span><br><span class="line">但同时也可以设置字符集。</span><br><span class="line">&lt;%@page contentType=&quot;text/json;charset=UTF-8&quot; %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot; 表示设置响应时采用的字符集。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.util.List, java.util.Date, java.util.ArrayList&quot; %&gt;</span><br><span class="line">&lt;%@page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">import语句，导包。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page errorPage=&quot;/error.jsp&quot; %&gt;</span><br><span class="line">当前页面出现异常之后，跳转到error.jsp页面。</span><br><span class="line">errorPage属性用来指定出错之后的跳转位置。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page isErrorPage=&quot;true&quot; %&gt;</span><br><span class="line">表示启用JSP九大内置对象之一：exception</span><br><span class="line">默认值是false。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JSP的九大内置对象</p>
<ul>
<li><p>jakarta.servlet.jsp.PageContext pageContext       页面作用域</p>
</li>
<li><p>jakarta.servlet.http.HttpServletRequest request 请求作用域</p>
</li>
<li><p>jakarta.servlet.http.HttpSession session  会话作用域</p>
</li>
<li><p>jakarta.servlet.ServletContext application 应用作用域</p>
<ul>
<li>pageContext &lt; request &lt; session &lt; application</li>
<li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li>
<li>以上作用域的使用原则：尽可能使用小的域。</li>
</ul>
</li>
<li><p>java.lang.Throwable exception   </p>
</li>
<li><p>jakarta.servlet.ServletConfig config</p>
</li>
<li><p>java.lang.Object page  （其实是this，当前的servlet对象）</p>
</li>
<li><p>jakarta.servlet.jsp.JspWriter out  （负责输出）</p>
</li>
<li><p>jakarta.servlet.http.HttpServletResponse response （负责响应）</p>
</li>
</ul>
</li>
</ul>
<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><ul>
<li><p>EL表达式是干什么用的？</p>
<ul>
<li>Expression Language（表达式语言）</li>
<li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li>
<li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%=%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li>
<li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li>
</ul>
</li>
<li><p>EL表达式出现在JSP中主要是：</p>
<ul>
<li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：<ul>
<li>第一功效：从某个域中取数据。<ul>
<li>四个域：<ul>
<li>pageContext</li>
<li>request</li>
<li>session</li>
<li>application</li>
</ul>
</li>
</ul>
</li>
<li>第二功效：将取出的数据转成字符串。<ul>
<li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li>
</ul>
</li>
<li>第三功效：将字符串输出到浏览器。<ul>
<li>和这个一样：&lt;%= %&gt;，将其输出到浏览器。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>EL表达式很好用，基本的语法格式：</p>
<ul>
<li>${表达式}</li>
</ul>
</li>
<li><p>EL表达式的使用：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	<span class="comment">// 创建User对象</span></span><br><span class="line">	User user = <span class="keyword">new</span> User();</span><br><span class="line">	user.setUsername(<span class="string">&quot;jackson&quot;</span>);</span><br><span class="line">	user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">	user.setAge(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span></span><br><span class="line">	<span class="comment">// 数据是必须存储到四大范围之一的。</span></span><br><span class="line">	request.setAttribute(<span class="string">&quot;userObj&quot;</span>, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取--%&gt;</span><br><span class="line">$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;</span><br><span class="line">要这样写：</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line">等同于java代码：&lt;%=request.getAttribute(<span class="string">&quot;userObj&quot;</span>)%&gt;</span><br><span class="line">你不要这样写：$&#123;<span class="string">&quot;userObj&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">	$&#123;abc&#125; 和 $&#123;<span class="string">&quot;abc&quot;</span>&#125;的区别是什么？</span><br><span class="line">		$&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是<span class="string">&quot;abc&quot;</span>，之前一定有这样的代码: 域.setAttribute(<span class="string">&quot;abc&quot;</span>, 对象);</span><br><span class="line">		$&#123;<span class="string">&quot;abc&quot;</span>&#125; 表示直接将<span class="string">&quot;abc&quot;</span>当做普通字符串输出到浏览器。不会从某个域中取数据了。</span><br><span class="line"></span><br><span class="line">$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span><br><span class="line"></span><br><span class="line">&lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span><br><span class="line">$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。</span><br><span class="line">$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。</span><br><span class="line">$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。</span><br><span class="line">$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。</span><br><span class="line">EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span><br><span class="line">注意：如果没有对应的get方法，则出现异常。报<span class="number">500</span>错误。</span><br><span class="line"></span><br><span class="line">$&#123;userObj.addr222.zipcode&#125;</span><br><span class="line">以上EL表达式对应的java代码：</span><br><span class="line">user.getAddr222().getZipcode()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>EL表达式优先从小范围中读取数据。</p>
<ul>
<li>pageContext &lt; request &lt; session &lt; application</li>
</ul>
</li>
<li><p>EL表达式中有四个隐含的隐式的范围：</p>
<ul>
<li>pageScope 对应的是 pageContext范围。</li>
<li>requestScope 对应的是 request范围。</li>
<li>sessionScope 对应的是 session范围。</li>
<li>applicationScope 对应的是 application范围。</li>
</ul>
</li>
<li><p>EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。</p>
</li>
<li><p>EL表达式取数据的时候有两种形式：</p>
<ul>
<li>第一种：.  （大部分使用这种方式）</li>
<li>第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）<ul>
<li>request.setAttribute(“abc.def”, “zhangsan”);</li>
<li>${requestScope.abc.def} 这样是无法取值的。</li>
<li>应该这样：${requestScope[“abc.def”]}</li>
</ul>
</li>
</ul>
</li>
<li><p>掌握使用EL表达式，怎么从Map集合中取数据：</p>
<ul>
<li>${map.key}</li>
</ul>
</li>
<li><p>掌握使用EL表达式，怎么从数组和List集合中取数据：</p>
<ul>
<li>${数组[0]}</li>
<li>${数组[1]}</li>
<li>${list[0]}</li>
</ul>
</li>
<li><p>page指令当中，有一个属性，可以忽略EL表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;charset=UTF-8&quot; isELIgnored=&quot;true&quot; %&gt;</span><br><span class="line">isELIgnored=&quot;true&quot; 表示忽略EL表达式</span><br><span class="line">isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span><br><span class="line"></span><br><span class="line">isELIgnored=&quot;true&quot; 这个是全局的控制。</span><br><span class="line"></span><br><span class="line">可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></pre></td></tr></table></figure></li>
<li><p>通过EL表达式获取应用的根：</p>
<ul>
<li>${pageContext.request.contextPath}</li>
</ul>
</li>
<li><p>EL表达式中其他的隐式对象：</p>
<ul>
<li>pageContext</li>
<li>param</li>
<li>paramValues</li>
<li>initParam</li>
</ul>
</li>
<li><p>EL表达式的运算符</p>
<ul>
<li>算术运算符<ul>
<li>+、-、*、/、%</li>
</ul>
</li>
<li>关系运算符<ul>
<li><input disabled="" type="checkbox"> == eq != &gt; &gt;= &lt; &lt;= </li>
</ul>
</li>
<li>逻辑运算符<ul>
<li><input disabled="" type="checkbox"> !  &amp;&amp; ||  not and or</li>
</ul>
</li>
<li>条件运算符<ul>
<li><input disabled="" type="checkbox"> ? : </li>
</ul>
</li>
<li>取值运算符<ul>
<li>[ ]和.</li>
</ul>
</li>
<li>empty运算符<ul>
<li><input disabled="" type="checkbox"> empty运算符的结果是boolean类型</li>
<li><input disabled="" type="checkbox"> ${empty param.username}</li>
<li><input disabled="" type="checkbox"> ${not empty param.username}</li>
<li><input disabled="" type="checkbox"> ${!empty param.password}</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><ul>
<li><p>什么是JSTL标签库？</p>
<ul>
<li>Java Standard Tag Lib（Java标准的标签库）</li>
<li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li>
<li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li>
</ul>
</li>
<li><p>使用JSTL标签库的步骤：</p>
<ul>
<li><p>第一步：引入JSTL标签库对应的jar包。</p>
<ul>
<li>tomcat10之后引入的jar包是：<ul>
<li>jakarta.servlet.jsp.jstl-2.0.0.jar</li>
<li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li>
</ul>
</li>
<li>在IDEA当中怎么引入？<ul>
<li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li>
<li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF/lib目录下的。</li>
<li>什么时候需要将jar包放到WEB-INF/lib目录下？如果这个jar是tomcat服务器没有的。</li>
</ul>
</li>
</ul>
</li>
<li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p>
<ul>
<li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">这个就是核心标签库。</span><br><span class="line">prefix=&quot;这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。</p>
</li>
</ul>
</li>
<li><p>JSTL标签的原理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">tld文件实际上是一个xml配置文件。</span><br><span class="line">在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">在jakarta.servlet.jsp.jstl-2.0.0.jar里面META-INF目录下，有一个c.tld文件。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>源码解析：配置文件tld解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tag&gt;</span><br><span class="line">    &lt;description&gt;对该标签的描述&lt;/description&gt;</span><br><span class="line">    &lt;name&gt;catch&lt;/name&gt; 标签的名字</span><br><span class="line">    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。</span><br><span class="line">    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;description&gt;</span><br><span class="line">        	对这个属性的描述</span><br><span class="line">        &lt;/description&gt;</span><br><span class="line">        &lt;name&gt;var&lt;/name&gt; 属性名</span><br><span class="line">        &lt;required&gt;false&lt;/required&gt; false表示该属性不是必须的。true表示该属性是必须的。</span><br><span class="line">        &lt;rtexprvalue&gt;false&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">  &lt;/tag&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:catch var=&quot;&quot;&gt;</span><br><span class="line">	JSP....</span><br><span class="line">&lt;/c:catch&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>jstl中的核心标签库core当中有哪些常用的标签呢？</p>
<ul>
<li><p>c:if</p>
<ul>
<li>&lt;c:if test=”boolean类型，支持EL表达式”&gt;&lt;/c: if&gt;</li>
</ul>
</li>
<li><p>c:forEach</p>
<ul>
<li>&lt;c:forEach items=”集合，支持EL表达式” var=”集合中的元素” varStatus=”元素状态对象”&gt; ${元素状态对象.count} &lt;/c: forEach&gt;</li>
<li>&lt;c:forEach var=”i” begin=”1” end=”10” step=”2”&gt; ${i} &lt;/c: forEach&gt;</li>
</ul>
</li>
<li><p>c:choose c:when c:otherwise</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 18&#125;&quot;&gt;</span><br><span class="line">        青少年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 35&#125;&quot;&gt;</span><br><span class="line">        青年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 55&#125;&quot;&gt;</span><br><span class="line">        中年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        老年</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="改造OA"><a href="#改造OA" class="headerlink" title="改造OA"></a>改造OA</h2><ul>
<li><p>使用什么技术改造呢？</p>
<ul>
<li>Servlet + JSP + EL表达式 + JSTL标签。进行改造。</li>
</ul>
</li>
<li><p>在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。</p>
<ul>
<li><p>这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。</p>
</li>
<li><p>&lt; base href=”<a href="http://localhost:8080/oa/&quot;&gt;">http://localhost:8080/oa/&quot;&gt;</a></p>
</li>
<li><p>在当前页面中，凡是路径没有以“/”开始的，都会自动将base中的路径添加到这些路径之前。</p>
<ul>
<li>&lt; a href=”ab/def”&gt;&lt;/ a&gt;</li>
<li>等同于：&lt; a href=”<a href="http://localhost:8080/oa/ab/def&quot;&gt;">http://localhost:8080/oa/ab/def&quot;&gt;</a>&lt;/ a&gt;</li>
</ul>
</li>
<li><p>需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base href=&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><ul>
<li><p>当前的OA项目存在什么缺陷？</p>
<ul>
<li>DeptServlet、EmpServlet、OrderServlet。每一个Servlet都是处理自己相关的业务。在这些Servlet执行之前都是需要判断用户是否登录了。如果用户登录了，可以继续操作，如果没有登录，需要用户登录。这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，显然代码没有得到重复利用。包括每一个Servlet都要解决中文乱码问题，也有公共的代码。这些代码目前都是重复编写，并没有达到复用。怎么解决这个问题?<ul>
<li>可以使用Servlet规范中的Filter过滤器来解决这个问题。</li>
</ul>
</li>
</ul>
</li>
<li><p>Filter是什么，有什么用，执行原理是什么？</p>
<ul>
<li>Filter是过滤器。</li>
<li>Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</li>
<li>一般情况下，都是在过滤器当中编写公共代码。</li>
</ul>
</li>
<li><p>一个过滤器怎么写呢？</p>
<ul>
<li><p>第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。</p>
<ul>
<li>init方法：在Filter对象第一次被创建之后调用，并且只调用一次。</li>
<li>doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。</li>
<li>destroy方法：在Filter对象被释放/销毁之前调用，并且只调用一次。</li>
</ul>
</li>
<li><p>第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.bjpowernode.javaweb.servlet.Filter2&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>或者使用注解：@WebFilter({“*.do”})</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li>
<li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li>
<li>Servlet是单例的。Filter也是单例的。（单实例。）</li>
</ul>
</li>
<li><p>目标Servlet是否执行，取决于两个条件：</p>
<ul>
<li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li>
<li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li>
</ul>
</li>
<li><p>chain.doFilter(request, response); 这行代码的作用：</p>
<ul>
<li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li>
</ul>
</li>
<li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p>
<ul>
<li>/a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li>
</ul>
</li>
<li><p>关于Filter的配置路径：</p>
<ul>
<li>/a.do、/b.do、/dept/save。这些配置方式都是精确匹配。</li>
<li>/* 匹配所有路径。</li>
<li>*.do 后缀匹配。不要以 / 开始</li>
<li>/dept/*  前缀匹配。</li>
</ul>
</li>
<li><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p>
<ul>
<li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li>
</ul>
</li>
<li><p>过滤器的调用顺序，遵循栈数据结构。</p>
</li>
<li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p>
<ul>
<li>执行顺序是：比较Filter这个类名。</li>
<li>比如：FilterA和FilterB，则先执行FilterA。</li>
<li>比如：Filter1和Filter2，则先执行Filter1.</li>
</ul>
</li>
<li><p>Filter的生命周期？</p>
<ul>
<li>和Servlet对象生命周期一致。</li>
<li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li>
</ul>
</li>
<li><p>Filter过滤器这里有一个设计模式：</p>
<ul>
<li>责任链设计模式。</li>
<li>过滤器最大的优点：<ul>
<li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li>
</ul>
</li>
<li>责任链设计模式最大的核心思想：<ul>
<li>在程序运行阶段，动态的组合程序的调用顺序。</li>
</ul>
</li>
</ul>
</li>
<li><p>使用过滤器改造OA项目。</p>
</li>
</ul>
<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul>
<li><p>什么是监听器？</p>
<ul>
<li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li>
<li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li>
</ul>
</li>
<li><p>监听器有什么用？</p>
<ul>
<li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li>
<li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li>
</ul>
</li>
<li><p>Servlet规范中提供了哪些监听器？</p>
<ul>
<li>jakarta.servlet包下：<ul>
<li>ServletContextListener</li>
<li>ServletContextAttributeListener</li>
<li>ServletRequestListener</li>
<li>ServletRequestAttributeListener</li>
</ul>
</li>
<li>jakarta.servlet.http包下：<ul>
<li>HttpSessionListener</li>
<li>HttpSessionAttributeListener<ul>
<li>该监听器需要使用@WebListener注解进行标注。</li>
<li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li>
</ul>
</li>
<li>HttpSessionBindingListener<ul>
<li>该监听器不需要使用@WebListener进行标注。</li>
<li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li>
<li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li>
</ul>
</li>
<li>HttpSessionIdListener<ul>
<li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li>
</ul>
</li>
<li>HttpSessionActivationListener<ul>
<li>监听session对象的钝化和活化的。</li>
<li>钝化：session对象从内存存储到硬盘文件。</li>
<li>活化：从硬盘文件把session恢复到内存。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>实现一个监听器的步骤：以ServletContextListener为例。</p>
<ul>
<li><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void contextInitialized(ServletContextEvent event)</span><br><span class="line">void contextDestroyed(ServletContextEvent event)</span><br></pre></td></tr></table></figure></li>
<li><p>第二步：在web.xml文件中对ServletContextListener进行配置，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.bjpowernode.javaweb.listener.MyServletContextListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p>
<ul>
<li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li>
</ul>
</li>
<li><p>思考一个业务场景：</p>
<ul>
<li>请编写一个功能，记录该网站实时的在线用户的个数。</li>
<li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li>
<li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul>
<li>session.setAttribute(“user”, userObj); </li>
<li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li>
</ul>
</li>
</ul>
</li>
<li><p>实现oa项目中当前登录在线的人数。</p>
<ul>
<li>什么代表着用户登录了？<ul>
<li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li>
</ul>
</li>
<li>什么代表着用户退出了？<ul>
<li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li>
<li>或者有可能是session销毁了。（session超时）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax笔记</title>
    <url>/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="AJAX（Asynchronous-Javascript-And-Xml）"><a href="#AJAX（Asynchronous-Javascript-And-Xml）" class="headerlink" title="AJAX（Asynchronous Javascript And Xml）"></a>AJAX（Asynchronous Javascript And Xml）</h1><h2 id="传统请求及缺点"><a href="#传统请求及缺点" class="headerlink" title="传统请求及缺点"></a>传统请求及缺点</h2><ul>
<li>传统的请求都有哪些？<ul>
<li>直接在浏览器地址栏上输入URL。</li>
<li>点击超链接</li>
<li>提交form表单</li>
<li>使用JS代码发送请求<ul>
<li>window.open(url)</li>
<li>document.location.href = url</li>
<li>window.location.href = url</li>
<li>….</li>
</ul>
</li>
</ul>
</li>
<li>传统请求存在的问题<ul>
<li><p>页面全部刷新导致了用户的体验较差。</p>
</li>
<li><p>传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</p>
<img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/AJAX%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82.png" class="" title="AJAX同步请求"></li>
</ul>
</li>
</ul>
<h2 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><ul>
<li><p>AJAX不能称为一种技术，它是多种技术的综合产物。</p>
</li>
<li><p>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</p>
</li>
<li><p>什么是异步，什么是同步？</p>
<ul>
<li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li>
<li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li>
<li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li>
</ul>
</li>
<li><p>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</p>
</li>
<li><p>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p>
</li>
<li><p>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</p>
</li>
<li><p>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</p>
<img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/AJAX%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.png" class="" title="AJAX异步请求">

<img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/%E5%AF%B9AJAX%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E7%9A%84%E7%90%86%E8%A7%A3.png" class="" title="对AJAX异步请求的理解"></li>
</ul>
<h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul>
<li><p>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</p>
</li>
<li><p>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</p>
</li>
<li><p>创建XMLHttpRequest对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></li>
<li><p>XMLHttpRequest对象的方法</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abort()</td>
<td align="left">取消当前请求</td>
</tr>
<tr>
<td align="left">getAllResponseHeaders()</td>
<td align="left">返回头部信息</td>
</tr>
<tr>
<td align="left">getResponseHeader()</td>
<td align="left">返回特定的头部信息</td>
</tr>
<tr>
<td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td>
<td align="left">规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码</td>
</tr>
<tr>
<td align="left">send()</td>
<td align="left">将请求发送到服务器，用于 GET 请求</td>
</tr>
<tr>
<td align="left">send(<em>string</em>)</td>
<td align="left">将请求发送到服务器，用于 POST 请求</td>
</tr>
<tr>
<td align="left">setRequestHeader()</td>
<td align="left">向要发送的报头添加标签/值对</td>
</tr>
</tbody></table>
<ul>
<li>XMLHttpRequest对象的属性</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onreadystatechange</td>
<td align="left">定义当 readyState 属性发生变化时被调用的函数</td>
</tr>
<tr>
<td align="left">readyState</td>
<td align="left">保存 XMLHttpRequest 的状态。0：请求未初始化     1：服务器连接已建立     2：请求已收到    3：正在处理请求    4：请求已完成且响应已就绪</td>
</tr>
<tr>
<td align="left">responseText</td>
<td align="left">以字符串返回响应数据</td>
</tr>
<tr>
<td align="left">responseXML</td>
<td align="left">以 XML 数据返回响应数据</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”</td>
</tr>
<tr>
<td align="left">statusText</td>
<td align="left">返回状态文本（比如 “OK” 或 “Not Found”）</td>
</tr>
</tbody></table>
<p>XMLHttpRequest的readyState属性</p>
<img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/XMLHttpRequest%E7%9A%84readyState%E5%B1%9E%E6%80%A7.png" class="" title="XMLHttpRequest的readyState属性">

<h2 id="AJAX-GET请求"><a href="#AJAX-GET请求" class="headerlink" title="AJAX GET请求"></a>AJAX GET请求</h2><ul>
<li><p>发送AJAX get请求，前端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1. 创建AJAX核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//3. 开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest2&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//4. 发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;myspan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>发送AJAX get请求，后端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest2Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-13 10:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest2Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取响应流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>AJAX get请求如何提交数据呢？</p>
<ul>
<li>get请求提交数据是在“请求行”上提交，格式是：url?name=value&amp;name=value&amp;name=value….</li>
<li>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</li>
</ul>
</li>
</ul>
<h2 id="AJAX-GET请求的缓存问题"><a href="#AJAX-GET请求的缓存问题" class="headerlink" title="AJAX GET请求的缓存问题"></a>AJAX GET请求的缓存问题</h2><ul>
<li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li>
<li>什么是AJAX GET请求缓存问题呢？<ul>
<li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li>
<li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li>
</ul>
</li>
<li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li>
<li>GET请求缓存的优缺点：<ul>
<li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li>
<li>缺点：无法实时获取最新的服务器资源。</li>
</ul>
</li>
<li>浏览器什么时候会走缓存？<ul>
<li>第一：是一个GET请求</li>
<li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li>
</ul>
</li>
<li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul>
<li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li>
<li>可以采用时间戳：”url?t=” + new Date().getTime()</li>
<li>或者可以通过随机数：”url?t=” + Math.random()</li>
<li>也可以随机数+时间戳….</li>
</ul>
</li>
</ul>
<h2 id="AJAX-POST请求"><a href="#AJAX-POST请求" class="headerlink" title="AJAX POST请求"></a>AJAX POST请求</h2><ul>
<li><p>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 发送AJAX POST请求</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">// 设置请求头的内容类型。模拟form表单提交数据。</span></span><br><span class="line"><span class="comment">// 获取表单中的数据</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span><br><span class="line"><span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;password&quot;</span>).value;</span><br><span class="line"><span class="comment">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span></span><br><span class="line">xhr.send(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span><br></pre></td></tr></table></figure></li>
<li><p>实现一个案例：使用AJAX POST请求实现用户注册的时候，用户名是否可用。（验证用户名是否可以注册）实现步骤如下：</p>
<ul>
<li>在前端，用户输入用户名之后，失去焦点事件blur发生，然后发送AJAX POST请求，提交用户名</li>
<li>在后端，接收到用户名，连接数据库，根据用户名去表中搜索</li>
<li>如果用户名已存在<ul>
<li>后端响应消息：对不起，用户名已存在（在前端页面以红色字体展示）</li>
</ul>
</li>
<li>如果用户名不存在<ul>
<li>后端响应消息：用户名可以使用（在前端页面以绿色字体展示）</li>
</ul>
</li>
</ul>
</li>
<li><p>实现一个案例：用户点击按钮之后，发送AJAX请求，显示学生列表。</p>
<ul>
<li>在后端java程序中拼接HTML代码，然后将HTML代码直接响应到浏览器客户端。这种方式不好，不应该在java代码中编写HTML代码，能否在java程序中直接向前端响应数据？可以，可以在后端拼接JSON格式的字符串，或者XML格式的字符串，将这个字符串发送给前端，前端解析即可。</li>
</ul>
</li>
</ul>
<h2 id="基于JSON的数据交换"><a href="#基于JSON的数据交换" class="headerlink" title="基于JSON的数据交换"></a>基于JSON的数据交换</h2><ul>
<li><p>在WEB前端中，如何将一个json格式的字符串转换成json对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(jsonStr)</span><br><span class="line"><span class="built_in">console</span>.log(jsonObj.username)</span><br><span class="line"><span class="built_in">console</span>.log(jsonObj.password)</span><br></pre></td></tr></table></figure></li>
<li><p>在后端拼接JSON格式的字符串，响应给前端的浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">json.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 获取每个学生的信息</span></span><br><span class="line">    String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    String age = rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    String addr = rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 拼接json格式的字符串</span></span><br><span class="line">    <span class="comment">// &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line">    json.append(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;,\&quot;age\&quot;:&quot;</span>);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(<span class="string">&quot;,\&quot;addr\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(<span class="number">0</span>, json.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    String addr = rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(name, age, addr);</span><br><span class="line">    <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br></pre></td></tr></table></figure>

<p>注意：使用fastjson需要引入fastjson-1.2.2.jar</p>
</li>
</ul>
<h2 id="基于XML的数据交换"><a href="#基于XML的数据交换" class="headerlink" title="基于XML的数据交换"></a>基于XML的数据交换</h2><ul>
<li><p>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>xml和JSON都是常用的数据交换格式</p>
<ul>
<li>XML体积大，解析麻烦。较少用。</li>
<li>JSON体积小，解析简单，较常用。</li>
</ul>
</li>
<li><p>基于XML的数据交换，前端代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> xmlDoc = <span class="built_in">this</span>.responseXML</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> students = xmlDoc.getElementsByTagName(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> nameOrAge = student.childNodes</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (node.nodeName == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.textContent+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                                &#125;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (node.nodeName == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.textContent+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                                &#125;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>基于XML的数据交换，后端java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        StringBuilder xml = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AJAX乱码问题"><a href="#AJAX乱码问题" class="headerlink" title="AJAX乱码问题"></a>AJAX乱码问题</h2><ul>
<li><p>测试内容：</p>
<ul>
<li>发送ajax get请求<ul>
<li>发送数据到服务器，服务器获取的数据是否乱码？</li>
<li>服务器响应给前端的中文，会不会乱码？</li>
</ul>
</li>
<li>发送ajax post请求<ul>
<li>发送数据到服务器，服务器获取的数据是否乱码？</li>
<li>服务器响应给前端的中文，会不会乱码？</li>
</ul>
</li>
</ul>
</li>
<li><p>包括还要测试tomcat服务器的版本：</p>
<ul>
<li>tomcat10和tomcat9都要进行测试。</li>
</ul>
</li>
<li><p>测试结果：</p>
<ul>
<li><p>对于tomcat10来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</p>
</li>
<li><p>对于tomcat9来说呢？</p>
<ul>
<li><p>响应中文的时候，会出现乱码，怎么解决？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AJAX的异步与同步"><a href="#AJAX的异步与同步" class="headerlink" title="AJAX的异步与同步"></a>AJAX的异步与同步</h2><ul>
<li><p>什么是异步？什么是同步？</p>
<ul>
<li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li>
<li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li>
</ul>
</li>
<li><p>异步和同步在代码上如何实现？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.open(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.send()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.open(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.send()</span><br></pre></td></tr></table></figure></li>
<li><p>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）</p>
<ul>
<li>举一个例子<ul>
<li>用户注册<ul>
<li>用户名需要发送ajax请求进行校验</li>
<li>邮箱地址也需要发送ajax请求校验</li>
<li>其他的也可能需要发送ajax请求。。。</li>
<li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li>
<li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AJAX代码封装"><a href="#AJAX代码封装" class="headerlink" title="AJAX代码封装"></a>AJAX代码封装</h2><ul>
<li><p>AJAX请求相关的代码都是类似的，有很多重复的代码，这些重复的代码能不能不写，能不能封装一个工具类。要发送ajax请求的话，就直接调用这个工具类中的相关函数即可。</p>
</li>
<li><p>接下来，手动封装一个工具类，这个工具类我们可以把它看做是一个JS的库。我们把这个JS库起一个名字，叫做jQuery。（我这里封装的jQuery只是一个前端的库，和后端的java没有关系，只是为了方便web前端代码的编写，提高WEB前端的开发效率）</p>
</li>
<li><p>手动开发jQuery，源代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="built_in">document</span>.getElementById(selector.substring(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.html = <span class="function"><span class="keyword">function</span>(<span class="params">htmlStr</span>)</span>&#123;</span><br><span class="line">        domObj.innerHTML = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.click = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onclick = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onfocus = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.blur = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        domObj.onblur = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.change = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onchange = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.val = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.value</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.value = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">jsonArgs</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.success(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.open(<span class="string">&quot;POST&quot;</span>, jsonArgs.url, jsonArgs.async)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.send(jsonArgs.data)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, jsonArgs.url + <span class="string">&quot;?&quot;</span> + jsonArgs.data, jsonArgs.async)</span><br><span class="line">            xhr.send()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> jQuery()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用以上库，怎么用？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span> : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span> : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span> : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).val(),</span></span><br><span class="line"><span class="javascript">                <span class="attr">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#div1&quot;</span>).html(json.uname)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AJAX实现省市联动"><a href="#AJAX实现省市联动" class="headerlink" title="AJAX实现省市联动"></a>AJAX实现省市联动</h2><ul>
<li><p>什么是省市联动？</p>
<ul>
<li>在网页上，选择对应的省份之后，动态的关联出该省份对应的市。选择对应的市之后，动态的关联出该市对应的区。（首先要清楚需求）</li>
</ul>
</li>
<li><p>进行数据库表的设计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t_area （区域表）</span><br><span class="line">id(PK-自增)	  code		name		pcode</span><br><span class="line">---------------------------------------------</span><br><span class="line">1				001		 河北省		null</span><br><span class="line">2				002		 河南省		null</span><br><span class="line">3				003		 石家庄	    001</span><br><span class="line">4				004		 邯郸			 001</span><br><span class="line">5				005		 郑州			 002</span><br><span class="line">6				006		 洛阳			 002</span><br><span class="line">7				007		 丛台区	    004  </span><br><span class="line"></span><br><span class="line">将全国所有的省、市、区、县等信息都存储到一张表当中。</span><br><span class="line">采用的存储方式实际上是code pcode形势。</span><br></pre></td></tr></table></figure></li>
<li><p>建表t_area，模拟好数据。</p>
</li>
<li><p>首先实现第一个功能：</p>
<ul>
<li>页面加载完毕之后，先把省份全部展现出来。</li>
</ul>
</li>
</ul>
<h2 id="AJAX跨域问题"><a href="#AJAX跨域问题" class="headerlink" title="AJAX跨域问题"></a>AJAX跨域问题</h2><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/%E5%AF%B9%E8%B7%A8%E5%9F%9F%E7%9A%84%E7%90%86%E8%A7%A3.png" class="" title="对跨域的理解">

<ul>
<li><p>跨域是指从一个域名的网页去请求另一个域名的资源。比如从百度(<a href="https://baidu.com)页面去请求京东(https//www.jd.com)%E7%9A%84%E8%B5%84%E6%BA%90%E3%80%82">https://baidu.com)页面去请求京东(https://www.jd.com)的资源。</a></p>
</li>
<li><p>通过超链接或者form表单提交或者window.location.href的方式进行跨域是不存在问题的（<strong>大家可以编写程序测试一下</strong>）。但在一个域名的网页中的一段js代码发送ajax请求去访问另一个域名中的资源，由于同源策略的存在导致无法跨域访问，那么ajax就存在这种跨域问题。</p>
</li>
<li><p>同源策略是指一段脚本只能读取来自同一来源的窗口和文档的属性，同源就是协议、域名和端口都相同。</p>
</li>
<li><p>同源策略有什么用？如果你刚刚在网银输入账号密码，查看了自己还有1万块钱，紧接着访问一些不规矩的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。所以，从安全的角度来讲，同源策略是有利于保护网站信息的。</p>
</li>
<li><p>有一些情况下，我们是需要使用ajax进行跨域访问的。比如某公司的A页面(a.bjpowernode.com)有可能需要获取B页面(b.bjpowernode.com)。</p>
<h3 id="同源还是不同源"><a href="#同源还是不同源" class="headerlink" title="同源还是不同源"></a>同源还是不同源</h3><ul>
<li><p>区分同源和不同源的三要素</p>
</li>
<li><ul>
<li>协议</li>
<li>域名</li>
<li>端口</li>
</ul>
</li>
<li><p>协议一致，域名一致，端口号一致，三个要素都一致，才是同源，其它一律都是不同源</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>URL1</strong></th>
<th><strong>URL2</strong></th>
<th><strong>是否同源</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td>
<td><a href="http://localhost:8080/a/first">http://localhost:8080/a/first</a></td>
<td>同源</td>
<td>协议 域名 端口一致</td>
</tr>
<tr>
<td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td>
<td><a href="http://localhost:8080/b/first">http://localhost:8080/b/first</a></td>
<td>同源</td>
<td>协议 域名 端口一致</td>
</tr>
<tr>
<td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td>
<td><a href="https://www.myweb.com:8080/b.js">https://www.myweb.com:8080/b.js</a></td>
<td>不同源</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td>
<td><a href="http://www.myweb.com:8081/b.js">http://www.myweb.com:8081/b.js</a></td>
<td>不同源</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td>
<td><a href="http://www.myweb2.com/b.js">http://www.myweb2.com/b.js</a></td>
<td>不同源</td>
<td>域名不同</td>
</tr>
<tr>
<td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td>
<td><a href="http://crm.myweb.com/b.js">http://crm.myweb.com/b.js</a></td>
<td>不同源</td>
<td>子域名不同</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="复现AJAX跨域问题"><a href="#复现AJAX跨域问题" class="headerlink" title="复现AJAX跨域问题"></a>复现AJAX跨域问题</h3><h3 id="AJAX跨域解决方案"><a href="#AJAX跨域解决方案" class="headerlink" title="AJAX跨域解决方案"></a>AJAX跨域解决方案</h3><h4 id="方案1：设置响应头"><a href="#方案1：设置响应头" class="headerlink" title="方案1：设置响应头"></a>方案1：设置响应头</h4><ul>
<li><p>核心原理：跨域访问的资源允许你跨域访问。</p>
</li>
<li><p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>); <span class="comment">// 允许某个</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 允许所有</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方案2：jsonp"><a href="#方案2：jsonp" class="headerlink" title="方案2：jsonp"></a>方案2：jsonp</h4><ul>
<li>jsonp：json with padding（带填充的json【学完之后再理解这个什么意思！！！】）</li>
<li>jsonp不是一个真正的ajax请求。只不过可以完成ajax的局部刷新效果。可以说jsonp是一种类ajax请求的机制。</li>
<li>jsonp不是ajax请求，但是可以完成局部刷新的效果，并且可以解决跨域问题。</li>
<li>注意：jsonp解决跨域的时候，只支持GET请求。不支持post请求。</li>
</ul>
<h4 id="方案3：jQuery封装的jsonp"><a href="#方案3：jQuery封装的jsonp" class="headerlink" title="方案3：jQuery封装的jsonp"></a>方案3：jQuery封装的jsonp</h4><ul>
<li><p>牛人们写的jQuery库，已经对jsonp进行了封装。大家可以直接拿来用。</p>
</li>
<li><p>用之前需要引入jQuery库的js文件。（这里的jQuery库咱们就不再封装了，咱们直接用jQuery写好的jsonp方式。）</p>
</li>
<li><p>jQuery中的jsonp其实就是我们方案2的高度封装，底层原理完全相同。</p>
</li>
<li><p>核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type : <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url : <span class="string">&quot;跨域的url&quot;</span>,</span><br><span class="line">    dataType : <span class="string">&quot;jsonp&quot;</span>, <span class="comment">// 指定数据类型</span></span><br><span class="line">    jsonp : <span class="string">&quot;fun&quot;</span>, <span class="comment">// 指定参数名（不设置的时候，默认是：&quot;callback&quot;）</span></span><br><span class="line">    jsonpCallback : <span class="string">&quot;sayHello&quot;</span> <span class="comment">// 指定回调函数的名字</span></span><br><span class="line">							   <span class="comment">// （不设置的时候，jQuery会自动生成一个随机的回调函数，</span></span><br><span class="line">    						   <span class="comment">//并且这个回调函数还会自动调用success的回调函数。）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方案4：代理机制（httpclient）"><a href="#方案4：代理机制（httpclient）" class="headerlink" title="方案4：代理机制（httpclient）"></a>方案4：代理机制（httpclient）</h4><img src="/2022/06/07/Ajax/Ajax%E7%AC%94%E8%AE%B0/Ajax%E7%AC%94%E8%AE%B0/AJAX%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6.png" class="" title="AJAX跨域解决方案之代理机制">

<ul>
<li>使用Java程序怎么去发送get/post请求呢？【GET和POST请求就是HTTP请求。】<ul>
<li>第一种方案：使用JDK内置的API（java.net.URL…..），这些API是可以发送HTTP请求的。</li>
<li>第二种方案：使用第三方的开源组件，比如：apache的httpclient组件。（httpclient组件是开源免费的，可以直接用）</li>
</ul>
</li>
<li>在java程序中，使用httpclient组件可以发送http请求。<ul>
<li>对于httpclient组件的代码，大家目前可以不进行深入的研究，可以从网上直接搜。然后粘贴过来，改一改，看看能不能完成发送get和post请求。</li>
<li>使用httpclient组件，需要先将这个组件相关的jar包引入到项目当中。</li>
</ul>
</li>
</ul>
<h4 id="方案5：nginx反向代理"><a href="#方案5：nginx反向代理" class="headerlink" title="方案5：nginx反向代理"></a>方案5：nginx反向代理</h4><ul>
<li>nginx反向代理中也是使用了这种代理机制来完成AJAX的跨域，实现起来非常简单，只要修改一个nginx的配置即可。以后大家学习nginx之后再说吧。！！！！</li>
</ul>
<h2 id="AJAX实现搜索联想-自动补全"><a href="#AJAX实现搜索联想-自动补全" class="headerlink" title="AJAX实现搜索联想 自动补全"></a>AJAX实现搜索联想 自动补全</h2><ul>
<li>什么是搜索联想？自动补全？<ul>
<li>百度是一个很典型的代表。在百度的搜索框中输入相关信息的时候，会有搜索联想以及自动补全。</li>
<li>搜索联想和自动补全：实际上是为了方便用户的使用。让用户的体验更好。</li>
<li>搜索联想：当用户输入一些单词之后，自动联想出用户要搜索的信息，给一个提示。</li>
<li>自动补全：当联想出一些内容之后，用户点击某个联想的单词，然后将这个单词自动补全到搜索框当中。</li>
<li>搜索联想和自动补全功能，因为是页面局部刷新效果，所以需要使用ajax请求来完成。</li>
</ul>
</li>
<li>搜索联想，自动补全功能的核心实现原理？<ul>
<li>当键盘事件发生之后，比如：keyup：键弹起事件。</li>
<li>发送ajax请求，请求中提交用户输入的搜索内容，例如：北京（发送ajax请求，携带“北京”两个字）</li>
<li>后端接收到ajax请求，接收到“北京”两个字，执行select语句进行模糊查询。返回查询结果。</li>
<li>将查询结果封装成json格式的字符串，将json格式的字符串响应到前端。</li>
<li>前端接收到json格式的字符串之后，解析这个json字符串，动态展示页面。</li>
</ul>
</li>
</ul>
<h2 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h2><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100 Continue</td>
<td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td>
</tr>
<tr>
<td align="left">101 Switching Protocols</td>
<td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>
</tr>
</tbody></table>
<h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200 OK</td>
<td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td>
</tr>
<tr>
<td align="left">201 Created</td>
<td align="left">请求被创建完成，同时新的资源被创建。</td>
</tr>
<tr>
<td align="left">202 Accepted</td>
<td align="left">供处理的请求已被接受，但是处理未完成。</td>
</tr>
<tr>
<td align="left">203 Non-authoritative Information</td>
<td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td>
</tr>
<tr>
<td align="left">204 No Content</td>
<td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
</tr>
<tr>
<td align="left">205 Reset Content</td>
<td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>
</tr>
<tr>
<td align="left">206 Partial Content</td>
<td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td>
</tr>
</tbody></table>
<h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">300 Multiple Choices</td>
<td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>
</tr>
<tr>
<td align="left">301 Moved Permanently</td>
<td align="left">所请求的页面已经转移至新的url。</td>
</tr>
<tr>
<td align="left">302 Found</td>
<td align="left">所请求的页面已经临时转移至新的url。</td>
</tr>
<tr>
<td align="left">303 See Other</td>
<td align="left">所请求的页面可在别的url下被找到。</td>
</tr>
<tr>
<td align="left">304 Not Modified</td>
<td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>
</tr>
<tr>
<td align="left">305 Use Proxy</td>
<td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td>
</tr>
<tr>
<td align="left">306 <em>Unused</em></td>
<td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td>
</tr>
<tr>
<td align="left">307 Temporary Redirect</td>
<td align="left">被请求的页面已经临时移至新的url。</td>
</tr>
</tbody></table>
<h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">400 Bad Request</td>
<td align="left">服务器未能理解请求。</td>
</tr>
<tr>
<td align="left">401 Unauthorized</td>
<td align="left">被请求的页面需要用户名和密码。</td>
</tr>
<tr>
<td align="left">402 Payment Required</td>
<td align="left">此代码尚无法使用。</td>
</tr>
<tr>
<td align="left">403 Forbidden</td>
<td align="left">对被请求页面的访问被禁止。</td>
</tr>
<tr>
<td align="left">404 Not Found</td>
<td align="left">服务器无法找到被请求的页面。</td>
</tr>
<tr>
<td align="left">405 Method Not Allowed</td>
<td align="left">请求中指定的方法不被允许。</td>
</tr>
<tr>
<td align="left">406 Not Acceptable</td>
<td align="left">服务器生成的响应无法被客户端所接受。</td>
</tr>
<tr>
<td align="left">407 Proxy Authentication Required</td>
<td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>
</tr>
<tr>
<td align="left">408 Request Timeout</td>
<td align="left">请求超出了服务器的等待时间。</td>
</tr>
<tr>
<td align="left">409 Conflict</td>
<td align="left">由于冲突，请求无法被完成。</td>
</tr>
<tr>
<td align="left">410 Gone</td>
<td align="left">被请求的页面不可用。</td>
</tr>
<tr>
<td align="left">411 Length Required</td>
<td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">412 Precondition Failed</td>
<td align="left">请求中的前提条件被服务器评估为失败。</td>
</tr>
<tr>
<td align="left">413 Request Entity Too Large</td>
<td align="left">由于所请求的实体的太大，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">414 Request-url Too Long</td>
<td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td>
</tr>
<tr>
<td align="left">415 Unsupported Media Type</td>
<td align="left">由于媒介类型不被支持，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">服务器不能满足客户在请求中指定的Range头。</td>
</tr>
<tr>
<td align="left">417 Expectation Failed</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">500 Internal Server Error</td>
<td align="left">请求未完成。服务器遇到不可预知的情况。</td>
</tr>
<tr>
<td align="left">501 Not Implemented</td>
<td align="left">请求未完成。服务器不支持所请求的功能。</td>
</tr>
<tr>
<td align="left">502 Bad Gateway</td>
<td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td>
</tr>
<tr>
<td align="left">503 Service Unavailable</td>
<td align="left">请求未完成。服务器临时过载或当机。</td>
</tr>
<tr>
<td align="left">504 Gateway Timeout</td>
<td align="left">网关超时。</td>
</tr>
<tr>
<td align="left">505 HTTP Version Not Supported</td>
<td align="left">服务器不支持请求中指明的HTTP协议版本。cd</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-code</title>
    <url>/2022/08/11/Mybatis/Mybatis-code/Mybatis-code/</url>
    <content><![CDATA[<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>Service.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="comment">//规定的唱歌的业务功能</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SuperStarLiu.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   目标对象:刘德华,实现业务接口中的功能,进行唱歌表演</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperStarLiu</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是刘德华,我正在表演唱歌............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SuperStarZhou.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperStarZhou</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是周润发,我正在唱歌.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Agent.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  助理:代理对象,完成除了唱歌主业务之外的其它业务:时间,场地预订,结算费用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类中的成员变量设计为接口</span></span><br><span class="line">    <span class="keyword">public</span> Service target;  <span class="comment">//目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入目标对象,方法的参数设计为接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Service target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;预订时间..........&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;预订场地..........&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//切记切记:业务功能必须由目标对象亲自实现</span></span><br><span class="line"><span class="comment">//        SuperStarLiu liu = new SuperStarLiu();</span></span><br><span class="line"><span class="comment">//        liu.sing();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        SuperStarZhou zhou = new SuperStarZhou();</span></span><br><span class="line"><span class="comment">//        zhou.sing();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//面向接口编程:调用时,接口指向实现类</span></span><br><span class="line">        target.sing();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结算费用..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MyTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.Agent;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.SuperStarLiu;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.SuperStarZhou;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//测试功能</span></span><br><span class="line"><span class="comment">//        SuperStarLiu liu = new SuperStarLiu();</span></span><br><span class="line"><span class="comment">//        liu.sing();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Agent agent = new Agent();</span></span><br><span class="line"><span class="comment">//        agent.sing();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//有接口和实现类,必须使用接口指向实现类(规范)</span></span><br><span class="line"><span class="comment">//        Service agent = new Agent();</span></span><br><span class="line"><span class="comment">//        agent.sing();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgent1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Service agent = <span class="keyword">new</span> Agent(<span class="keyword">new</span> SuperStarZhou());</span><br><span class="line">        agent.sing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;哈哈哈哈.........&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        service.sing(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>业务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">show</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>目标对象1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  目标对象:刘德华</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperStarLiu</span>  <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是刘德华,我正在表演唱歌........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刘德华的show.........&quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;liu&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方法不能被代理(不以增强功能)，此方法不在业务接口之中，好比刘德华接私活，代理没法管</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;one............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>目标对象2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  目标对象:周润发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperStarZhou</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是周润发,我正在表演唱歌........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;周润发的show.........&quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zhou&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ProxyFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">	Service target;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Service target)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.target=target;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回动态代理对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getAgent</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span>  Proxy.newProxyInstance(</span><br><span class="line">				<span class="comment">//ClassLoader loader,类加载器，完成目标对象的加载</span></span><br><span class="line">				target.getClass().getClassLoader(),</span><br><span class="line">				<span class="comment">//Class&lt;?&gt;[] interfaces,目标对象实现的所有接口</span></span><br><span class="line">				target.getClass().getInterfaces(),</span><br><span class="line">				<span class="comment">//InvocationHandler h,实现代理功能的接口，这里传入的是匿名内部实现</span></span><br><span class="line">				<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">							//创建代理对象</span></span></span><br><span class="line"><span class="params"><span class="function">							Object proxy,</span></span></span><br><span class="line"><span class="params"><span class="function">							//method就是目标方法sing（），show（）</span></span></span><br><span class="line"><span class="params"><span class="function">							Method method,</span></span></span><br><span class="line"><span class="params"><span class="function">							//目标方法的参数</span></span></span><br><span class="line"><span class="params"><span class="function">							Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">						<span class="comment">//代理功能</span></span><br><span class="line">						System.out.println(<span class="string">&quot;预定时间.....&quot;</span>);</span><br><span class="line">						<span class="comment">//代理功能</span></span><br><span class="line">						System.out.println(<span class="string">&quot;预定场地....&quot;</span>);</span><br><span class="line">						<span class="comment">//主业务功能的实现</span></span><br><span class="line">						Object obj = method.invoke(target, args);</span><br><span class="line">						<span class="comment">//代理功能</span></span><br><span class="line">						System.out.println(<span class="string">&quot;结算费用....&quot;</span>);</span><br><span class="line">						<span class="keyword">return</span> obj;<span class="comment">//切记这个是目标方法的返回值</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.proxy.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.Service;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.SuperStarLiu;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.SuperStarZhou;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDK</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> SuperStarLiu());</span><br><span class="line">		<span class="comment">//底层还是代理类实现了接口  （A）B要么是B是A的父类进行向下转型，要么是B实现了A的接口</span></span><br><span class="line">		Service agent = (Service) factory.getAgent();</span><br><span class="line">		agent.sing();</span><br><span class="line">		agent.show(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDK1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> SuperStarZhou());</span><br><span class="line">		Service agent = (Service) proxyFactory.getAgent();</span><br><span class="line">		agent.show(<span class="number">66</span>);</span><br><span class="line">		<span class="comment">//class com.sun.proxy.$Proxy2</span></span><br><span class="line">		System.out.println(agent.getClass());</span><br><span class="line">		<span class="comment">//class com.bjpowernode.service.impl.SuperStarZhou</span></span><br><span class="line">		Service zhou=<span class="keyword">new</span> SuperStarZhou();</span><br><span class="line">		System.out.println(zhou.getClass());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Mybaits"><a href="#Mybaits" class="headerlink" title="Mybaits"></a>Mybaits</h1><h2 id="project1-（p24-p52）"><a href="#project1-（p24-p52）" class="headerlink" title="project1-（p24-p52）"></a>project1-（p24-p52）</h2><img src="/2022/08/11/Mybatis/Mybatis-code/Mybatis-code/image-20220817174522396.png" class="" title="image-20220817174522396">

<h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-001_student<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加MyBatis框架的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Mysql依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加资源文件的指定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><p>com.bjpowernode.pojo.Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String email, Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, String email, Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取属性文件(jdbc.properties)</span></span><br><span class="line"><span class="comment">    属性:</span></span><br><span class="line"><span class="comment">       resources:从resources目录下找指定名称的文件加载</span></span><br><span class="line"><span class="comment">       url:使用绝对路径加载属性文件</span></span><br><span class="line"><span class="comment">           D:\course\16.MyBatis\04_project\mybatisall\mybatis_001_student\src\main\resources\jdbc.properties</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置日志输出底层执行的代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册实体类的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个实体类别名注册--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;typeAlias type=&quot;com.bjpowernode.pojo.Student&quot; alias=&quot;student&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量注册别名 别名是类名的驼峰命名法（规范）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库的环境变量(数据库连接配置)</span></span><br><span class="line"><span class="comment">       default:使用下面的environment标签的id属性进行指定配置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开发时在公司使用的数据库配置</span></span><br><span class="line"><span class="comment">          id:就是提供给environments的default属性使用</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务管理器</span></span><br><span class="line"><span class="comment">               type:指定事务管理的方式</span></span><br><span class="line"><span class="comment">                  JDBC:事务的控制交给程序员处理</span></span><br><span class="line"><span class="comment">                  MANAGED:由容器(Spring)来管理事务</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源</span></span><br><span class="line"><span class="comment">              type:指定不同的配置方式</span></span><br><span class="line"><span class="comment">                 JNDI:java命名目录接口,在服务器端进行数据库连接池的管理</span></span><br><span class="line"><span class="comment">                 POOLED:使用数据库连接池</span></span><br><span class="line"><span class="comment">                 UNPOLLED:不使用数据库连接池</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml文件</span></span><br><span class="line"><span class="comment">      resource:从resources目录下找指定名称的文件注册</span></span><br><span class="line"><span class="comment">      url:使用绝对路径注册</span></span><br><span class="line"><span class="comment">      class:动态代理方式下的注册</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  mapper:是整个文件的大标签,用来开始和结束xml文件</span></span><br><span class="line"><span class="comment">  属性:</span></span><br><span class="line"><span class="comment">     namespace:指定命名空间(相当于包名),用来区分不同mapper.xml文件中相同的id属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;zar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      完成查询全部学生的功能</span></span><br><span class="line"><span class="comment">      List&lt;Student&gt; getALL();</span></span><br><span class="line"><span class="comment">         resultType:指定查询返回的结果集的类型,如果是集合,则必须是泛型的类型</span></span><br><span class="line"><span class="comment">         parameterType:如果有参数,则通过它来指定参数的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> &gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按主键id查询学生信息</span></span><br><span class="line"><span class="comment">       Student getById(Integer id)</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按学生名称模糊查询</span></span><br><span class="line"><span class="comment">        List&lt;Student&gt; getByName(String name);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">        where name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        增加学生</span></span><br><span class="line"><span class="comment">        int insert（Student stu）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        实体类：</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">        private String name;</span></span><br><span class="line"><span class="comment">        private String email;</span></span><br><span class="line"><span class="comment">        private String age;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        insert into student (name,email ,age) values(#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     按主键删除学生</span></span><br><span class="line"><span class="comment">     int delete(Integer id);</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">        delete from student where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      更新学生</span></span><br><span class="line"><span class="comment">      int update(Student stu);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        update student set name=#&#123;name&#125;,email=#&#123;email&#125;,age=#&#123;age&#125;</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><h4 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h4><p>com.bjpowernode.test.MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//使用文件流读取核心配置文件SqlMapConfig.xml</span></span><br><span class="line">		InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">		<span class="comment">//创建SqlSessionFactory工厂</span></span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		<span class="comment">//取出sqlSession的对象</span></span><br><span class="line">		sqlSession = factory.openSession();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//关闭sqlSession</span></span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//完成查询操作</span></span><br><span class="line">		List&lt;Student&gt; list = sqlSession.selectList(<span class="string">&quot;zar.getAll&quot;</span>);</span><br><span class="line">		list.forEach(student -&gt; System.out.println(student));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//按主键查学生</span></span><br><span class="line">		Student stu=sqlSession.selectOne(<span class="string">&quot;zar.getById&quot;</span>,<span class="number">1</span>);</span><br><span class="line">		System.out.println(stu);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetByName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//4.调用方法</span></span><br><span class="line">		List&lt;Student&gt; list=sqlSession.selectList(<span class="string">&quot;zar.getByName&quot;</span>,<span class="string">&quot;张&quot;</span>);</span><br><span class="line">		list.forEach(student -&gt; System.out.println(student));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//4.调用方法</span></span><br><span class="line">		<span class="keyword">int</span> num=sqlSession.insert(<span class="string">&quot;zar.insert&quot;</span>,<span class="keyword">new</span> Student(<span class="string">&quot;haha666&quot;</span>,<span class="string">&quot;haha@126.com&quot;</span>,<span class="number">23</span>));</span><br><span class="line">		<span class="comment">//切记切记：在所有的增删改后必须手工提交事务！！</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//4.调用方法</span></span><br><span class="line">		<span class="keyword">int</span> num = sqlSession.delete(<span class="string">&quot;zar.delete&quot;</span>,<span class="number">1</span>);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		<span class="comment">//切记切记切记:在所有的增删改后必须手工提交事务!!!</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//4.调用方法</span></span><br><span class="line">		<span class="keyword">int</span> num = sqlSession.delete(<span class="string">&quot;zar.update&quot;</span>,<span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;hehe@126.com&quot;</span>,<span class="number">30</span>));</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		<span class="comment">//切记切记切记:在所有的增删改后必须手工提交事务!!!</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="project2-（p53-p79）"><a href="#project2-（p53-p79）" class="headerlink" title="project2-（p53-p79）"></a>project2-（p53-p79）</h2><img src="/2022/08/11/Mybatis/Mybatis-code/Mybatis-code/image-20220821204431221.png" class="" title="image-20220821204431221">

<h3 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_002_users<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定资源文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-2"><a href="#main-2" class="headerlink" title="main"></a>main</h3><h4 id="java-2"><a href="#java-2" class="headerlink" title="java"></a>java</h4><h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h5><p>UserMapper(interface)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   数据访问层的接口，规定数据库中可进行的各种操作</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//查询全部用户信息</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//根据用户主键查用户</span></span><br><span class="line">	<span class="function">Users <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	<span class="comment">//根据用户名模糊查询用户</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">	<span class="comment">//优化后的模糊查询</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByNameGood</span><span class="params">(String name)</span></span>;</span><br><span class="line">	<span class="comment">//用户的更新</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line">	<span class="comment">//增加用户</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">	<span class="comment">//根据主键删除用户</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模糊用户名和地址查询</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByNameOrAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@Param(&quot;columnName&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">			String columnName,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@Param(&quot;columnValue&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">			String columnValue)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserMapper(xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //查询全部用户信息</span></span><br><span class="line"><span class="comment">	    List&lt;Users&gt; getAll();</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通过主键查找用户</span></span><br><span class="line"><span class="comment">         Users getById(Integer id);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--根据用户名模糊查询用户</span></span><br><span class="line"><span class="comment">            List&lt;Users&gt; getByName(String name);</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where username like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--用户的更新</span></span><br><span class="line"><span class="comment">            int update(Users users);</span></span><br><span class="line"><span class="comment">            private Integer id;</span></span><br><span class="line"><span class="comment">            private String userName;</span></span><br><span class="line"><span class="comment">            private Date birthday;</span></span><br><span class="line"><span class="comment">            private String sex;</span></span><br><span class="line"><span class="comment">            private String address;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            update users set username=#&#123;userName&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //增加用户</span></span><br><span class="line"><span class="comment">        int insert(Users users);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            select last_insert_id()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">            insert into users (username, birthday, sex, address) values (#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               //根据主键删除用户</span></span><br><span class="line"><span class="comment">               int delete(integer id);</span></span><br><span class="line"><span class="comment">        --&gt;</span>                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">               delete from users</span><br><span class="line">               where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //优化后的模糊查询</span></span><br><span class="line"><span class="comment">        List&lt;Users&gt; getByNameGood(String name);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameGood&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">          select id,username,birthday,sex,address</span><br><span class="line">          from users</span><br><span class="line">          where username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //模糊用户名和地址查询</span></span><br><span class="line"><span class="comment">        //如果参数超过一个，则parameterType不写</span></span><br><span class="line"><span class="comment">        	List&lt;Users&gt; getByNameOrAddress(</span></span><br><span class="line"><span class="comment">        			@Param(&quot;columnName&quot;)</span></span><br><span class="line"><span class="comment">        			String columnName,</span></span><br><span class="line"><span class="comment">        			@Param(&quot;columnValue&quot;)</span></span><br><span class="line"><span class="comment">        			String columnValue);</span></span><br><span class="line"><span class="comment">        			--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameOrAddress&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where $&#123;columnName&#125; like concat(&#x27;%&#x27;,#&#123;columnValue&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h5><p>Users.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(Integer id, String userName, Date birthday, String sex, String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(String userName, Date birthday, String sex, String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">				<span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="resources-1"><a href="#resources-1" class="headerlink" title="resources"></a>resources</h4><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取jdbc.properties属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册实体类的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置环境变量--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- private String driver;</span></span><br><span class="line"><span class="comment">                    private String url;</span></span><br><span class="line"><span class="comment">                    private String username;</span></span><br><span class="line"><span class="comment">                    private String password;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;mapper class=&quot;com.bjpowernode.mapper.UsersMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><h4 id="java-3"><a href="#java-3" class="headerlink" title="java"></a>java</h4><p>Mytest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.UsersMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	SqlSession sqlSession;</span><br><span class="line">	<span class="comment">//动态代理对象</span></span><br><span class="line">	UsersMapper uMapper;</span><br><span class="line">	<span class="comment">//日期的格式化刷子</span></span><br><span class="line">	SimpleDateFormat sf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//1.读取核心配置文件</span></span><br><span class="line">		InputStream in= Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">		<span class="comment">//2.创建工厂对象</span></span><br><span class="line">		SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		<span class="comment">//3.取出sqlSession</span></span><br><span class="line">		sqlSession = factory.openSession();</span><br><span class="line">		<span class="comment">//4.取出动态代理的对象，完成接口中方法的调用，实则是调用xml文件中标签中的功能</span></span><br><span class="line">		uMapper = sqlSession.getMapper(UsersMapper.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(uMapper.getClass());</span><br><span class="line">		<span class="comment">//就是在调用接口的方法，mybatis框架已经为我们把功能代理出来了</span></span><br><span class="line">		List&lt;Users&gt; list = uMapper.getAll();</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users user=<span class="keyword">new</span> Users(<span class="number">7</span>,<span class="string">&quot;haha&quot;</span>,sf.parse(<span class="string">&quot;2000-01-01&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;北京大兴亦庄66&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> num=uMapper.update(user);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		<span class="comment">//切记手工提交事务</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testById</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Users u = uMapper.getById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(u);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByName(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByNameOrAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByNameOrAddress(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByNameGood</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByNameGood(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users u=<span class="keyword">new</span> Users(<span class="string">&quot;lala66&quot;</span>,sf.parse(<span class="string">&quot;2001-01-01&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;大兴&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.insert(u);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.delete(<span class="number">1</span>);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">		UUID uuid=UUID.randomUUID();</span><br><span class="line">		System.out.println(uuid.toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>).substring(<span class="number">20</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="project3-（p80-p99）"><a href="#project3-（p80-p99）" class="headerlink" title="project3-（p80-p99）"></a>project3-（p80-p99）</h2><img src="/2022/08/11/Mybatis/Mybatis-code/Mybatis-code/image-20220824111839849.png" class="" title="image-20220824111839849">

<h3 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_003_dynamicsql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定资源文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-3"><a href="#main-3" class="headerlink" title="main"></a>main</h3><h4 id="java-4"><a href="#java-4" class="headerlink" title="java"></a>java</h4><h5 id="mapper-1"><a href="#mapper-1" class="headerlink" title="mapper"></a>mapper</h5><p>UsersMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ClientInfoStatus;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   数据访问层的接口，规定数据库中可进行的各种操作</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//查询全部用户信息</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据用户主键查用户</span></span><br><span class="line">	<span class="function">Users <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据用户名模糊查询用户</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//优化后的模糊查询</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByNameGood</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//用户的更新</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//增加用户</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据主键删除用户</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模糊用户名和地址查询</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByNameOrAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@Param(&quot;columnName&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">					String columnName,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@Param(&quot;columnValue&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">					String columnValue)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//按指定的条件进行多条件查询</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByCondition</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//有选择的更新</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">updateBySet</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查询多个指定id的用户信息</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByIds</span><span class="params">(Integer[] arr)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//批量删除</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(Integer []arr)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//批量增加</span></span><br><span class="line">	 <span class="function"><span class="keyword">int</span>  <span class="title">insertBatch</span><span class="params">(List&lt;Users&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">	 <span class="comment">//查询指定日期范围内的用户</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByBirthday</span><span class="params">(Date begin,Date end)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//入参是map</span></span><br><span class="line">	<span class="function">List&lt;Users&gt; <span class="title">getByMap</span><span class="params">(Map map)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回值是map(一行）</span></span><br><span class="line">	<span class="function">Map <span class="title">getReturnMap</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回多行的map</span></span><br><span class="line">	<span class="function">List&lt;Map&gt; <span class="title">getMulMap</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UsersMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--定义代码片断--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span></span><br><span class="line">            id,username,birthday,sex,address</span><br><span class="line">        <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //查询全部用户信息</span></span><br><span class="line"><span class="comment">	    List&lt;Users&gt; getAll();</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通过主键查找用户</span></span><br><span class="line"><span class="comment">         Users getById(Integer id);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--根据用户名模糊查询用户</span></span><br><span class="line"><span class="comment">            List&lt;Users&gt; getByName(String name);</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where username like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--用户的更新</span></span><br><span class="line"><span class="comment">            int update(Users users);</span></span><br><span class="line"><span class="comment">            private Integer id;</span></span><br><span class="line"><span class="comment">            private String userName;</span></span><br><span class="line"><span class="comment">            private Date birthday;</span></span><br><span class="line"><span class="comment">            private String sex;</span></span><br><span class="line"><span class="comment">            private String address;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">            update users set username=#&#123;userName&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //增加用户</span></span><br><span class="line"><span class="comment">        int insert(Users users);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            select last_insert_id()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">            insert into users (username, birthday, sex, address) values (#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               //根据主键删除用户</span></span><br><span class="line"><span class="comment">               int delete(integer id);</span></span><br><span class="line"><span class="comment">        --&gt;</span>                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">               delete from users</span><br><span class="line">               where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //优化后的模糊查询</span></span><br><span class="line"><span class="comment">        List&lt;Users&gt; getByNameGood(String name);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameGood&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">          select id,username,birthday,sex,address</span><br><span class="line">          from users</span><br><span class="line">          where username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //模糊用户名和地址查询</span></span><br><span class="line"><span class="comment">        //如果参数超过一个，则parameterType不写</span></span><br><span class="line"><span class="comment">        	List&lt;Users&gt; getByNameOrAddress(</span></span><br><span class="line"><span class="comment">        			@Param(&quot;columnName&quot;)</span></span><br><span class="line"><span class="comment">        			String columnName,</span></span><br><span class="line"><span class="comment">        			@Param(&quot;columnValue&quot;)</span></span><br><span class="line"><span class="comment">        			String columnValue);</span></span><br><span class="line"><span class="comment">        			--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameOrAddress&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">            select id,username,birthday,sex,address</span><br><span class="line">            from users</span><br><span class="line">            where $&#123;columnName&#125; like concat(&#x27;%&#x27;,#&#123;columnValue&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //按指定的条件进行多条件查询</span></span><br><span class="line"><span class="comment">        List&lt;Users&gt; getByCondition(Users users);</span></span><br><span class="line"><span class="comment">        根据实体类中的成员变量是否有值来决定是否添加条件</span></span><br><span class="line"><span class="comment">        private Integer id; null</span></span><br><span class="line"><span class="comment">        private String userName; null</span></span><br><span class="line"><span class="comment">        private Date birthday; null</span></span><br><span class="line"><span class="comment">        private String sex; null</span></span><br><span class="line"><span class="comment">        private String address; null</span></span><br><span class="line"><span class="comment">        private int num 0</span></span><br><span class="line"><span class="comment">        private boolean flag  false</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName !=null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and username like concat(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">                and birthday = #&#123;birthday&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and sex =#&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and address like concat(&#x27;%&#x27;,#&#123;address&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //有选择的更新</span></span><br><span class="line"><span class="comment">    int updateBySet(Users users);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBySet&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        update users</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName !=null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                username = #&#123;userName&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">                birthday = #&#123;birthday&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                sex= #&#123;sex&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                address = #&#123;address&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    //查询多个指定id的用户信息</span></span><br><span class="line"><span class="comment">	List&lt;Users&gt; getByIds(Integer []arr);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--//批量删除</span></span><br><span class="line"><span class="comment">	int  deleteBatch(Integer []arr);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> &gt;</span></span><br><span class="line">        delete from users</span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span>  <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //批量增加</span></span><br><span class="line"><span class="comment">	 int insertBatch(List&lt;Users&gt; list);</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">        insert into users(username,birthday,sex,address) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;u&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;u.userName&#125;,#&#123;u.birthday&#125;,#&#123;u.sex&#125;,#&#123;u.address&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //查询指定日期范围内的用户</span></span><br><span class="line"><span class="comment">	List&lt;Users&gt; getByBirthday(Date begin,Date end);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBirthday&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        where birthday between #&#123;arg0&#125; and #&#123;arg1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //入参是map</span></span><br><span class="line"><span class="comment">	List&lt;Users&gt; getByMap(Map map);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        where birthday between #&#123;birthdayBegin&#125; and #&#123;birthdayEnd&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //返回值是map(一行）</span></span><br><span class="line"><span class="comment">    Map getReturnMap(Integer id);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getReturnMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select username,address</span><br><span class="line">        from users</span><br><span class="line">        where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //返回多行的map</span></span><br><span class="line"><span class="comment">	List&lt;Map&gt; getMulMap();</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMulMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">         select username,address</span><br><span class="line">         from users</span><br><span class="line">     <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="pojo-1"><a href="#pojo-1" class="headerlink" title="pojo"></a>pojo</h5><p>Users</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(Integer id, String userName, Date birthday, String sex, String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(String userName, Date birthday, String sex, String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">				<span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="resources-2"><a href="#resources-2" class="headerlink" title="resources"></a>resources</h4><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取jdbc.properties属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册实体类的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置环境变量--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- private String driver;</span></span><br><span class="line"><span class="comment">                    private String url;</span></span><br><span class="line"><span class="comment">                    private String username;</span></span><br><span class="line"><span class="comment">                    private String password;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;mapper class=&quot;com.bjpowernode.mapper.UsersMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h3><h4 id="java-5"><a href="#java-5" class="headerlink" title="java"></a>java</h4><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.UsersMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	SqlSession sqlSession;</span><br><span class="line">	<span class="comment">//动态代理对象</span></span><br><span class="line">	UsersMapper uMapper;</span><br><span class="line">	<span class="comment">//日期的格式化刷子</span></span><br><span class="line">	SimpleDateFormat sf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSqlSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//1.读取核心配置文件</span></span><br><span class="line">		InputStream in= Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">		<span class="comment">//2.创建工厂对象</span></span><br><span class="line">		SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		<span class="comment">//3.取出sqlSession</span></span><br><span class="line">		sqlSession = factory.openSession();</span><br><span class="line">		<span class="comment">//4.取出动态代理的对象，完成接口中方法的调用，实则是调用xml文件中标签中的功能</span></span><br><span class="line">		uMapper = sqlSession.getMapper(UsersMapper.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println(uMapper.getClass());</span><br><span class="line">		<span class="comment">//就是在调用接口的方法，mybatis框架已经为我们把功能代理出来了</span></span><br><span class="line">		List&lt;Users&gt; list = uMapper.getAll();</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users user=<span class="keyword">new</span> Users(<span class="number">7</span>,<span class="string">&quot;haha&quot;</span>,sf.parse(<span class="string">&quot;2000-01-01&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;北京大兴亦庄66&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> num=uMapper.update(user);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		<span class="comment">//切记手工提交事务</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testById</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Users u = uMapper.getById(<span class="number">1</span>);</span><br><span class="line">		System.out.println(u);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByName(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByNameOrAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByNameOrAddress(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testByNameGood</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByNameGood(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users u=<span class="keyword">new</span> Users(<span class="string">&quot;lala66&quot;</span>,sf.parse(<span class="string">&quot;2001-01-01&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;大兴&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.insert(u);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.delete(<span class="number">1</span>);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">		UUID uuid=UUID.randomUUID();</span><br><span class="line">		System.out.println(uuid.toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>).substring(<span class="number">20</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetByCondition</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users u=<span class="keyword">new</span> Users();</span><br><span class="line">		u.setSex(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">		u.setUserName(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">		u.setAddress(<span class="string">&quot;重庆市&quot;</span>);</span><br><span class="line">		u.setBirthday(sf.parse(<span class="string">&quot;2002-01-19&quot;</span>));</span><br><span class="line">		List&lt;Users&gt; list=uMapper.getByCondition(u);</span><br><span class="line">		list.forEach(uu-&gt; System.out.println(uu));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateSet</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users u=<span class="keyword">new</span> Users();</span><br><span class="line">		u.setId(<span class="number">28</span>);</span><br><span class="line">		u.setUserName(<span class="string">&quot;lala6&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.updateBySet(u);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">		<span class="comment">//切记切记切记:手工提交事务</span></span><br><span class="line">		sqlSession.commit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetByIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Integer []array=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByIds(array);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Integer []array=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> num = uMapper.deleteBatch(array);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line">		System.out.println(num);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertBatch</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Users u1=<span class="keyword">new</span> Users(<span class="string">&quot;aa&quot;</span>,sf.parse(<span class="string">&quot;2002-05-05&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;朝阳a&quot;</span>);</span><br><span class="line">		Users u2=<span class="keyword">new</span> Users(<span class="string">&quot;bb&quot;</span>,sf.parse(<span class="string">&quot;2002-05-05&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;朝阳b&quot;</span>);</span><br><span class="line">		Users u3=<span class="keyword">new</span> Users(<span class="string">&quot;cc&quot;</span>,sf.parse(<span class="string">&quot;2002-05-05&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;朝阳c&quot;</span>);</span><br><span class="line">		Users u4=<span class="keyword">new</span> Users(<span class="string">&quot;dd&quot;</span>,sf.parse(<span class="string">&quot;2002-05-05&quot;</span>),<span class="string">&quot;2&quot;</span>,<span class="string">&quot;朝阳d&quot;</span>);</span><br><span class="line">		List&lt;Users&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(u1);</span><br><span class="line">		list.add(u2);</span><br><span class="line">		list.add(u3);</span><br><span class="line">		list.add(u4);</span><br><span class="line">		<span class="keyword">int</span> num=uMapper.insertBatch(list);</span><br><span class="line">		sqlSession.commit();</span><br><span class="line">		System.out.println(num);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetBirthday</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Date begin=sf.parse(<span class="string">&quot;1999-01-01&quot;</span>);</span><br><span class="line">		Date end=sf.parse(<span class="string">&quot;1999-12-31&quot;</span>);</span><br><span class="line">		List&lt;Users&gt; list = uMapper.getByBirthday(begin, end);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetByMap</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		Date begin=sf.parse(<span class="string">&quot;1999-01-01&quot;</span>);</span><br><span class="line">		Date end=sf.parse(<span class="string">&quot;1999-12-31&quot;</span>);</span><br><span class="line">		Map map=<span class="keyword">new</span> HashMap();</span><br><span class="line">		map.put(<span class="string">&quot;birthdayBegin&quot;</span>,begin);</span><br><span class="line">		map.put(<span class="string">&quot;birthdayEnd&quot;</span>,end);</span><br><span class="line">		List&lt;Users&gt; list=uMapper.getByMap(map);</span><br><span class="line">		list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnMapOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Map map = uMapper.getReturnMap(<span class="number">3</span>);</span><br><span class="line">		System.out.println(map);</span><br><span class="line">		<span class="comment">//map的key值就是查出的字段名</span></span><br><span class="line">		System.out.println(map.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnMapMul</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Map&gt; list  = uMapper.getMulMap();</span><br><span class="line">		list.forEach(map -&gt; System.out.println(map));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="project4"><a href="#project4" class="headerlink" title="project4"></a>project4</h2><img src="/2022/08/11/Mybatis/Mybatis-code/Mybatis-code/image-20220827204725263.png" class="" title="image-20220827204725263">

<h3 id="pom文件-3"><a href="#pom文件-3" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-004_onemany<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加MyBatis框架的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Mysql依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加资源文件的指定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-4"><a href="#main-4" class="headerlink" title="main"></a>main</h3><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><h5 id="mapper-2"><a href="#mapper-2" class="headerlink" title="mapper"></a>mapper</h5><h6 id="book"><a href="#book" class="headerlink" title="book"></a>book</h6><p>BookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//查询全部图书</span></span><br><span class="line">	<span class="function">List&lt;Book&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BookMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.BookMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //查询全部图书</span></span><br><span class="line"><span class="comment">	List&lt;Book&gt; getAll();</span></span><br><span class="line"><span class="comment">	实体类：</span></span><br><span class="line"><span class="comment">	private Integer id;</span></span><br><span class="line"><span class="comment">	private String name;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;select id=&quot;getAll&quot; resultType=&quot;book&quot;&gt;</span></span><br><span class="line"><span class="comment">        select  bookid id,bookname name</span></span><br><span class="line"><span class="comment">        from book</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用resultMap手工完成映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;bookmap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;bookid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;bookname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;bookmap&quot;</span>&gt;</span></span><br><span class="line">        select bookid,bookname</span><br><span class="line">        from book</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="Customer"><a href="#Customer" class="headerlink" title="Customer"></a>Customer</h6><p>CustomerMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//根据客户的id查询客户所有信息并同时查询该客户名下的所有订单</span></span><br><span class="line">	<span class="function">Customer <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CustomerMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.CustomerMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     //根据客户的id查询客户所有信息并同时查询该客户名下的所有订单</span></span><br><span class="line"><span class="comment">    Customer getById(Integer id);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customermap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多出来的绑定orderList</span></span><br><span class="line"><span class="comment">        Orders实体类：</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">    	private String orderNumber;</span></span><br><span class="line"><span class="comment">	    private Double orderPrice;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;ordersList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderPrice&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderPrice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customermap&quot;</span>&gt;</span></span><br><span class="line">        select c.id cid,name,age,o.id oid,orderNumber,orderPrice,customer_id</span><br><span class="line">        from customer c left join orders o on c.id=o.customer_id</span><br><span class="line">        where c.id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>OrderMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Orders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrdersMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//根据主键查询订单，并同时查询下此订单的客户信息</span></span><br><span class="line">	<span class="function">Orders <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>OrderMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //根据主键查询订单，并同时查询下此订单的客户信息</span></span><br><span class="line"><span class="comment">        Orders getById(Integer id);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        手工绑定数据</span></span><br><span class="line"><span class="comment">        实体类</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">        private String orderNumber;</span></span><br><span class="line"><span class="comment">        private Double orderPrice;</span></span><br><span class="line"><span class="comment">        //关联下此订单的客户信息，多方持有一方的对象</span></span><br><span class="line"><span class="comment">        private Customer customer;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ordersmap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderPrice&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderPrice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--customer_id是外键，没实质属性，也没定义，只用作条件判断及外键限制，不用绑--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多出来的绑定</span></span><br><span class="line"><span class="comment">        //customer表中的三个列</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">        private String name;</span></span><br><span class="line"><span class="comment">        private Integer age;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //该客户名下的所有订单的集合,一方持有多方的集合</span></span><br><span class="line"><span class="comment">        private List&lt;Orders&gt; ordersList;//不用管，只用绑定自身的属性，绑了就死循环了</span></span><br><span class="line"><span class="comment">	    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ordersmap&quot;</span>&gt;</span></span><br><span class="line">        select  o.id oid,orderNumber,orderPrice,customer_id,c.id cid,name,age</span><br><span class="line">        from orders o inner join customer c on o.customer_id = c.id</span><br><span class="line">        where o.id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="pojo-2"><a href="#pojo-2" class="headerlink" title="pojo"></a>pojo</h5><p>Book</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Customer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">	<span class="comment">//customer表中的三个列</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//该客户名下的所有订单的集合,一方持有多方的集合</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Orders&gt; ordersList;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">				<span class="string">&quot;, ordersList=&quot;</span> + ordersList +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title">getOrdersList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ordersList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrdersList</span><span class="params">(List&lt;Orders&gt; ordersList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ordersList = ordersList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Integer id, String name, Integer age, List&lt;Orders&gt; ordersList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.ordersList = ordersList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Orders</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String orderNumber;</span><br><span class="line">	<span class="keyword">private</span> Double orderPrice;</span><br><span class="line">	<span class="comment">//关联下此订单的客户信息，多方持有一方的对象</span></span><br><span class="line">	<span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Orders&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">				<span class="string">&quot;, orderNumber=&#x27;&quot;</span> + orderNumber + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, orderPrice=&quot;</span> + orderPrice +</span><br><span class="line">				<span class="string">&quot;, customer=&quot;</span> + customer +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> orderNumber;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderNumber</span><span class="params">(String orderNumber)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.orderNumber = orderNumber;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">getOrderPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> orderPrice;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderPrice</span><span class="params">(Double orderPrice)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.orderPrice = orderPrice;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> customer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.customer = customer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(Integer id, String orderNumber, Double orderPrice, Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.orderNumber = orderNumber;</span><br><span class="line">		<span class="keyword">this</span>.orderPrice = orderPrice;</span><br><span class="line">		<span class="keyword">this</span>.customer = customer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="resources-3"><a href="#resources-3" class="headerlink" title="resources"></a>resources</h4><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取属性文件(jdbc.properties)</span></span><br><span class="line"><span class="comment">    属性:</span></span><br><span class="line"><span class="comment">       resources:从resources目录下找指定名称的文件加载</span></span><br><span class="line"><span class="comment">       url:使用绝对路径加载属性文件</span></span><br><span class="line"><span class="comment">           D:\course\16.MyBatis\04_project\mybatisall\mybatis_001_student\src\main\resources\jdbc.properties</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置日志输出底层执行的代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册实体类的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个实体类别名注册--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;typeAlias type=&quot;com.bjpowernode.pojo.tudent&quot; alias=&quot;student&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量注册别名 别名是类名的驼峰命名法（规范）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库的环境变量(数据库连接配置)</span></span><br><span class="line"><span class="comment">       default:使用下面的environment标签的id属性进行指定配置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开发时在公司使用的数据库配置</span></span><br><span class="line"><span class="comment">          id:就是提供给environments的default属性使用</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务管理器</span></span><br><span class="line"><span class="comment">               type:指定事务管理的方式</span></span><br><span class="line"><span class="comment">                  JDBC:事务的控制交给程序员处理</span></span><br><span class="line"><span class="comment">                  MANAGED:由容器(Spring)来管理事务</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源</span></span><br><span class="line"><span class="comment">              type:指定不同的配置方式</span></span><br><span class="line"><span class="comment">                 JNDI:java命名目录接口,在服务器端进行数据库连接池的管理</span></span><br><span class="line"><span class="comment">                 POOLED:使用数据库连接池</span></span><br><span class="line"><span class="comment">                 UNPOLLED:不使用数据库连接池</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml文件</span></span><br><span class="line"><span class="comment">      resource:从resources目录下找指定名称的文件注册</span></span><br><span class="line"><span class="comment">      url:使用绝对路径注册</span></span><br><span class="line"><span class="comment">      class:动态代理方式下的注册</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h3><p>Mytest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.CustomerMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.OrdersMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Book;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Customer;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Orders;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.addressing.WsaActionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	SqlSession sqlSession;</span><br><span class="line">	BookMapper bookMapper;</span><br><span class="line">	CustomerMapper customerMapper;</span><br><span class="line">	OrdersMapper ordersMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//使用文件流读取核心配置文件SqlMapConfig.xml</span></span><br><span class="line">		InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">		<span class="comment">//创建SqlSessionFactory工厂</span></span><br><span class="line">		SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">		<span class="comment">//取出sqlSession的对象</span></span><br><span class="line">		sqlSession = factory.openSession();</span><br><span class="line">		bookMapper = sqlSession.getMapper(BookMapper.class);</span><br><span class="line">		customerMapper=sqlSession.getMapper(CustomerMapper.class);</span><br><span class="line">		ordersMapper= sqlSession.getMapper(OrdersMapper.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//关闭sqlSession</span></span><br><span class="line">		sqlSession.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGetAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Book&gt; list = bookMapper.getAll();</span><br><span class="line">		list.forEach(book -&gt; System.out.println(book));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCustomerById</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Customer customer=customerMapper.getById(<span class="number">3</span>);</span><br><span class="line">		System.out.println(customer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetOrdersById</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Orders orders = ordersMapper.getById(<span class="number">11</span>);</span><br><span class="line">		System.out.println(orders);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis笔记</title>
    <url>/2022/09/28/Redis/Redis%E7%AC%94%E8%AE%B0/Redis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><blockquote>
<p>1、单机Mysql时代</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020082010365930.png#pic_center" alt="在这里插入图片描述"></p>
<p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p>
<ol>
<li>数据量增加到一定程度，单机数据库就放不下了</li>
<li>数据的索引（B+ Tree）,一个机器内存也存放不下</li>
<li>访问量变大后（读写混合），一台服务器承受不住。</li>
</ol>
<blockquote>
<p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）</p>
</blockquote>
<p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p>
<p><img src="https://img-blog.csdnimg.cn/20200820103713734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>优化过程经历了以下几个过程：</p>
<ol>
<li>优化数据库的数据结构和索引(难度大)</li>
<li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li>
<li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li>
</ol>
<blockquote>
<p>3、分库分表 + 水平拆分 + Mysql集群</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200820103739584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>4、如今最近的年代</p>
</blockquote>
<p> 如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。</p>
<blockquote>
<p>目前一个基本的互联网项目</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200820103804572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>为什么要用NoSQL ？</p>
</blockquote>
<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p>
<h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p>
<p>Not Only Structured Query Language</p>
<p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p>
<p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p>
<p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p>
<h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol>
<li><p>方便扩展（数据之间没有关系，很好扩展！）</p>
</li>
<li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p>
</li>
<li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p>
</li>
<li><p>传统的 RDBMS 和 NoSQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传统的 RDBMS(关系型数据库)</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中 row col</span><br><span class="line">- 操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nosql</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP定理和BASE</span><br><span class="line">- 高性能，高可用，高扩展</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>了解：3V + 3高</p>
</blockquote>
<p>大数据时代的3V ：主要是<strong>描述问题</strong>的</p>
<ol>
<li>海量Velume</li>
<li>多样Variety</li>
<li>实时Velocity</li>
</ol>
<p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p>
<ol>
<li>高并发</li>
<li>高可扩</li>
<li>高性能</li>
</ol>
<p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p>
<h3 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h3><p>推荐阅读：阿里云的这群疯子<a href="https://yq.aliyun.com/articles/653511">https://yq.aliyun.com/articles/653511</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200820103829446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p>
<p><img src="https://img-blog.csdnimg.cn/20200820103851613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 商品信息</span></span><br><span class="line">- 一般存放在关系型数据库：Mysql,阿里巴巴使用的Mysql都是经过内部改动的。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品描述、评论(文字居多)</span></span><br><span class="line">- 文档型数据库：MongoDB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片</span></span><br><span class="line">- 分布式文件系统 FastDFS</span><br><span class="line">- 淘宝：TFS</span><br><span class="line">- Google: GFS</span><br><span class="line">- Hadoop: HDFS</span><br><span class="line">- 阿里云: oss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品关键字 用于搜索</span></span><br><span class="line">- 搜索引擎：solr,elasticsearch</span><br><span class="line">- 阿里：Isearch 多隆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品热门的波段信息</span></span><br><span class="line">- 内存数据库：Redis，Memcache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品交易，外部支付接口</span></span><br><span class="line">- 第三方应用</span><br></pre></td></tr></table></figure>

<h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote>
<p><strong>KV键值对</strong></p>
</blockquote>
<ul>
<li>新浪：<strong>Redis</strong></li>
<li>美团：Redis + Tair</li>
<li>阿里、百度：Redis + Memcache</li>
</ul>
<blockquote>
<p><strong>文档型数据库（bson数据格式）：</strong></p>
</blockquote>
<ul>
<li><strong>MongoDB</strong>(掌握)<ul>
<li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li>
<li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<blockquote>
<p><strong>列存储数据库</strong></p>
</blockquote>
<ul>
<li><strong>HBase</strong>(大数据必学)</li>
<li>分布式文件系统</li>
</ul>
<blockquote>
<p><strong>图关系数据库</strong></p>
</blockquote>
<p>用于广告推荐，社交网络</p>
<ul>
<li><strong>Neo4j</strong>、InfoGrid</li>
</ul>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>Examples举例</strong></th>
<th><strong>典型应用场景</strong></th>
<th><strong>数据模型</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>键值对（key-value）</strong></td>
<td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td>
<td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td>Key 指向 Value 的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td><strong>列存储数据库</strong></td>
<td>Cassandra, HBase, Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td><strong>文档型数据库</strong></td>
<td>CouchDB, MongoDb</td>
<td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td><strong>图形(Graph)数据库</strong></td>
<td>Neo4J, InfoGrid, Infinite Graph</td>
<td>社交网络，推荐系统等。专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td>
</tr>
</tbody></table>
<h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Redis是什么？</p>
</blockquote>
<p>Redis（Remote Dictionary Server )，即远程字典服务。</p>
<p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p>
<p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<blockquote>
<p>Redis能该干什么？</p>
</blockquote>
<ol>
<li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li>
<li>高效率、用于高速缓冲</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器(eg：浏览量)</li>
<li>。。。</li>
</ol>
<blockquote>
<p>特性</p>
</blockquote>
<ol>
<li><p>多样的数据类型</p>
</li>
<li><p>持久化</p>
</li>
<li><p>集群</p>
</li>
<li><p>事务</p>
<p>…</p>
</li>
</ol>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>推荐使用Linux服务器学习。</p>
<p>windows版本的Redis已经停更很久了…</p>
<h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p><a href="https://github.com/dmajkic/redis">https://github.com/dmajkic/redis</a></p>
<ol>
<li>解压安装包<br><img src="https://img-blog.csdnimg.cn/20200820103922318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>开启redis-server.exe</li>
<li>启动redis-cli.exe测试<img src="https://img-blog.csdnimg.cn/20200820103950934.png#pic_center" alt="在这里插入图片描述"></li>
</ol>
<h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ol>
<li><p>下载安装包！<code>redis-5.0.8.tar.gz</code></p>
</li>
<li><p>解压Redis的安装包！程序一般放在 <code>/opt</code> 目录下</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104016426.png#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>基本环境安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment"># 然后进入redis目录下执行</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 然后执行</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200820104048327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol>
<li><p>redis默认安装路径 <code>/usr/local/bin</code><img src="https://img-blog.csdnimg.cn/20200820104140692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>将redis的配置文件复制到 程序安装目录 <code>/usr/local/bin/kconfig</code>下</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104157817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hxvGQ47d-1597890996509)(狂神说 Redis.assets/image-20200813114000868.png)]"></p>
</li>
<li><p>redis默认不是后台启动的，需要修改配置文件！</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104213706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dDdKTUgd-1597890996510)(狂神说 Redis.assets/image-20200813114019063.png)]"></p>
</li>
<li><p>通过制定的配置文件启动redis服务</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104228556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jOypL57Z-1597890996511)(狂神说 Redis.assets/image-20200813114030597.png)]"></p>
</li>
<li><p>使用redis-cli连接指定的端口号测试，Redis的默认端口6379</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104243223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LnDaISQ4-1597890996512)(狂神说 Redis.assets/image-20200813114045299.png)]"></p>
</li>
<li><p>查看redis进程是否开启</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104300532.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PhN1jC1-1597890996513)(狂神说 Redis.assets/image-20200813114103769.png)]"></p>
</li>
<li><p>关闭Redis服务 <code>shutdown</code></p>
<p><img src="https://img-blog.csdnimg.cn/20200820104314297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Y54EuOYm-1597890996514)(狂神说 Redis.assets/image-20200813114116691.png)]"></p>
</li>
<li><p>再次查看进程是否存在</p>
</li>
<li><p>后面我们会使用单机多Redis启动集群测试</p>
</li>
</ol>
<h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p><strong>redis-benchmark：</strong>Redis官方提供的性能测试工具，参数选项如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214125892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>简单测试：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200820104343472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-plMshjFg-1597890996515)(狂神说 Redis.assets/image-20200813114143365.png)]"></p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote>
<p>redis默认有16个数据库</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200820104357466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-v2S3n3Si-1597890996516)(狂神说 Redis.assets/image-20200813114158322.png)]"></p>
<p>默认使用的第0个;</p>
<p>16个数据库为：DB 0~DB 15<br>默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get databases <span class="comment"># 命令行查看数据库数量databases</span></span><br><span class="line">1) <span class="string">&quot;databases&quot;</span></span><br><span class="line">2) <span class="string">&quot;16&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; select 8 <span class="comment"># 切换数据库 DB 8</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SELECT 8</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; get name <span class="comment"># db8中并不能获取db0中的键值对。</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[8]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[8]&gt; SELECT 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;counter:__rand_int__&quot;</span></span><br><span class="line">2) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br><span class="line">4) <span class="string">&quot;key:__rand_int__&quot;</span></span><br><span class="line">5) <span class="string">&quot;myset:__rand_int__&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE <span class="comment"># size和key个数相关</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>

<p><code>keys *</code> ：查看当前数据库中所有的key。</p>
<p><code>flushdb</code>：清空当前数据库中的键值对。</p>
<p><code>flushall</code>：清空所有数据库的键值对。</p>
<blockquote>
<p><strong>Redis是单线程的，Redis是基于内存操作的。</strong></p>
</blockquote>
<p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p>
<p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p>
<blockquote>
<p><strong>Redis为什么单线程还这么快？</strong></p>
</blockquote>
<ul>
<li>误区1：高性能的服务器一定是多线程的？</li>
<li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li>
</ul>
<p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p>
<h2 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h2><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<a href="https://www.redis.net.cn/tutorial/3508.html">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html">分区</a>。</p>
<h3 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h3><blockquote>
<p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p>
</blockquote>
<p>下面学习的命令：</p>
<ul>
<li><code>exists key</code>：判断键是否存在</li>
<li><code>del key</code>：删除键值对</li>
<li><code>move key db</code>：将键值对移动到指定数据库</li>
<li><code>expire key second</code>：设置键值对的过期时间</li>
<li><code>type key</code>：查看value的数据类型</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看当前数据库所有key</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qinjiang <span class="comment"># set key</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; move age 1 <span class="comment"># 将键值对移动到指定数据库</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS age <span class="comment"># 判断键是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; del age <span class="comment"># 删除键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 删除个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE age 15 <span class="comment"># 设置键值对的过期时间</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 设置成功 开始计数</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age <span class="comment"># 查看key的过期剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2 <span class="comment"># -2 表示key过期，-1表示key未设置过期时间</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get age <span class="comment"># 过期的key 会被自动delete</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看value的数据类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<p>关于<code>TTL</code>命令</p>
<p>Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：</p>
<ol>
<li>当前key没有设置过期时间，所以会返回-1.</li>
<li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li>
<li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li>
</ol>
<p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p>
<ul>
<li><code>RENAME key newkey</code>修改 key 的名称</li>
<li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li>
</ul>
<p>更多命令学习：<a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p>
<h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>普通的set、get直接略过。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>APPEND key value</code></td>
<td>向指定的key的value后追加字符串</td>
<td>127.0.0.1:6379&gt; set msg hello OK 127.0.0.1:6379&gt; append msg “ world” (integer) 11 127.0.0.1:6379&gt; get msg “hello world”</td>
</tr>
<tr>
<td><code>DECR/INCR key</code></td>
<td>将指定key的value数值进行+1/-1(仅对于数字)</td>
<td>127.0.0.1:6379&gt; set age 20 OK 127.0.0.1:6379&gt; incr age (integer) 21 127.0.0.1:6379&gt; decr age (integer) 20</td>
</tr>
<tr>
<td><code>INCRBY/DECRBY key n</code></td>
<td>按指定的步长对数值进行加减</td>
<td>127.0.0.1:6379&gt; INCRBY age 5 (integer) 25 127.0.0.1:6379&gt; DECRBY age 10 (integer) 15</td>
</tr>
<tr>
<td><code>INCRBYFLOAT key n</code></td>
<td>为数值加上浮点型数值</td>
<td>127.0.0.1:6379&gt; INCRBYFLOAT age 5.2 “20.2”</td>
</tr>
<tr>
<td><code>STRLEN key</code></td>
<td>获取key保存值的字符串长度</td>
<td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; STRLEN msg (integer) 11</td>
</tr>
<tr>
<td><code>GETRANGE key start end</code></td>
<td>按起止位置获取字符串（闭区间，起止位置都取）</td>
<td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; GETRANGE msg 3 9 “lo worl”</td>
</tr>
<tr>
<td><code>SETRANGE key offset value</code></td>
<td>用指定的value 替换key中 offset开始的值</td>
<td>127.0.0.1:6379&gt; SETRANGE msg 2 hello (integer) 7 127.0.0.1:6379&gt; get msg “tehello”</td>
</tr>
<tr>
<td><code>GETSET key value</code></td>
<td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>
<td>127.0.0.1:6379&gt; GETSET msg test “hello world”</td>
</tr>
<tr>
<td><code>SETNX key value</code></td>
<td>仅当key不存在时进行set</td>
<td>127.0.0.1:6379&gt; SETNX msg test (integer) 0 127.0.0.1:6379&gt; SETNX name sakura (integer) 1</td>
</tr>
<tr>
<td><code>SETEX key seconds value</code></td>
<td>set 键值对并设置过期时间</td>
<td>127.0.0.1:6379&gt; setex name 10 root OK 127.0.0.1:6379&gt; get name (nil)</td>
</tr>
<tr>
<td><code>MSET key1 value1 [key2 value2..]</code></td>
<td>批量set键值对</td>
<td>127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 OK</td>
</tr>
<tr>
<td><code>MSETNX key1 value1 [key2 value2..]</code></td>
<td>批量设置键值对，仅当参数中所有的key都不存在时执行</td>
<td>127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4 (integer) 0</td>
</tr>
<tr>
<td><code>MGET key1 [key2..]</code></td>
<td>批量获取多个key保存的值</td>
<td>127.0.0.1:6379&gt; MGET k1 k2 k3 1) “v1” 2) “v2” 3) “v3”</td>
</tr>
<tr>
<td><code>PSETEX key milliseconds value</code></td>
<td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td>
<td></td>
</tr>
<tr>
<td><code>getset key value</code></td>
<td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td>
<td></td>
</tr>
</tbody></table>
<p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量：uid:123666：follow 0</li>
<li>粉丝数</li>
<li>对象存储缓存</li>
</ul>
<h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><blockquote>
<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>
<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>
</blockquote>
<p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等</p>
<p><img src="https://img-blog.csdnimg.cn/20200820104440398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VPvbIltc-1597890996518)(狂神说 Redis.assets/image-20200813114255459.png)]"></p>
<p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>LPUSH/RPUSH key value1[value2..]</code></td>
<td>从左边/右边向列表中PUSH值(一个或者多个)。</td>
</tr>
<tr>
<td><code>LRANGE key start end</code></td>
<td>获取list 起止元素==（索引从左往右 递增）==</td>
</tr>
<tr>
<td><code>LPUSHX/RPUSHX key value</code></td>
<td>向已存在的列名中push值（一个或者多个）</td>
</tr>
<tr>
<td>`LINSERT key BEFORE</td>
<td>AFTER pivot value`</td>
</tr>
<tr>
<td><code>LLEN key</code></td>
<td>查看列表长度</td>
</tr>
<tr>
<td><code>LINDEX key index</code></td>
<td>通过索引获取列表元素</td>
</tr>
<tr>
<td><code>LSET key index value</code></td>
<td>通过索引为元素设值</td>
</tr>
<tr>
<td><code>LPOP/RPOP key</code></td>
<td>从最左边/最右边移除值 并返回</td>
</tr>
<tr>
<td><code>RPOPLPUSH source destination</code></td>
<td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td>
</tr>
<tr>
<td><code>LTRIM key start end</code></td>
<td>通过下标截取指定范围内的列表</td>
</tr>
<tr>
<td><code>LREM key count value</code></td>
<td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td>
</tr>
<tr>
<td><code>BLPOP/BRPOP key1[key2] timout</code></td>
<td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td><code>BRPOPLPUSH source destination timeout</code></td>
<td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------LPUSH---RPUSH---LRANGE--------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k1 <span class="comment"># LPUSH mylist=&gt;&#123;1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k2 <span class="comment"># LPUSH mylist=&gt;&#123;2,1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist k3 <span class="comment"># RPUSH mylist=&gt;&#123;2,1,3&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; get mylist <span class="comment"># 普通的get是无法获取list值的</span></span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 4 <span class="comment"># LRANGE 获取起止位置范围内的元素</span></span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 2</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 1</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1 <span class="comment"># 获取全部元素</span></span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line"></span><br><span class="line">---------------------------LPUSHX---RPUSHX-----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 <span class="comment"># list不存在 LPUSHX失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 v2  </span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX mylist k4 k5 <span class="comment"># 向mylist中 左边 PUSH k4 k5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k5&quot;</span></span><br><span class="line">2) <span class="string">&quot;k4&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">4) <span class="string">&quot;k1&quot;</span></span><br><span class="line">5) <span class="string">&quot;k3&quot;</span></span><br><span class="line"></span><br><span class="line">---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after k2 ins_key1 <span class="comment"># 在k2元素后 插入ins_key1</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k5&quot;</span></span><br><span class="line">2) <span class="string">&quot;k4&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">4) <span class="string">&quot;ins_key1&quot;</span></span><br><span class="line">5) <span class="string">&quot;k1&quot;</span></span><br><span class="line">6) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LLEN mylist <span class="comment"># 查看mylist的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 3 <span class="comment"># 获取下标为3的元素</span></span><br><span class="line"><span class="string">&quot;ins_key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 0</span><br><span class="line"><span class="string">&quot;k5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LSET mylist 3 k6 <span class="comment"># 将下标3的元素 set值为k6</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k5&quot;</span></span><br><span class="line">2) <span class="string">&quot;k4&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">4) <span class="string">&quot;k6&quot;</span></span><br><span class="line">5) <span class="string">&quot;k1&quot;</span></span><br><span class="line">6) <span class="string">&quot;k3&quot;</span></span><br><span class="line"></span><br><span class="line">---------------------------LPOP--RPOP--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPOP mylist <span class="comment"># 左侧(头部)弹出</span></span><br><span class="line"><span class="string">&quot;k5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP mylist <span class="comment"># 右侧(尾部)弹出</span></span><br><span class="line"><span class="string">&quot;k3&quot;</span></span><br><span class="line"></span><br><span class="line">---------------------------RPOPLPUSH--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k4&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k6&quot;</span></span><br><span class="line">4) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist newlist <span class="comment"># 将mylist的最后一个值(k1)弹出，加入到newlist的头部</span></span><br><span class="line"><span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1</span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k4&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k6&quot;</span></span><br><span class="line"></span><br><span class="line">---------------------------LTRIM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 0 1 <span class="comment"># 截取mylist中的 0~1部分</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;k4&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始 mylist: k2,k2,k2,k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line">---------------------------LREM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist 3 k2 <span class="comment"># 从头部开始搜索 至多删除3个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist -2 k2 <span class="comment">#从尾部开始搜索 至多删除2个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------BLPOP--BRPOP--------------------------</span><br><span class="line"></span><br><span class="line">mylist: k2,k2,k2,k4,k2,k2</span><br><span class="line">newlist: k1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30 <span class="comment"># 从newlist中弹出第一个值，mylist作为候选</span></span><br><span class="line">1) <span class="string">&quot;newlist&quot;</span> <span class="comment"># 弹出</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30</span><br><span class="line">1) <span class="string">&quot;mylist&quot;</span> <span class="comment"># 由于newlist空了 从mylist中弹出</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30</span><br><span class="line">(30.10s) <span class="comment"># 超时了</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30 <span class="comment"># 我们连接另一个客户端向newlist中push了test, 阻塞被解决。</span></span><br><span class="line">1) <span class="string">&quot;newlist&quot;</span></span><br><span class="line">2) <span class="string">&quot;test&quot;</span></span><br><span class="line">(12.54s)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>list实际上是一个链表，before Node after , left, right 都可以插入值</li>
<li><strong>如果key不存在，则创建新的链表</strong></li>
<li>如果key存在，新增内容</li>
<li>如果移除了所有值，空链表，也代表不存在</li>
<li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li>
</ul>
<p><strong>应用：</strong></p>
<p><strong>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</strong></p>
<h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><blockquote>
<p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
<p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>SADD key member1[member2..]</code></td>
<td>向集合中无序增加一个/多个成员</td>
</tr>
<tr>
<td><code>SCARD key</code></td>
<td>获取集合的成员数</td>
</tr>
<tr>
<td><code>SMEMBERS key</code></td>
<td>返回集合中所有的成员</td>
</tr>
<tr>
<td><code>SISMEMBER key member</code></td>
<td>查询member元素是否是集合的成员,结果是无序的</td>
</tr>
<tr>
<td><code>SRANDMEMBER key [count]</code></td>
<td>随机返回集合中count个成员，count缺省值为1</td>
</tr>
<tr>
<td><code>SPOP key [count]</code></td>
<td>随机移除并返回集合中count个成员，count缺省值为1</td>
</tr>
<tr>
<td><code>SMOVE source destination member</code></td>
<td>将source集合的成员member移动到destination集合</td>
</tr>
<tr>
<td><code>SREM key member1[member2..]</code></td>
<td>移除集合中一个/多个成员</td>
</tr>
<tr>
<td><code>SDIFF key1[key2..]</code></td>
<td>返回所有集合的差集 key1- key2 - …</td>
</tr>
<tr>
<td><code>SDIFFSTORE destination key1[key2..]</code></td>
<td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td>
</tr>
<tr>
<td><code>SINTER key1 [key2..]</code></td>
<td>返回所有集合的交集</td>
</tr>
<tr>
<td><code>SINTERSTORE destination key1[key2..]</code></td>
<td>在SINTER的基础上，存储结果到集合中。覆盖</td>
</tr>
<tr>
<td><code>SUNION key1 [key2..]</code></td>
<td>返回所有集合的并集</td>
</tr>
<tr>
<td><code>SUNIONSTORE destination key1 [key2..]</code></td>
<td>在SUNION的基础上，存储结果到及和张。覆盖</td>
</tr>
<tr>
<td><code>SSCAN KEY [MATCH pattern] [COUNT count]</code></td>
<td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SADD myset m1 m2 m3 m4 <span class="comment"># 向myset中增加成员 m1~m4</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; SCARD myset <span class="comment"># 获取集合的成员数目</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment"># 获取集合中所有成员</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line">4) <span class="string">&quot;m1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m5 <span class="comment"># 查询m5是否是myset的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不是，返回0</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m2</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 是，返回1</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">---------------------SRANDMEMBER--SPOP----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 3 <span class="comment"># 随机返回3个成员</span></span><br><span class="line">1) <span class="string">&quot;m2&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset <span class="comment"># 随机返回1个成员</span></span><br><span class="line"><span class="string">&quot;m3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 2 <span class="comment"># 随机移除并返回2个成员</span></span><br><span class="line">1) <span class="string">&quot;m1&quot;</span></span><br><span class="line">2) <span class="string">&quot;m4&quot;</span></span><br><span class="line"><span class="comment"># 将set还原到&#123;m1,m2,m3,m4&#125;</span></span><br><span class="line"></span><br><span class="line">---------------------SMOVE--SREM----------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset newset m3 <span class="comment"># 将myset中m3成员移动到newset集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m2&quot;</span></span><br><span class="line">3) <span class="string">&quot;m1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">1) <span class="string">&quot;m3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SREM newset m3 <span class="comment"># 从newset中移除m3元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算</span></span><br><span class="line"><span class="comment"># setx=&gt;&#123;m1,m2,m4,m6&#125;, sety=&gt;&#123;m2,m5,m6&#125;, setz=&gt;&#123;m1,m3,m6&#125;</span></span><br><span class="line"></span><br><span class="line">-----------------------------SDIFF------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety setz <span class="comment"># 等价于setx-sety-setz</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety <span class="comment"># setx - sety</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF sety setx <span class="comment"># sety - setx</span></span><br><span class="line">1) <span class="string">&quot;m5&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------SINTER---------------------------------------</span><br><span class="line"><span class="comment"># 共同关注（交集）</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety setz <span class="comment"># 求 setx、sety、setx的交集</span></span><br><span class="line">1) <span class="string">&quot;m6&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety <span class="comment"># 求setx sety的交集</span></span><br><span class="line">1) <span class="string">&quot;m2&quot;</span></span><br><span class="line">2) <span class="string">&quot;m6&quot;</span></span><br><span class="line"></span><br><span class="line">-------------------------SUNION---------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety setz <span class="comment"># setx sety setz的并集</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m6&quot;</span></span><br><span class="line">3) <span class="string">&quot;m3&quot;</span></span><br><span class="line">4) <span class="string">&quot;m2&quot;</span></span><br><span class="line">5) <span class="string">&quot;m1&quot;</span></span><br><span class="line">6) <span class="string">&quot;m5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety <span class="comment"># setx sety 并集</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m6&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line">4) <span class="string">&quot;m1&quot;</span></span><br><span class="line">5) <span class="string">&quot;m5&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote>
<p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>HSET key field value</code></td>
<td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td>
</tr>
<tr>
<td><code>HMSET key field1 value1 [field2 value2..]</code></td>
<td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>
</tr>
<tr>
<td><code>HSETNX key field value</code></td>
<td>只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
<tr>
<td><code>HEXISTS key field</code></td>
<td>查看哈希表 key 中，指定的字段是否存在。</td>
</tr>
<tr>
<td><code>HGET key field value</code></td>
<td>获取存储在哈希表中指定字段的值</td>
</tr>
<tr>
<td><code>HMGET key field1 [field2..]</code></td>
<td>获取所有给定字段的值</td>
</tr>
<tr>
<td><code>HGETALL key</code></td>
<td>获取在哈希表key 的所有字段和值</td>
</tr>
<tr>
<td><code>HKEYS key</code></td>
<td>获取哈希表key中所有的字段</td>
</tr>
<tr>
<td><code>HLEN key</code></td>
<td>获取哈希表中字段的数量</td>
</tr>
<tr>
<td><code>HVALS key</code></td>
<td>获取哈希表中所有值</td>
</tr>
<tr>
<td><code>HDEL key field1 [field2..]</code></td>
<td>删除哈希表key中一个/多个field字段</td>
</tr>
<tr>
<td><code>HINCRBY key field n</code></td>
<td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td>
</tr>
<tr>
<td><code>HINCRBYFLOAT key field n</code></td>
<td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td>
</tr>
<tr>
<td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td>
<td>迭代哈希表中的键值对。</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">------------------------HSET--HMSET--HSETNX----------------</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name sakura <span class="comment"># 将studentx哈希表作为一个对象，设置name为sakura</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name gyc <span class="comment"># 重复设置field进行覆盖，并返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx age 20 <span class="comment"># 设置studentx的age为20</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HMSET studentx sex 1 tel 15623667886 <span class="comment"># 设置sex为1，tel为15623667886</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx name gyc <span class="comment"># HSETNX 设置已存在的field</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 失败</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx email 12345@qq.com</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 成功</span></span><br><span class="line"></span><br><span class="line">----------------------HEXISTS--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx name <span class="comment"># name字段在studentx中是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx addr</span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line"></span><br><span class="line">-------------------HGET--HMGET--HGETALL-----------</span><br><span class="line">127.0.0.1:6379&gt; HGET studentx name <span class="comment"># 获取studentx中name字段的value</span></span><br><span class="line"><span class="string">&quot;gyc&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET studentx name age tel <span class="comment"># 获取studentx中name、age、tel字段的value</span></span><br><span class="line">1) <span class="string">&quot;gyc&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;15623667886&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL studentx <span class="comment"># 获取studentx中所有的field及其value</span></span><br><span class="line"> 1) <span class="string">&quot;name&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;gyc&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;age&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;20&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;sex&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;tel&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;15623667886&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;email&quot;</span></span><br><span class="line">10) <span class="string">&quot;12345@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------HKEYS--HLEN--HVALS--------------</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx <span class="comment"># 查看studentx中所有的field</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;sex&quot;</span></span><br><span class="line">4) <span class="string">&quot;tel&quot;</span></span><br><span class="line">5) <span class="string">&quot;email&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HLEN studentx <span class="comment"># 查看studentx中的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; HVALS studentx <span class="comment"># 查看studentx中所有的value</span></span><br><span class="line">1) <span class="string">&quot;gyc&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;1&quot;</span></span><br><span class="line">4) <span class="string">&quot;15623667886&quot;</span></span><br><span class="line">5) <span class="string">&quot;12345@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">-------------------------HDEL--------------------------</span><br><span class="line">127.0.0.1:6379&gt; HDEL studentx sex tel <span class="comment"># 删除studentx 中的sex、tel字段</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;email&quot;</span></span><br><span class="line"></span><br><span class="line">-------------HINCRBY--HINCRBYFLOAT------------------------</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx age 1 <span class="comment"># studentx的age字段数值+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx name 1 <span class="comment"># 非整数字型字段不可用</span></span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT studentx weight 0.6 <span class="comment"># weight字段增加0.6</span></span><br><span class="line"><span class="string">&quot;90.8&quot;</span></span><br></pre></td></tr></table></figure>

<p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！<strong>Hash更适合于对象的存储，Sring更加适合字符串存储！</strong></p>
<h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote>
<p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>score相同：按字典顺序排序</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>ZADD key score member1 [score2 member2]</code></td>
<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>
</tr>
<tr>
<td><code>ZCARD key</code></td>
<td>获取有序集合的成员数</td>
</tr>
<tr>
<td><code>ZCOUNT key min max</code></td>
<td>计算在有序集合中指定区间score的成员数</td>
</tr>
<tr>
<td><code>ZINCRBY key n member</code></td>
<td>有序集合中对指定成员的分数加上增量 n</td>
</tr>
<tr>
<td><code>ZSCORE key member</code></td>
<td>返回有序集中，成员的分数值</td>
</tr>
<tr>
<td><code>ZRANK key member</code></td>
<td>返回有序集合中指定成员的索引</td>
</tr>
<tr>
<td><code>ZRANGE key start end</code></td>
<td>通过索引区间返回有序集合成指定区间内的成员</td>
</tr>
<tr>
<td><code>ZRANGEBYLEX key min max</code></td>
<td>通过字典区间返回有序集合的成员</td>
</tr>
<tr>
<td><code>ZRANGEBYSCORE key min max</code></td>
<td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td>
</tr>
<tr>
<td><code>ZLEXCOUNT key min max</code></td>
<td>在有序集合中计算指定字典区间内成员数量</td>
</tr>
<tr>
<td><code>ZREM key member1 [member2..]</code></td>
<td>移除有序集合中一个/多个成员</td>
</tr>
<tr>
<td><code>ZREMRANGEBYLEX key min max</code></td>
<td>移除有序集合中给定的字典区间的所有成员</td>
</tr>
<tr>
<td><code>ZREMRANGEBYRANK key start stop</code></td>
<td>移除有序集合中给定的排名区间的所有成员</td>
</tr>
<tr>
<td><code>ZREMRANGEBYSCORE key min max</code></td>
<td>移除有序集合中给定的分数区间的所有成员</td>
</tr>
<tr>
<td><code>ZREVRANGE key start end</code></td>
<td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td>
</tr>
<tr>
<td><code>ZREVRANGEBYSCORRE key max min</code></td>
<td>返回有序集中指定分数区间内的成员，分数从高到低排序</td>
</tr>
<tr>
<td><code>ZREVRANGEBYLEX key max min</code></td>
<td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td>
</tr>
<tr>
<td><code>ZREVRANK key member</code></td>
<td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>
</tr>
<tr>
<td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td>
<td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td>
</tr>
<tr>
<td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td>
<td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td>
</tr>
<tr>
<td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td>
<td>迭代有序集合中的元素（包括元素成员和元素分值）</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-------------------ZADD--ZCARD--ZCOUNT--------------</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 <span class="comment"># 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myzset <span class="comment"># 获取有序集合的成员数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 1 <span class="comment"># 获取score在 [0,1]区间的成员数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line">----------------ZINCRBY--ZSCORE--------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 <span class="comment"># 将成员m2的score +5</span></span><br><span class="line"><span class="string">&quot;7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m1 <span class="comment"># 获取成员m1的score</span></span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m2</span><br><span class="line"><span class="string">&quot;7&quot;</span></span><br><span class="line"></span><br><span class="line">--------------ZRANK--ZRANGE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m1 <span class="comment"># 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 1 <span class="comment"># 获取索引在 0~1的成员</span></span><br><span class="line">1) <span class="string">&quot;m1&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 -1 <span class="comment"># 获取全部成员</span></span><br><span class="line">1) <span class="string">&quot;m1&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#testset=&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0</span></span><br><span class="line">------------------ZRANGEBYLEX---------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + <span class="comment"># 返回所有成员</span></span><br><span class="line">1) <span class="string">&quot;abc&quot;</span></span><br><span class="line">2) <span class="string">&quot;add&quot;</span></span><br><span class="line">3) <span class="string">&quot;amaze&quot;</span></span><br><span class="line">4) <span class="string">&quot;apple&quot;</span></span><br><span class="line">5) <span class="string">&quot;back&quot;</span></span><br><span class="line">6) <span class="string">&quot;java&quot;</span></span><br><span class="line">7) <span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 <span class="comment"># 分页 按索引显示查询结果的 0,1,2条记录</span></span><br><span class="line">1) <span class="string">&quot;abc&quot;</span></span><br><span class="line">2) <span class="string">&quot;add&quot;</span></span><br><span class="line">3) <span class="string">&quot;amaze&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 <span class="comment"># 显示 3,4,5条记录</span></span><br><span class="line">1) <span class="string">&quot;apple&quot;</span></span><br><span class="line">2) <span class="string">&quot;back&quot;</span></span><br><span class="line">3) <span class="string">&quot;java&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple <span class="comment"># 显示 (-,apple] 区间内的成员</span></span><br><span class="line">1) <span class="string">&quot;abc&quot;</span></span><br><span class="line">2) <span class="string">&quot;add&quot;</span></span><br><span class="line">3) <span class="string">&quot;amaze&quot;</span></span><br><span class="line">4) <span class="string">&quot;apple&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java <span class="comment"># 显示 [apple,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">&quot;apple&quot;</span></span><br><span class="line">2) <span class="string">&quot;back&quot;</span></span><br><span class="line">3) <span class="string">&quot;java&quot;</span></span><br><span class="line"></span><br><span class="line">-----------------------ZRANGEBYSCORE---------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 <span class="comment"># 返回score在 [1,10]之间的的成员</span></span><br><span class="line">1) <span class="string">&quot;m1&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 5</span><br><span class="line">1) <span class="string">&quot;m1&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line"></span><br><span class="line">--------------------ZLEXCOUNT-----------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset - +</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREM testset abc <span class="comment"># 移除成员abc</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java <span class="comment"># 移除字典区间[apple,java]中的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 <span class="comment"># 移除排名0~1的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 <span class="comment"># 移除score在 [0,3]的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># testset=&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0</span></span><br><span class="line"><span class="comment"># myzset=&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;</span></span><br><span class="line">----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 <span class="comment"># 按score递减排序，然后按索引，返回结果的 0~3</span></span><br><span class="line">1) <span class="string">&quot;m9&quot;</span></span><br><span class="line">2) <span class="string">&quot;m7&quot;</span></span><br><span class="line">3) <span class="string">&quot;m4&quot;</span></span><br><span class="line">4) <span class="string">&quot;m3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 <span class="comment"># 返回排序结果的 索引的2~4</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 <span class="comment"># 按score递减顺序 返回集合中分数在[2,6]之间的成员</span></span><br><span class="line">1) <span class="string">&quot;m4&quot;</span></span><br><span class="line">2) <span class="string">&quot;m3&quot;</span></span><br><span class="line">3) <span class="string">&quot;m2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add <span class="comment"># 按字典倒序 返回集合中(add,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">&quot;java&quot;</span></span><br><span class="line">2) <span class="string">&quot;back&quot;</span></span><br><span class="line">3) <span class="string">&quot;apple&quot;</span></span><br><span class="line">4) <span class="string">&quot;amaze&quot;</span></span><br><span class="line"></span><br><span class="line">-------------------------ZREVRANK------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m7 <span class="comment"># 按score递减顺序，返回成员m7索引</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mathscore=&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩</span></span><br><span class="line"><span class="comment"># enscore=&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩</span></span><br><span class="line">-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore <span class="comment"># 将mathscore enscore进行合并 结果存放到sumscore</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores <span class="comment"># 合并后的score是之前集合中所有score的和</span></span><br><span class="line">1) <span class="string">&quot;xm&quot;</span></span><br><span class="line">2) <span class="string">&quot;160&quot;</span></span><br><span class="line">3) <span class="string">&quot;xg&quot;</span></span><br><span class="line">4) <span class="string">&quot;177&quot;</span></span><br><span class="line">5) <span class="string">&quot;xh&quot;</span></span><br><span class="line">6) <span class="string">&quot;188&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN <span class="comment"># 取两个集合的成员score最小值作为结果的</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;xm&quot;</span></span><br><span class="line">2) <span class="string">&quot;70&quot;</span></span><br><span class="line">3) <span class="string">&quot;xg&quot;</span></span><br><span class="line">4) <span class="string">&quot;87&quot;</span></span><br><span class="line">5) <span class="string">&quot;xh&quot;</span></span><br><span class="line">6) <span class="string">&quot;93&quot;</span></span><br></pre></td></tr></table></figure>

<p>应用案例：</p>
<ul>
<li>set排序 存储班级成绩表 工资表排序！</li>
<li>普通消息，1.重要消息 2.带权重进行判断</li>
<li>排行榜应用实现，取Top N测试</li>
</ul>
<h2 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h2><h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial(地理位置)"></a>Geospatial(地理位置)</h3><blockquote>
<p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td>
<td>将具体经纬度的坐标存入一个有序集合</td>
</tr>
<tr>
<td><code>geopos key member [member..]</code></td>
<td>获取集合中的一个/多个成员坐标</td>
</tr>
<tr>
<td><code>geodist key member1 member2 [unit]</code></td>
<td>返回两个给定位置之间的距离。默认以米作为单位。</td>
</tr>
<tr>
<td>`georadius key longitude latitude radius m</td>
<td>km</td>
</tr>
<tr>
<td><code>GEORADIUSBYMEMBER key member radius...</code></td>
<td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td>
</tr>
<tr>
<td><code>geohash key member1 [member2..]</code></td>
<td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td>
</tr>
</tbody></table>
<p><strong>有效经纬度</strong></p>
<blockquote>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度。</li>
</ul>
</blockquote>
<p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
<p><strong>关于GEORADIUS的参数</strong></p>
<blockquote>
<p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p>
<p>withcoord:带上坐标</p>
<p>withdist:带上距离，单位与半径单位相同</p>
<p>COUNT n : 只显示前n个(按距离递增排序)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----------------georadius---------------------</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 120 30 500 km withcoord withdist <span class="comment"># 查询经纬度(120,30)坐标500km半径内的成员</span></span><br><span class="line">1) 1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.4151&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;120.20000249147415&quot;</span></span><br><span class="line">      2) <span class="string">&quot;30.199999888333501&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">   2) <span class="string">&quot;205.3611&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;121.40000134706497&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.400000253193539&quot;</span></span><br><span class="line">     </span><br><span class="line">------------geohash---------------------------</span><br><span class="line">127.0.0.1:6379&gt; geohash china:city yichang shanghai <span class="comment"># 获取成员经纬坐标的geohash表示</span></span><br><span class="line">1) <span class="string">&quot;wmrjwbr5250&quot;</span></span><br><span class="line">2) <span class="string">&quot;wtw6ds0y300&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h3><blockquote>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>
<p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p>
<p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<p>其底层使用string数据类型</p>
</blockquote>
<p><strong>什么是基数？</strong></p>
<blockquote>
<p>数据集中不重复的元素的个数。</p>
</blockquote>
<p><strong>应用场景：</strong></p>
<p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p>
<blockquote>
<p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>PFADD key element1 [elememt2..]</code></td>
<td>添加指定元素到 HyperLogLog 中</td>
</tr>
<tr>
<td><code>PFCOUNT key [key]</code></td>
<td>返回给定 HyperLogLog 的基数估算值。</td>
</tr>
<tr>
<td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td>
<td>将多个 HyperLogLog 合并为一个 HyperLogLog</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----------PFADD--PFCOUNT---------------------</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemx a b c d e f g h i j k <span class="comment"># 添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> myelemx <span class="comment"># hyperloglog底层使用String</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemx <span class="comment"># 估算myelemx的基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemy i j k z m c b v p q s</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemy</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line">----------------PFMERGE-----------------------</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE myelemz myelemx myelemy <span class="comment"># 合并myelemx和myelemy 成为myelemz</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemz <span class="comment"># 估算基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br></pre></td></tr></table></figure>

<p>如果允许容错，那么一定可以使用Hyperloglog !</p>
<p>如果不允许容错，就使用set或者自己的数据类型即可 ！</p>
<h3 id="BitMaps-位图"><a href="#BitMaps-位图" class="headerlink" title="BitMaps(位图)"></a>BitMaps(位图)</h3><blockquote>
<p>使用位存储，信息状态只有 0 和 1</p>
<p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p>
</blockquote>
<p><strong>应用场景</strong></p>
<p>签到统计、状态统计</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>setbit key offset value</code></td>
<td>为指定key的offset位设置值</td>
</tr>
<tr>
<td><code>getbit key offset</code></td>
<td>获取offset位的值</td>
</tr>
<tr>
<td><code>bitcount key [start end]</code></td>
<td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td>
</tr>
<tr>
<td><code>bitop operration destkey key[key..]</code></td>
<td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td>
</tr>
<tr>
<td><code>BITPOS key bit [start] [end]</code></td>
<td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">------------setbit--getbit--------------</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1 <span class="comment"># 设置sign的第0位为 1 </span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 1 <span class="comment"># 设置sign的第2位为 1  不设置默认 是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> sign</span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2 <span class="comment"># 获取第2位的数值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 4 <span class="comment"># 未设置默认是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">-----------bitcount----------------------------</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign <span class="comment"># 统计sign中为1的位数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>

<h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性</p>
<blockquote>
<p>Redis事务本质：一组命令的集合。</p>
<p>—————– 队列 set set set 执行 ——————-</p>
<p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p>
<ul>
<li>一次性</li>
<li>顺序性</li>
<li>排他性</li>
</ul>
<hr>
<ol>
<li>Redis事务没有隔离级别的概念</li>
<li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li>
</ol>
</blockquote>
<h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul>
<li>开启事务（<code>multi</code>）</li>
<li>命令入队</li>
<li>执行事务（<code>exec</code>）</li>
</ul>
<p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1 <span class="comment"># 命令入队</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2 <span class="comment"># ..</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 事务执行</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) OK</span><br><span class="line">5) 1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">   2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">   3) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>取消事务(<code>discurd</code>)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD <span class="comment"># 放弃事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXEC </span><br><span class="line">(error) ERR EXEC without MULTI <span class="comment"># 当前未开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 <span class="comment"># 被放弃事务中命令并未执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote>
<p>代码语法错误（编译时异常）所有的命令都不执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; error k1 <span class="comment"># 这是一条语法错误命令</span></span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> `error`, with args beginning with: `k1`, <span class="comment"># 会报错但是不影响后续命令入队 </span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors. <span class="comment"># 执行报错</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 </span><br><span class="line">(nil) <span class="comment"># 其他命令并没有被执行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1 <span class="comment"># 这条命令逻辑错误（对字符串进行增量）</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 运行时报错</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span> <span class="comment"># 其他命令正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。</span></span><br><span class="line"><span class="comment"># 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span></span><br></pre></td></tr></table></figure>

<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li>
</ul>
<p><strong>乐观锁：</strong></p>
<ul>
<li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p>
<blockquote>
<p>正常执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100 <span class="comment"># 设置余额:100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> use 0 <span class="comment"># 支出使用:0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money (上锁)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 监视值没有被中途修改，事务正常执行</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p>
</blockquote>
<p>我们启动另外一个客户端模拟插队线程。</p>
<p>线程1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># money上锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; 	<span class="comment"># 此时事务并没有执行</span></span><br></pre></td></tr></table></figure>

<p>模拟线程插队，线程2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY money 500 <span class="comment"># 修改了线程一中监视的money</span></span><br><span class="line">(<span class="built_in">integer</span>) 600</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p>回到线程1，执行事务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXEC <span class="comment"># 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败</span></span><br><span class="line">(nil) <span class="comment"># 没有结果，说明事务执行失败</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get money <span class="comment"># 线程2 修改生效</span></span><br><span class="line"><span class="string">&quot;600&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get use <span class="comment"># 线程1事务执行失败，数值没有被修改</span></span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解锁获取最新值，然后再加锁进行事务。</p>
<p><code>unwatch</code>进行解锁。</p>
</blockquote>
<p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p>
<h2 id="六、Jedis"><a href="#六、Jedis" class="headerlink" title="六、Jedis"></a>六、Jedis</h2><p>使用Java来操作Redis，Jedis是Redis官方推荐使用的Java连接redis的客户端。</p>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入jredis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编码测试</p>
<img src="/2022/09/28/Redis/Redis%E7%AC%94%E8%AE%B0/Redis%E7%AC%94%E8%AE%B0/image-20220928173514475.png" class="" title="image-20220928173514475"></li>
</ol>
<p><strong>TestPing.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.xx.xxx&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        String response = jedis.ping();</span><br><span class="line">        System.out.println(response); <span class="comment">// PONG</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用api</p>
<img src="/2022/09/28/Redis/Redis%E7%AC%94%E8%AE%B0/Redis%E7%AC%94%E8%AE%B0/image-20220928173705401.png" class="" title="image-20220928173705401">

<p><strong>事务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;39.99.xxx.xx&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kuangshen&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonObject.toJSONString();</span><br><span class="line">        <span class="comment">// jedis.watch(result)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>, result);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>, result);</span><br><span class="line">            <span class="comment">// 执行事务</span></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 放弃事务</span></span><br><span class="line">            multi.discard();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接</span></span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、SpringBoot整合"><a href="#七、SpringBoot整合" class="headerlink" title="七、SpringBoot整合"></a>七、SpringBoot整合</h2><ol>
<li>导入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springboot 2.x后 ，原来使用的 Jedis 被 lettuce 替换。</p>
<blockquote>
<p>jedis：采用的直连，多个线程操作的话，是不安全的。如果要避免不安全，使用jedis pool连接池！更像BIO模式</p>
<p>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况！可以减少线程数据了，更像NIO模式</p>
</blockquote>
<p>我们在学习SpringBoot自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类xxxAutoConfiguration,并且在spring.factories中也一定能找到这个类的完全限定名。Redis也不例外。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214531573.png" alt="在这里插入图片描述"></p>
<p>那么就一定还存在一个RedisProperties类</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214554661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>之前我们说SpringBoot2.x后默认使用Lettuce来替换Jedis，现在我们就能来验证了。</p>
<p>先看Jedis:</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214607475.png" alt="在这里插入图片描述"></p>
<p>@ConditionalOnClass注解中有两个类是默认不存在的，所以Jedis是无法生效的</p>
<p>然后再看Lettuce：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214618179.png" alt="在这里插入图片描述"></p>
<p>完美生效。</p>
<p>现在我们回到RedisAutoConfiguratio</p>
<p><img src="https://img-blog.csdnimg.cn/2020051321462777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>只有两个简单的Bean</p>
<ul>
<li><strong>RedisTemplate</strong></li>
<li><strong>StringRedisTemplate</strong></li>
</ul>
<p>当看到xxTemplate时可以对比RestTemplat、SqlSessionTemplate,通过使用这些Template来间接操作组件。那么这俩也不会例外。分别用于操作Redis和Redis中的String数据类型。</p>
<p>在RedisTemplate上也有一个条件注解，说明我们是可以对其进行定制化的</p>
<p>说完这些，我们需要知道如何编写配置文件然后连接Redis，就需要阅读RedisProperties</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214638238.png" alt="在这里插入图片描述"></p>
<p>这是一些基本的配置属性。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214649380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>还有一些连接池相关的配置。注意使用时一定使用Lettuce的连接池。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214700372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol>
<li><p>编写配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">39.99.xxx.xx</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用RedisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line">        <span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line">        <span class="comment">// opsForList 操作List 类似List</span></span><br><span class="line">        <span class="comment">// opsForHah</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接对象</span></span><br><span class="line">        <span class="comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">        <span class="comment">//connection.flushDb();</span></span><br><span class="line">        <span class="comment">//connection.flushAll();</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试结果</p>
<p><strong>此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200513214734520.png" alt="在这里插入图片描述"></p>
<p> 这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p>
<p>我们转到看那个默认的RedisTemplate内部什么样子：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214746506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在最开始就能看到几个关于序列化的参数。</p>
<p>默认的序列化器是采用JDK序列化器</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214757247.png" alt="在这里插入图片描述"></p>
<p>而默认的RedisTemplate中的所有序列化器都是使用这个序列化器：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214809494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>后续我们定制RedisTemplate就可以对其进行修改。</p>
<p><code>RedisSerializer</code>提供了多种序列化方案：</p>
<ul>
<li><p>直接调用RedisSerializer的静态方法来返回序列化器，然后set</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214818682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>自己new 相应的实现类，然后set</p>
<p><img src="https://img-blog.csdnimg.cn/20200513214827233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
</li>
<li><p><strong>定制RedisTemplate的模板：</strong></p>
<p>我们创建一个Bean加入容器，就会触发RedisTemplate上的条件注解使默认的RedisTemplate失效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 将template 泛型设置为 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        <span class="comment">// 连接工厂，不必修改</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 序列化设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// key、hash的key 采用 String序列化方式</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// value、hash的value 采用 Jackson 序列化方式</span></span><br><span class="line">        template.setValueSerializer(RedisSerializer.json());</span><br><span class="line">        template.setHashValueSerializer(RedisSerializer.json());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，只要实体类进行了序列化，我们存什么都不会有乱码的担忧了。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-oc8kJP08-1597890996523)(狂神说 Redis.assets/image-20200817175638086.png)]</p>
</li>
</ol>
<h2 id="八、自定义Redis工具类"><a href="#八、自定义Redis工具类" class="headerlink" title="八、自定义Redis工具类"></a>八、自定义Redis工具类</h2><p>使用RedisTemplate需要频繁调用<code>.opForxxx</code>然后才能进行对应的操作，这样使用起来代码效率低下，工作中一般不会这样使用，而是将这些常用的公共API抽取出来封装成为一个工具类，然后直接使用工具类来间接操作Redis,不但效率高并且易用。</p>
<p>工具类参考博客：</p>
<p><a href="https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html">https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html</a></p>
<p><a href="https://www.cnblogs.com/zhzhlong/p/11434284.html">https://www.cnblogs.com/zhzhlong/p/11434284.html</a></p>
<h2 id="九、Redis-conf"><a href="#九、Redis-conf" class="headerlink" title="九、Redis.conf"></a>九、Redis.conf</h2><blockquote>
<p>容量单位不区分大小写，G和GB有区别</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020051321485460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<blockquote>
<p>可以使用 include 组合多个配置问题</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513214902552.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>网络配置</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513214912813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>日志输出级别</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513214923678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<blockquote>
<p>日志输出文件</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513214933713.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>持久化规则</p>
</blockquote>
<p>由于Redis是基于内存的数据库，需要将数据由内存持久化到文件中</p>
<p>持久化方式：</p>
<ul>
<li>RDB</li>
<li>AOF</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200513214944964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>RDB文件相关</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513214955679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200513215006207.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>主从复制</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513215016371.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>Security模块中进行密码设置</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513215026143.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>客户端连接相关</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxclients 10000  最大客户端数量</span><br><span class="line">maxmemory &lt;bytes&gt; 最大内存限制</span><br><span class="line">maxmemory-policy noeviction <span class="comment"># 内存达到限制值的处理策略</span></span><br></pre></td></tr></table></figure>

<p>redis 中的<strong>默认</strong>的过期策略是 <strong>volatile-lru</strong> 。</p>
<p><strong>设置方式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> maxmemory-policy volatile-lru </span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="maxmemory-policy-六种方式"><a href="#maxmemory-policy-六种方式" class="headerlink" title="maxmemory-policy 六种方式"></a><strong>maxmemory-policy 六种方式</strong></h4><p><strong>1、volatile-lru：</strong>只对设置了过期时间的key进行LRU（默认值）</p>
<p><strong>2、allkeys-lru ：</strong> 删除lru算法的key</p>
<p><strong>3、volatile-random：</strong>随机删除即将过期key</p>
<p><strong>4、allkeys-random：</strong>随机删除</p>
<p><strong>5、volatile-ttl ：</strong> 删除即将过期的</p>
<p><strong>6、noeviction ：</strong> 永不过期，返回错误</p>
<blockquote>
<p>AOF相关部分</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513215037918.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200513215047999.png" alt="在这里插入图片描述"></p>
<h1 id="十、持久化—RDB"><a href="#十、持久化—RDB" class="headerlink" title="十、持久化—RDB"></a>十、持久化—RDB</h1><p>RDB：Redis Databases</p>
<h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><hr>
<p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215126515.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><hr>
<p>在进行 <strong><code>RDB</code></strong> 的时候，**<code>redis</code>** 的主线程是不会做 <strong><code>io</code></strong> 操作的，主线程会 <strong><code>fork</code></strong> 一个子线程来完成该操作；</p>
<ol>
<li>Redis 调用forks。同时拥有父进程和子进程。</li>
<li>子进程将数据集写入到一个临时 RDB 文件中。</li>
<li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li>
</ol>
<p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215141519.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><hr>
<ol>
<li>save的规则满足的情况下，会自动触发rdb原则</li>
<li>执行flushall命令，也会触发我们的rdb原则</li>
<li>退出redis，也会自动产生rdb文件</li>
</ol>
<h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p>
<blockquote>
<p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513215150892.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；</p>
<h4 id="触发持久化规则"><a href="#触发持久化规则" class="headerlink" title="触发持久化规则"></a>触发持久化规则</h4><p>满足配置条件中的触发条件 ；</p>
<blockquote>
<p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215205970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200513215220858.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；</p>
<p><img src="https://img-blog.csdnimg.cn/2020051321523151.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>bgsave和save对比</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>save</th>
<th>bgsave</th>
</tr>
</thead>
<tbody><tr>
<td>IO类型</td>
<td>同步</td>
<td>异步</td>
</tr>
<tr>
<td>阻塞？</td>
<td>是</td>
<td>是（阻塞发生在fock()，通常非常快）</td>
</tr>
<tr>
<td>复杂度</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>优点</td>
<td>不会消耗额外的内存</td>
<td>不阻塞客户端命令</td>
</tr>
<tr>
<td>缺点</td>
<td>阻塞客户端命令</td>
<td>需要fock子进程，消耗内存</td>
</tr>
</tbody></table>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p>
<ol>
<li>适合大规模的数据恢复</li>
<li>对数据的完整性要求不高</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li>
<li>fork进程的时候，会占用一定的内容空间。</li>
</ol>
<h1 id="十一、持久化AOF"><a href="#十一、持久化AOF" class="headerlink" title="十一、持久化AOF"></a>十一、持久化AOF</h1><p><strong>Append Only File</strong></p>
<p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p>
<blockquote>
<p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
</blockquote>
<h3 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h3><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p>
<p>如果要使用AOF，需要修改配置文件：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215247113.png" alt="在这里插入图片描述"></p>
<p><code>appendonly no yes</code>则表示启用AOF</p>
<p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p>
<p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p>
<p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p>
<blockquote>
<p>优点和缺点</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly yes  <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会sync 消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync 可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure>

<p><strong>优点</strong></p>
<ol>
<li>每一次修改都会同步，文件的完整性会更加好</li>
<li>没秒同步一次，可能会丢失一秒的数据</li>
<li>从不同步，效率最高</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li>
<li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li>
</ol>
<h2 id="十二、RDB和AOP选择"><a href="#十二、RDB和AOP选择" class="headerlink" title="十二、RDB和AOP选择"></a>十二、RDB和AOP选择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table>
<thead>
<tr>
<th>RDB</th>
<th>AOF</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>启动优先级</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢数据</td>
<td>根据策略决定</td>
</tr>
</tbody></table>
<h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p>
<p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p>
<p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>
<h1 id="十三、Redis发布与订阅"><a href="#十三、Redis发布与订阅" class="headerlink" title="十三、Redis发布与订阅"></a>十三、Redis发布与订阅</h1><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215523258.png" alt="在这里插入图片描述"></p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img src="https://img-blog.csdnimg.cn/2020051321553483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>PSUBSCRIBE pattern [pattern..]</code></td>
<td>订阅一个或多个符合给定模式的频道。</td>
</tr>
<tr>
<td><code>PUNSUBSCRIBE pattern [pattern..]</code></td>
<td>退订一个或多个符合给定模式的频道。</td>
</tr>
<tr>
<td><code>PUBSUB subcommand [argument[argument]]</code></td>
<td>查看订阅与发布系统状态。</td>
</tr>
<tr>
<td><code>PUBLISH channel message</code></td>
<td>向指定频道发布消息</td>
</tr>
<tr>
<td><code>SUBSCRIBE channel [channel..]</code></td>
<td>订阅给定的一个或多个频道。</td>
</tr>
<tr>
<td><code>SUBSCRIBE channel [channel..]</code></td>
<td>退订一个或多个频道</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">------------订阅端----------------------</span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE sakura <span class="comment"># 订阅sakura频道</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit) <span class="comment"># 等待接收消息</span></span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span> <span class="comment"># 订阅成功的消息</span></span><br><span class="line">2) <span class="string">&quot;sakura&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span> <span class="comment"># 接收到来自sakura频道的消息 &quot;hello world&quot;</span></span><br><span class="line">2) <span class="string">&quot;sakura&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello world&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span> <span class="comment"># 接收到来自sakura频道的消息 &quot;hello i am sakura&quot;</span></span><br><span class="line">2) <span class="string">&quot;sakura&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello i am sakura&quot;</span></span><br><span class="line"></span><br><span class="line">--------------消息发布端-------------------</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH sakura <span class="string">&quot;hello world&quot;</span> <span class="comment"># 发布消息到sakura频道</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH sakura <span class="string">&quot;hello i am sakura&quot;</span> <span class="comment"># 发布消息</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">-----------------查看活跃的频道------------</span><br><span class="line">127.0.0.1:6379&gt; PUBSUB channels</span><br><span class="line">1) <span class="string">&quot;sakura&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p>
<p><img src="https://img-blog.csdnimg.cn/2020051321554964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li>
<li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li>
</ol>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol>
<li>消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）</li>
<li>多人在线聊天室。</li>
</ol>
<p>稍微复杂的场景，我们就会使用消息中间件MQ处理。</p>
<h1 id="十四、Redis主从复制"><a href="#十四、Redis主从复制" class="headerlink" title="十四、Redis主从复制"></a>十四、Redis主从复制</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p>
<p>默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li>
<li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li>
<li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li>
</ol>
<h3 id="为什么使用集群"><a href="#为什么使用集群" class="headerlink" title="为什么使用集群"></a>为什么使用集群</h3><ol>
<li>单台服务器难以负载大量的请求</li>
<li>单台服务器故障率高，系统崩坏概率大</li>
<li>单台服务器内存容量有限。</li>
</ol>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们在讲解配置文件的时候，注意到有一个<code>replication</code>模块 (见Redis.conf中第8条)</p>
<p>查看当前库的信息：<code>info replication</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 从机数量</span></span><br><span class="line">master_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcff</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<p>既然需要启动多个服务，就需要多个配置文件。每个配置文件对应修改以下信息：</p>
<ul>
<li>端口号</li>
<li>pid文件名</li>
<li>日志文件名</li>
<li>rdb文件名</li>
</ul>
<p>启动单机多服务集群：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215610163.png" alt="在这里插入图片描述"></p>
<h3 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h3><p>==默认情况下，每台Redis服务器都是主节点；==我们一般情况下只用配置从机就好了！</p>
<p>认老大！一主（79）二从（80，81）</p>
<p>使用<code>SLAVEOF host port</code>就可以为从机配置主机了。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215637483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>然后主机上也能看到从机的状态：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215645778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我们这里是使用命令搭建，是暂时的，==真实开发中应该在从机的配置文件中进行配置，==这样的话是永久的。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215654634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ol>
<li><p>从机只能读，不能写，主机可读可写但是多用于写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 127.0.0.1:6381&gt; <span class="built_in">set</span> name sakura <span class="comment"># 从机6381写入失败</span></span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; set name sakura # 从机6380写入失败</span></span><br><span class="line"><span class="string">(error) READONLY You can&#x27;</span>t write against a <span class="built_in">read</span> only replica.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;sakura&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p>
</li>
<li><p>当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p>
</li>
<li><p>第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p>
<ul>
<li>从机手动执行命令<code>slaveof no one</code>,这样执行以后从机会独立出来成为一个主机</li>
<li>使用哨兵模式（自动选举）</li>
</ul>
</li>
</ol>
<blockquote>
<p>如果没有老大了，这个时候能不能选择出来一个老大呢？手动！</p>
</blockquote>
<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么久重新连接！</p>
<h2 id="十五、哨兵模式"><a href="#十五、哨兵模式" class="headerlink" title="十五、哨兵模式"></a>十五、哨兵模式</h2><p>更多信息参考博客：<a href="https://www.jianshu.com/p/06ab9daf921d">https://www.jianshu.com/p/06ab9daf921d</a></p>
<p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p>
<p>单机单个哨兵</p>
<p>哨兵的作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li>
<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li>
</ul>
<p>多哨兵模式</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ga1RyfVc-1597890996528)(狂神说 Redis.assets/image-20200818233316478.png)]</p>
<p>哨兵的核心配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>

<ul>
<li>数字1表示 ：当一个哨兵主观认为主机断开，就可以客观认为主机故障，然后开始选举新的主机。</li>
</ul>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-sentinel xxx/sentinel.conf</span><br></pre></td></tr></table></figure>

<p>成功启动哨兵模式</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215752444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>此时哨兵监视着我们的主机6379，当我们断开主机后：</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215806972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>哨兵模式优缺点</p>
</blockquote>
<p><strong>优点：</strong></p>
<ol>
<li>哨兵集群，基于主从复制模式，所有主从复制的优点，它都有</li>
<li>主从可以切换，故障可以转移，系统的可用性更好</li>
<li>哨兵模式是主从模式的升级，手动到自动，更加健壮</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li>
<li>实现哨兵模式的配置其实是很麻烦的，里面有很多配置项</li>
</ol>
<blockquote>
<p>哨兵模式的全部配置</p>
</blockquote>
<p>完整的哨兵模式配置文件 sentinel.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span></span><br><span class="line"><span class="comment">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span></span><br><span class="line"><span class="comment">#一个是事件的类型，</span></span><br><span class="line"><span class="comment">#一个是事件的描述。</span></span><br><span class="line"><span class="comment">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>

<h2 id="十六、缓存穿透与雪崩"><a href="#十六、缓存穿透与雪崩" class="headerlink" title="十六、缓存穿透与雪崩"></a>十六、缓存穿透与雪崩</h2><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote>
<p>概念</p>
</blockquote>
<p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>布隆过滤器</strong></p>
<p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215824722.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>缓存空对象</strong></p>
<p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215836317.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> 这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p>
<p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p>
<h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><blockquote>
<p>概念</p>
</blockquote>
<p> 相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p>
<p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<ol>
<li><p><strong>设置热点数据永不过期</strong></p>
<p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p>
</li>
<li><p><strong>加互斥锁(分布式锁)</strong></p>
<p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p>
</li>
</ol>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote>
<p>概念</p>
</blockquote>
<p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p>
<p><img src="https://img-blog.csdnimg.cn/20200513215850428.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>解决方案</p>
</blockquote>
<ul>
<li><p>redis高可用</p>
<p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p>
</li>
<li><p>限流降级</p>
<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
</li>
<li><p>数据预热</p>
<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Ajax-code</title>
    <url>/2022/06/10/Ajax/Ajax-code/Ajax-code/</url>
    <content><![CDATA[<h2 id="低版本IE来说AJAX-get缓存问题"><a href="#低版本IE来说AJAX-get缓存问题" class="headerlink" title="低版本IE来说AJAX get缓存问题"></a>低版本IE来说AJAX get缓存问题</h2><p>ajax2.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1. 创建AJAX核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//3. 开启通道</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取到用户填写的usercode和username</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usercode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;usercode&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 搞一个时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(new Date().getTime())</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//xhr.open(&quot;GET&quot;, &quot;/ajax/ajaxrequest2?t=&quot;+new Date().getTime()+&quot;&amp;usercode=&quot;+usercode+&quot;&amp;username=&quot;+username, true)</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest2?t=&quot;</span>+<span class="built_in">Math</span>.random()+<span class="string">&quot;&amp;usercode=&quot;</span>+usercode+<span class="string">&quot;&amp;username=&quot;</span>+username, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//4. 发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">usercode<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usercode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">username<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送ajax get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;myspan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AjaxRequest2Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest2Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-13 10:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest2Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取响应流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        <span class="comment">//out.print(&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取ajax get请求提交的数据</span></span><br><span class="line">        String usercode = request.getParameter(<span class="string">&quot;usercode&quot;</span>);</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;usercode=&quot;</span> + usercode + <span class="string">&quot;, username=&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="AJAX-POST请求模拟表单提交数据"><a href="#AJAX-POST请求模拟表单提交数据" class="headerlink" title="AJAX POST请求模拟表单提交数据"></a>AJAX POST请求模拟表单提交数据</h2><p>ajax4.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送ajax post请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mybtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送AJAX POST请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 创建AJAX核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3. 开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest3&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4. 发送请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 怎么模拟AJAX提交form表单呢？设置请求头的内容类型(这行代码非常关键，是模拟form表单提交的关键代码。)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置请求头的内容类型时，必须在open之后。</span></span></span><br><span class="line"><span class="javascript">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 放到send()这个函数的小括号当中的数据，会自动在请求体当中提交数据。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用JS代码获取用户填写的用户名和密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&quot;password&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//xhr.send(&quot;注意格式：放在这里的数据就是在请求体当中提交的，格式不能随便来，还是需要遵循HTTP的协议：name=value&amp;name=value&amp;name=value&quot;)</span></span></span><br><span class="line"><span class="javascript">            xhr.send(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;mybtn&quot;</span>&gt;</span>发送AJAX POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AjaxRequest3Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest3Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 发送AJAX POST请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-13 15:39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest3Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line">		<span class="comment">//out.print(&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取提交数据</span></span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		out.print(<span class="string">&quot;用户名是：&quot;</span> + username + <span class="string">&quot;，密码是：&quot;</span> + password);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="AJAX经典案例-验证用户名是否可用"><a href="#AJAX经典案例-验证用户名是否可用" class="headerlink" title="AJAX经典案例-验证用户名是否可用"></a>AJAX经典案例-验证用户名是否可用</h2><p>ajax5.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX POST请求验证用户名是否可用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;tipMsg&quot;</span>).innerHTML = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(&quot;正在发送AJAX POST请求验证用户名&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送AJAX POST请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;tipMsg&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest4&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.</span></span></span><br><span class="line"><span class="javascript">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取表单数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            xhr.send(<span class="string">&quot;uname=&quot;</span> + username)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;tipMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AjaxRequest4Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest4Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 验证用户名是否可用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-14 10:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest4Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 获取用户名</span></span><br><span class="line">		String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">		<span class="comment">// 打布尔标记（一种编程模型）</span></span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">// 默认是用户名不存在。</span></span><br><span class="line">		<span class="comment">// 连接数据库验证用户名是否存在</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 1.注册驱动</span></span><br><span class="line">			Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">			<span class="comment">// 2.获取连接</span></span><br><span class="line">			conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">			<span class="comment">// 3.获取预编译的数据库操作对象</span></span><br><span class="line">			String sql = <span class="string">&quot;select id,username from t_user where username = ?&quot;</span>;</span><br><span class="line">			ps = conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>, uname);</span><br><span class="line">			<span class="comment">// 4.执行SQL语句</span></span><br><span class="line">			rs = ps.executeQuery();</span><br><span class="line">			<span class="comment">// 5.处理结果集</span></span><br><span class="line">			<span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">				<span class="comment">// 用户名已存在。</span></span><br><span class="line">				flag = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 6.释放资源</span></span><br><span class="line">			<span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					ps.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 响应结果到浏览器</span></span><br><span class="line">		response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="comment">// 用户名已存在，不可用</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;对不起，用户名已存在&lt;/font&gt;&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 用户名不存在，可以使用</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可以使用&lt;/font&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="发送AJAX请求动态展示学员列表"><a href="#发送AJAX请求动态展示学员列表" class="headerlink" title="发送AJAX请求动态展示学员列表"></a>发送AJAX请求动态展示学员列表</h2><p>ajax6.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送AJAX请求，显示学生列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.创建核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;stutbody&quot;).innerHTML = this.responseText</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 将json格式的字符串转换成json对象</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> stuList = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText) <span class="comment">// 是一个数组，并且数组中有多个学生数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stuList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> stu = stuList[i]</span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.name+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.age+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.addr+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest5?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示学员列表&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;张三&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;北京大兴区&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;李四&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;北京海淀区&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="WEB前端将json格式字符串转换成json对象"><a href="#WEB前端将json格式字符串转换成json对象" class="headerlink" title="WEB前端将json格式字符串转换成json对象"></a>WEB前端将json格式字符串转换成json对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json test2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--从后端java程序中响应回来的是json格式的字符串，那么你怎么把json格式的字符串转换成json对象呢？--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这是一个json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;username&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;password&quot;</span> : <span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 是json对象，才能这样访问。</span></span></span><br><span class="line"><span class="javascript">    alert(user.username + <span class="string">&quot;,&quot;</span> + user.password)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 从服务器端返回来的不是一个json对象，是一个json格式的字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fromJavaServerJsonStr = <span class="string">&quot;&#123;\&quot;usercode\&quot; : 111, \&quot;age\&quot; : 20&#125;&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 有两种方式：</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第一种方式：使用eval函数。（这个以前在javascript语言中讲过，这里就不再说了。）</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二种方式：调用javascript语言中的内置对象JSON的一个方法parse。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jsonobj = <span class="built_in">JSON</span>.parse(fromJavaServerJsonStr)</span></span><br><span class="line"><span class="javascript">    alert(jsonobj.usercode + <span class="string">&quot;,&quot;</span> + jsonobj.age)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用fastjson对功能进行改进"><a href="#使用fastjson对功能进行改进" class="headerlink" title="使用fastjson对功能进行改进"></a>使用fastjson对功能进行改进</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.ajax.beans.Student;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest5Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 发送AJAX请求动态展示学员列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-14 12:08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest5Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 连接数据库，查询学员信息，拼接HTML代码，响应HTML代码到浏览器（这里就不再连接数据库了，写死了。）</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*// 连接数据库，拼接HTML代码</span></span><br><span class="line"><span class="comment">        StringBuilder html = new StringBuilder();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 目前存在的缺点：在后端的java代码中又开始拼接HTML代码了。显然这是在后端java中写前端的HTML代码。不好维护。</span></span><br><span class="line"><span class="comment">        // 能不能直接将数据返回，给WEB前端数据就行了。让WEB前端能够拿到数据就行，然后页面展示的功能交给WEB前端来处理。</span></span><br><span class="line"><span class="comment">        // 我们后端的java代码能不能只返回数据？？？？可以。（返回数据可以采用JSON的格式，也可以采用XML的格式）</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;1&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;王五&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;20&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;北京大兴区&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;2&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;李四&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;22&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;td&gt;北京海淀区&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="comment">        html.append(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        out.print(html);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将以上程序拼接HTML，换成拼接JSON格式的字符串。</span></span><br><span class="line">        <span class="comment">//String jsonStr = &quot;[&#123;\&quot;name\&quot;:\&quot;王五\&quot;,\&quot;age\&quot;:20,\&quot;addr\&quot;:\&quot;北京大兴区\&quot;&#125;, &#123;\&quot;name\&quot;:\&quot;李四\&quot;,\&quot;age\&quot;:22,\&quot;addr\&quot;:\&quot;北京海淀区\&quot;&#125;]&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备StringBuilder对象，拼接JSON</span></span><br><span class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String jsonStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，查询所有的学生，拼接json字符串</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="comment">// 3.获取预编译的数据库操作对象</span></span><br><span class="line">            String sql = <span class="string">&quot;select name, age, addr from t_student&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 5.处理结果集</span></span><br><span class="line">            <span class="comment">/*json.append(&quot;[&quot;);</span></span><br><span class="line"><span class="comment">            while (rs.next()) &#123;</span></span><br><span class="line"><span class="comment">                // 获取每个学生的信息</span></span><br><span class="line"><span class="comment">                String name = rs.getString(&quot;name&quot;);</span></span><br><span class="line"><span class="comment">                String age = rs.getString(&quot;age&quot;);</span></span><br><span class="line"><span class="comment">                String addr = rs.getString(&quot;addr&quot;);</span></span><br><span class="line"><span class="comment">                // 拼接json格式的字符串</span></span><br><span class="line"><span class="comment">                // &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line"><span class="comment">                json.append(&quot;&#123;\&quot;name\&quot;:\&quot;&quot;);</span></span><br><span class="line"><span class="comment">                json.append(name);</span></span><br><span class="line"><span class="comment">                json.append(&quot;\&quot;,\&quot;age\&quot;:&quot;);</span></span><br><span class="line"><span class="comment">                json.append(age);</span></span><br><span class="line"><span class="comment">                json.append(&quot;,\&quot;addr\&quot;:\&quot;&quot;);</span></span><br><span class="line"><span class="comment">                json.append(addr);</span></span><br><span class="line"><span class="comment">                json.append(&quot;\&quot;&#125;,&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            jsonStr = json.substring(0, json.length() - 1) + &quot;]&quot;;*/</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 取出数据</span></span><br><span class="line">                String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">                String addr = rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">                <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">                Student s = <span class="keyword">new</span> Student(name, age, addr);</span><br><span class="line">                <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">                studentList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">            jsonStr = JSON.toJSONString(studentList);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应JSON格式的字符串给前端。</span></span><br><span class="line">        out.print(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发送AJAX请求，显示学生列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.创建核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//document.getElementById(&quot;stutbody&quot;).innerHTML = this.responseText</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 将json格式的字符串转换成json对象</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> stuList = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText) <span class="comment">// 是一个数组，并且数组中有多个学生数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; stuList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> stu = stuList[i]</span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.name+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.age+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+stu.addr+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest5?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示学员列表&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;张三&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;北京大兴区&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;李四&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;北京海淀区&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="AJAX基于XML的数据交换格式"><a href="#AJAX基于XML的数据交换格式" class="headerlink" title="AJAX基于XML的数据交换格式"></a>AJAX基于XML的数据交换格式</h2><p>ajax7.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> xmlDoc = <span class="built_in">this</span>.responseXML</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> students = xmlDoc.getElementsByTagName(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> nameOrAge = student.childNodes</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (node.nodeName == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.textContent+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                                &#125;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">if</span> (node.nodeName == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.textContent+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                                &#125;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AjaxRequestServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        StringBuilder xml = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="AJAX的同步和异步"><a href="#AJAX的同步和异步" class="headerlink" title="AJAX的同步和异步"></a>AJAX的同步和异步</h2><p>ajax9.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>演示ajax同步和异步<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//xhr.open(&quot;GET&quot;, &quot;/ajax/ajaxrequest8?t=&quot; + new Date().getTime(), true)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 我不支持异步了，我这个请求只要发，你们都得靠边站。都得等着我结束你们才能发请求。</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest8?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn2&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>).innerHTML = <span class="built_in">this</span>.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">this</span>.status)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest9?t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            xhr.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>ajax请求1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>ajax请求2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AjaxRequest8Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest8Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试ajax同步和异步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 13:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest8Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;ajax请求1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AjaxRequest9Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest8Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试ajax同步和异步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 13:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest9&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest9Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;ajax请求2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="回顾JS基于对象编程"><a href="#回顾JS基于对象编程" class="headerlink" title="回顾JS基于对象编程"></a>回顾JS基于对象编程</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>回顾javascript中的类的定义，对象的创建。属性的访问，方法的访问。<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 在JS当中怎么定义一个类。</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">a, b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.usercode = a;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.username = b;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 方法（实例方法，通过对象调用的。）</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.doSome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.username + <span class="string">&quot; doSome....&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 静态方法（直接用类名调用）</span></span></span><br><span class="line"><span class="javascript">    User.doOther = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;user doOther....&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*User = function(usercode, username)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      // 属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      this.usercode = usercode;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      this.username = username;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      // 方法（实例方法，通过对象调用的。）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      this.doSome = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          console.log(username + &quot; doSome....&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      // 静态方法（直接用类名调用）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      User.doOther = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          console.log(&quot;user doOther....&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">  &#125;*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建对象，访问对象的属性，访问对象的方法，访问静态方法</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// User(); 直接这样调用，你只是把它当做一个普通的函数去执行，不会创建对象，在堆中没有这个对象。</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// new User(); 这样调用的话，其实就是调用该类的构造方法，创建对象，并且在堆中分配空间。</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 访问属性</span></span></span><br><span class="line"><span class="javascript">  alert(user.usercode + <span class="string">&quot;,&quot;</span> + user.username)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调用方法（实例方法）</span></span></span><br><span class="line"><span class="javascript">  user.doSome()</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 调用静态方法</span></span></span><br><span class="line"><span class="javascript">  User.doOther()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 后期如果想给某个类型扩展方法，还可以使用prototype属性</span></span></span><br><span class="line"><span class="javascript">  User.prototype.扩展的 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;打印。。。。。&quot;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  user.扩展的()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="封装jQuery"><a href="#封装jQuery" class="headerlink" title="封装jQuery"></a>封装jQuery</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手动封装JS库jQuery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*封装一个函数，通过这个函数可以获取到html页面中的节点，这个函数我给他起一个名字，叫做：jQuery*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*要封装的代码是：根据id来获取元素。document.getElementById(&quot;btn&quot;)*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*设计思路来自于CSS的语法。 #id 可以获取到这个元素 */</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>)</span>&#123; <span class="comment">// selector可能是#id，也可以能是其他的选择器，例如类选择器：.class</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 根据id获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// selector是一个id选择器</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//var domObj = document.getElementById(selector.substring(1))</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 升级成全局变量</span></span></span><br><span class="line"><span class="javascript">                domObj = <span class="built_in">document</span>.getElementById(selector.substring(<span class="number">1</span>))</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 返回的dom对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//return domObj</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 返回的jQuery对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 页面加载完毕之后，注册回调函数。</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = selector</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个html()函数，代替：domObj.innerHTML = &quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.html = <span class="function"><span class="keyword">function</span>(<span class="params">htmlStr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            domObj.innerHTML = htmlStr</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义一个click()函数，代替：domObj.onclick = function()&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.click = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            domObj.onclick = fun</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            domObj.onfocus = fun</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.blur = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            domObj.onblur = fun</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.change = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            domObj.onchange = fun</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ....</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.val = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> domObj.value</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                domObj.value = v</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $ = jQuery</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// --------------------------------------------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*window.onload = function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        // document.getElementById(&quot;btn&quot;).onclick = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        //     document.getElementById(&quot;div1&quot;).innerHTML = &quot;&lt;font color=&#x27;red&#x27;&gt;用户名不可用！！！！&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        // &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">        // jQuery(&quot;#btn&quot;).onclick = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        //     jQuery(&quot;#div1&quot;).innerHTML = &quot;&lt;font color=&#x27;red&#x27;&gt;用户名不可用~~~~&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        // &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">        $(&quot;#btn&quot;).onclick = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $(&quot;#div1&quot;).innerHTML = &quot;&lt;font color=&#x27;red&#x27;&gt;~~~~用户名不可用~~~~&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#125;*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(function()&#123;&#125;) 作用是什么？</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只要你写上以上的代码，就表示在页面加载完毕之后，执行里面的回调函数。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*$(function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        $(&quot;#btn&quot;).onclick = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $(&quot;#div1&quot;).innerHTML = &quot;&lt;font color=&#x27;red&#x27;&gt;%%%%%%%%用户名不可用~~~~&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#125;)*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;%%%%%%%%用户名不可用%%%%%%%%%&lt;/font&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取文本框中的用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// var username=document.getElementById(&quot;username&quot;).value</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// alert(username )</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username=$(<span class="string">&quot;#username&quot;</span>).val()</span></span><br><span class="line"><span class="javascript">            alert(username)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 修改文本框的value</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//document.getElementById(&quot;username&quot;).value = &quot;呵呵&quot;</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username&quot;</span>).val(<span class="string">&quot;呵呵了！！！&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="将jQuery单独写到js文件中使用时引入库"><a href="#将jQuery单独写到js文件中使用时引入库" class="headerlink" title="将jQuery单独写到js文件中使用时引入库"></a>将jQuery单独写到js文件中使用时引入库</h2><p>jQuery.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">    domObj = <span class="built_in">document</span>.getElementById(selector.substring(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = selector</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="built_in">this</span>.html = <span class="function"><span class="keyword">function</span>(<span class="params">htmlStr</span>)</span>&#123;</span><br><span class="line">      domObj.innerHTML = htmlStr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.click = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">      domObj.onclick = fun</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">      domObj.onfocus = fun</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.blur = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">      domObj.onblur = fun</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.change = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">      domObj.onchange = fun</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.val = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> domObj.value</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       domObj.value = v</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    $ = jQuery</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>jQueryTest</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试我们自己编写jQuery库（jQuery本质上就是JS的库）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用jQuery库的第一件事，是把jQuery库引进来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(&quot;hello&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取文本框内容</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">&quot;#usercode&quot;</span>).val())</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 修改文本框的value</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#usercode&quot;</span>).val(<span class="string">&quot;张三&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置div内容</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#mydiv&quot;</span>).html(<span class="string">&quot;我们自己封装的jQuery不是也挺好吗！！！&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户代码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usercode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="将AJAX请求封装到jQuery库中"><a href="#将AJAX请求封装到jQuery库中" class="headerlink" title="将AJAX请求封装到jQuery库中"></a>将AJAX请求封装到jQuery库中</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="built_in">document</span>.getElementById(selector.substring(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.html = <span class="function"><span class="keyword">function</span>(<span class="params">htmlStr</span>)</span>&#123;</span><br><span class="line">        domObj.innerHTML = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.click = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onclick = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onfocus = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.blur = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        domObj.onblur = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.change = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onchange = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.val = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.value</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.value = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">jsonArgs</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.success(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.open(<span class="string">&quot;POST&quot;</span>, jsonArgs.url, jsonArgs.async)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.send(jsonArgs.data)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, jsonArgs.url + <span class="string">&quot;?&quot;</span> + jsonArgs.data, jsonArgs.async)</span><br><span class="line">            xhr.send()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> jQuery()</span><br></pre></td></tr></table></figure>

<p>ajax11.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>将AJAX代码进行封装，封装到jQuery库当中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*// 1.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            var xhr = new XMLHttpRequest();</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            // 2.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            xhr.onreadystatechange = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                if (this.readyState == 4) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    if (this.status == 200) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        // 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        var jsonObj = JSON.parse(this.responseText)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        // 返回的json格式的数据：&#123;&quot;uname&quot; : &quot;zhangsan&quot;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        document.getElementById(&quot;mydiv&quot;).innerHTML = jsonObj.uname</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            // 3.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            xhr.open(&quot;POST&quot;, &quot;/ajax/ajaxrequest10&quot;, true)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            // 4.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            var username = document.getElementById(&quot;username&quot;).value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            xhr.send(&quot;username=&quot; + username)*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用jQuery的工具类中的ajax方法来发送ajax请求</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span> : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span> : <span class="string">&quot;/ajax/ajaxrequest10&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span> : <span class="string">&quot;username=&quot;</span> + username,</span></span><br><span class="line"><span class="javascript">                <span class="attr">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 程序响应回来之后，对于客户端来说要拿到响应的数据，然后解析这个数据，展示到页面上。</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = json.uname</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Ajaxrequest10</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest10Servet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 将AJAX请求封装到jQuery当中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 19:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest10Servet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//&#123;&quot;uname&quot; : &quot;zhangsan&quot;&#125;</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;&#123;\&quot;uname\&quot; : \&quot;&quot;</span>+username+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试编写的jQuery库"><a href="#测试编写的jQuery库" class="headerlink" title="测试编写的jQuery库"></a>测试编写的jQuery库</h2><p>ajax12.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试我们自己手动开发的jQuery库<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入自己写的jQuery库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//type : &quot;GET&quot;,</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span> : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span> : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span> : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).val(),</span></span><br><span class="line"><span class="javascript">                <span class="attr">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#div1&quot;</span>).html(json.uname)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>发送ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Ajaxrequest11</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest11Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试自己写的jQuery库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 19:38</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest11&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxRequest11Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// &#123;&quot;uname&quot;:&quot;zhangsan&quot;&#125;</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;&#123;\&quot;uname\&quot;:\&quot;&quot;</span>+username.toUpperCase()+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// &#123;&quot;uname&quot;:&quot;zhangsan&quot;&#125;</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;&#123;\&quot;uname\&quot;:\&quot;&quot;</span>+username.toLowerCase()+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AJAX实现省市联动动态展示"><a href="#AJAX实现省市联动动态展示" class="headerlink" title="AJAX实现省市联动动态展示"></a>AJAX实现省市联动动态展示</h2><p>ajax13</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>省市联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入我们自己编写的jQuery库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发送ajax请求，获取所有的省份。省份的pcode是null</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span> : <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span> : <span class="string">&quot;/ajax/listArea&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span> : <span class="string">&quot;t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span></span><br><span class="line"><span class="javascript">            <span class="attr">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">jsonArr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// [&#123;&quot;code&quot;:&quot;001&quot;, &quot;name&quot;:&quot;河北省&quot;&#125;,&#123;&quot;code&quot;:&quot;002&quot;, &quot;name&quot;:&quot;河南省&quot;&#125;]</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 以上格式的json是我们自己设计出来的，希望服务器能够给我们返回这样一个json格式的字符串。</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html = <span class="string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择省份--&lt;/option&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jsonArr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> area = jsonArr[i]</span></span><br><span class="line"><span class="javascript">                    html += <span class="string">&quot;&lt;option value=&#x27;&quot;</span>+area.code+<span class="string">&quot;&#x27;&gt;&quot;</span>+area.name+<span class="string">&quot;&lt;/option&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#province&quot;</span>).html(html)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 只要change发生，就发送ajax请求</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#province&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(&quot;发送ajax请求&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(this)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(this.value)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span> : <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span> : <span class="string">&quot;/ajax/listArea&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span> : <span class="string">&quot;t=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">&quot;&amp;pcode=&quot;</span> + <span class="built_in">this</span>.value,</span></span><br><span class="line"><span class="javascript">                <span class="attr">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">jsonArr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// [&#123;&quot;code&quot;:&quot;006&quot;, &quot;name&quot;:&quot;XXX&quot;&#125;,&#123;&quot;code&quot;:&quot;008&quot;, &quot;name&quot;:&quot;YYYY&quot;&#125;]</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> html = <span class="string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择市--&lt;/option&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jsonArr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> area = jsonArr[i]</span></span><br><span class="line"><span class="javascript">                        html += <span class="string">&quot;&lt;option value=&#x27;&quot;</span>+area.code+<span class="string">&quot;&#x27;&gt;&quot;</span>+area.name+<span class="string">&quot;&lt;/option&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#city&quot;</span>).html(html)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;option value=&quot;&quot;&gt;&amp;#45;&amp;#45;请选择省份&amp;#45;&amp;#45;&lt;/option&gt;</span></span><br><span class="line"><span class="comment">    &lt;option value=&quot;001&quot;&gt;河北省&lt;/option&gt;</span></span><br><span class="line"><span class="comment">    &lt;option value=&quot;002&quot;&gt;河南省&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jQuery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.charAt(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="built_in">document</span>.getElementById(selector.substring(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.onload = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.html = <span class="function"><span class="keyword">function</span>(<span class="params">htmlStr</span>)</span>&#123;</span><br><span class="line">        domObj.innerHTML = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.click = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onclick = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.focus = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onfocus = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.blur = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        domObj.onblur = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.change = <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>)</span>&#123;</span><br><span class="line">        domObj.onchange = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.val = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.value</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.value = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">jsonArgs</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.success(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.open(<span class="string">&quot;POST&quot;</span>, jsonArgs.url, jsonArgs.async)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.send(jsonArgs.data)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.type.toUpperCase() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, jsonArgs.url + <span class="string">&quot;?&quot;</span> + jsonArgs.data, jsonArgs.async)</span><br><span class="line">            xhr.send()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> jQuery()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ListAreaServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.ajax.beans.Area;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ListAreaServlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 动态获取对应的区域</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 21:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/listArea&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListAreaServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String pcode = request.getParameter(<span class="string">&quot;pcode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，获取所有的对应区域。最终响应一个JSON格式的字符串给WEB前端。</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Area&gt; areaList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">            String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 获取预编译数据库操作对象</span></span><br><span class="line">            String sql = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(pcode == <span class="keyword">null</span>)&#123;</span><br><span class="line">                sql = <span class="string">&quot;select code,name from t_area where pcode is null&quot;</span>;</span><br><span class="line">                ps = conn.prepareStatement(sql);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sql = <span class="string">&quot;select code,name from t_area where pcode = ?&quot;</span>;</span><br><span class="line">                ps = conn.prepareStatement(sql);</span><br><span class="line">                ps.setString(<span class="number">1</span>, pcode);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                String code = rs.getString(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                Area a = <span class="keyword">new</span> Area(code, name);</span><br><span class="line">                areaList.add(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用fastjson将java对象转换成json字符串。</span></span><br><span class="line">        String json = JSON.toJSONString(areaList);</span><br><span class="line">        <span class="comment">// 响应JSON。</span></span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ajax跨域问题"><a href="#ajax跨域问题" class="headerlink" title="ajax跨域问题"></a>ajax跨域问题</h2><h3 id="哪些请求可以跨域"><a href="#哪些请求可以跨域" class="headerlink" title="哪些请求可以跨域"></a>哪些请求可以跨域</h3><img src="/2022/06/10/Ajax/Ajax-code/Ajax-code/image-20220716172700134.png" class="" title="image-20220716172700134">

<h3 id="ajax跨域解决之设置响应头"><a href="#ajax跨域解决之设置响应头" class="headerlink" title="ajax跨域解决之设置响应头"></a>ajax跨域解决之设置响应头</h3><p>a-ajax1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试：ajax跨域访问会不会有问题？？？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*window.onload = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        document.getElementById(&quot;btn&quot;).onclick = function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#125;*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * 默认情况下：发送ajax跨域请求的时候会出现以下错误：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * Access to XMLHttpRequest at &#x27;http://localhost:8081/b/hello&#x27; from origin &#x27;http://localhost:8080&#x27; has been blocked by CORS policy:</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * 出现这个错误的根本原因是：跨域的时候，不允许共享同一个XMLHttpRequest对象。因为共享同一个XMLHttpRequest对象是不安全的。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * 重点提示：CORS策略阻止（这个ajax跨域请求被：同源策略阻止。）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * 什么是同源策略？？？？？</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *      同源策略是浏览器的一种安全策略。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * 什么是同源？什么是不同源？</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *      协议一致、域名一致、端口号一致。才是同源。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *      只要上面的任一元素不一致，就是不同源。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *      同源：XMLHttpRequest对象可以共享。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *      不同源：XMLHttpRequest对象不可以共享。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用ES6新特性：箭头函数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送ajax的跨域请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 创建核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// let是一个关键字，可以定义变量。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// ES6的新特性：let和const关键字都可以定义变量。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 注意：在JS中声明变量，可以使用：var let const。他们之间有什么区别？自己研究。</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xmlHttpRequest.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xmlHttpRequest.status &gt;= <span class="number">200</span> &amp;&amp; xmlHttpRequest.status &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = xmlHttpRequest.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3. 开启通道</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8081/b/hello&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4. 发送请求</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送ajax跨域请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b-HelloServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.b.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 设置响应头，允许ajax跨域请求</span></span><br><span class="line">		<span class="comment">//response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:8080&quot;);</span></span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="comment">// 响应</span></span><br><span class="line">		<span class="comment">//response.getWriter().print(&quot;hello ajax!!!&quot;);</span></span><br><span class="line"></span><br><span class="line">		response.getWriter().print(<span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;&#125;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ajax跨域问题解决方案之jsonp方式"><a href="#ajax跨域问题解决方案之jsonp方式" class="headerlink" title="ajax跨域问题解决方案之jsonp方式"></a>ajax跨域问题解决方案之jsonp方式</h3><p>a-ajax3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp跨域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:8081/b/jsonp2?fun=sayHello&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自定义的函数</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// data是一个json：&#123;&quot;username&quot; : &quot;lucy&quot;&#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = data.username</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 加载script元素</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 创建script元素对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> htmlScriptElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置script的type属性</span></span></span><br><span class="line"><span class="javascript">      htmlScriptElement.type = <span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 设置script的src属性</span></span></span><br><span class="line"><span class="javascript">      htmlScriptElement.src = <span class="string">&quot;http://localhost:8081/b/jsonp2?fun=sayHello&quot;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 将script对象添加到body标签中（这一步就是加载script）</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(htmlScriptElement)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>jsonp解决跨域问题，达到ajax局部刷新的效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b-JSONPServlet2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.b.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jsonp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONPServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取函数名</span></span><br><span class="line">        String fun = request.getParameter(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">        <span class="comment">// 响应一段js代码(响应数据库里的数据，这里还没连接数据库)</span></span><br><span class="line">        response.getWriter().print(fun + <span class="string">&quot;(&#123;\&quot;username\&quot; : \&quot;lucy\&quot;&#125;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ajax跨域问题解决方案之jQuery封装的jsonp"><a href="#ajax跨域问题解决方案之jQuery封装的jsonp" class="headerlink" title="ajax跨域问题解决方案之jQuery封装的jsonp"></a>ajax跨域问题解决方案之jQuery封装的jsonp</h3><p>a-ajax4</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery的jsonp封装解决ajax跨域问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入jQuery库：这个jQuery库是官网的，不是咱们手写封装的山寨版。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/a/js/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这个函数不需要你写，jQuery可以自动帮助你生成</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//function jQuery3600508253314856699_1655528968612(json)&#123; // 系统自动生成的这个函数默认情况，会自动调用success的回调函数。 &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义的函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#mydiv&quot;</span>).html(<span class="string">&quot;欢迎你：&quot;</span> + data.username)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送所谓的ajax请求（其实本质上并不是一个ajax请求。只是披着ajax的皮。乔装打扮的ajax。）</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span> : <span class="string">&quot;GET&quot;</span>, <span class="comment">// jsonp请求只支持get请求。</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 虽然这里的url是这样写的，但实际上发送的请求是：/b/jsonp3?callback=jQuery3600508253314856699_1655528968612&amp;_=1655528968613</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// callback=jQuery3600508253314856699_1655528968612</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// callback就是我们之前的fun</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// jQuery3600508253314856699_1655528968612就是我们之前的sayHello，而这个名字是jQuery自动为我们生成的。</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span> : <span class="string">&quot;http://localhost:8081/b/jsonp3&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">dataType</span> : <span class="string">&quot;jsonp&quot;</span>, <span class="comment">// 指定数据类型是jsonp形式。【最关键的是它】</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">jsonp</span> : <span class="string">&quot;fun&quot;</span>, <span class="comment">// 不采用默认的参数名callback，用这个属性来指定具体的参数名。</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">jsonpCallback</span> : <span class="string">&quot;sayHello&quot;</span> <span class="comment">// 不采用默认的回调函数，用这个属性来指定具体的回调函数。</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/*success : function(data)&#123; // data变量用来接收服务器端的响应(data是一个json：&#123;&quot;username&quot;:&quot;lisi&quot;&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    $(&quot;#mydiv&quot;).html(&quot;欢迎你：&quot; + data.username)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;*/</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>jQuery库封装的jsonp<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b-JSONPServlet3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.b.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jsonp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONPServlet3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取函数名</span></span><br><span class="line">        <span class="comment">//String callback = request.getParameter(&quot;callback&quot;);</span></span><br><span class="line">        String callback = request.getParameter(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应一段js代码，调用函数</span></span><br><span class="line">        response.getWriter().print(callback + <span class="string">&quot;(&#123;\&quot;username\&quot;:\&quot;lisi\&quot;&#125;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ajax跨域问题解决方案之代理机制的代码实现"><a href="#ajax跨域问题解决方案之代理机制的代码实现" class="headerlink" title="ajax跨域问题解决方案之代理机制的代码实现"></a>ajax跨域问题解决方案之代理机制的代码实现</h3><p>a-ajax5</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用代理机制完成ajax跨域访问<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6当中的有一个新语法：箭头函数。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.创建核心对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// const可以声明变量。(可以自己研究一下：var let const声明变量时有什么区别)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xmlHttpRequest.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这里也可以使用区间的方式，因为状态码是200~299都是正常响应结束。</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xmlHttpRequest.status &gt;= <span class="number">200</span> &amp;&amp; xmlHttpRequest.status &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).innerHTML = xmlHttpRequest.responseText</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/a/proxy&quot;</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="javascript">            xmlHttpRequest.send()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>使用代理机制解决ajax跨域访问<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mydiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>a-ProxyServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/proxy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 通过httpclient组件，发送HTTP GET请求，访问 TargetServlet</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">&quot;http://localhost:8081/b/target&quot;</span>);</span><br><span class="line">        httpGet.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        HttpResponse resp = httpClient.execute(httpGet);</span><br><span class="line">        HttpEntity entity = resp.getEntity();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(entity.getContent(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuffer responseSB = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            responseSB.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">        <span class="comment">// b站点响应回来的数据</span></span><br><span class="line">        response.getWriter().print(responseSB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>b-TargetServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.b.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 响应一个json字符串。</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;jackson\&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ajax搜索联想和自动补全"><a href="#ajax搜索联想和自动补全" class="headerlink" title="ajax搜索联想和自动补全"></a>ajax搜索联想和自动补全</h2><p>ajax-autocomplete</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax实现搜索联想和自动补全功能<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.userInput</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.showDataDiv</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid lightgray;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.showDataDiv</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.showDataDiv</span> <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*不使用jQuery，也不使用我们自己写的jQuery库。使用原生的ajax实现搜索联想和自动补全。*/</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;keywords&quot;</span>).onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">this</span>.value == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;datadiv&quot;</span>).style.display = <span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1. 创建AJAX核心对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2. 注册回调函数</span></span></span><br><span class="line"><span class="javascript">                xmlHttpRequest.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xmlHttpRequest.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (xmlHttpRequest.status &gt;= <span class="number">200</span> &amp;&amp; xmlHttpRequest.status &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// [&#123;&quot;content&quot;:&quot;javascript&quot;&#125;,&#123;&quot;content&quot;:&quot;javaweb&quot;&#125;,&#123;&quot;content&quot;:&quot;java...&quot;&#125;]</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(xmlHttpRequest.responseText);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; json.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                                html += <span class="string">&quot;&lt;p onclick=&#x27;setInput(\&quot;&quot;</span>+json[i].content+<span class="string">&quot;\&quot;)&#x27;&gt;&quot;</span>+json[i].content+<span class="string">&quot;&lt;/p&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.getElementById(<span class="string">&quot;datadiv&quot;</span>).innerHTML = html</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 显示出来</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.getElementById(<span class="string">&quot;datadiv&quot;</span>).style.display = <span class="string">&quot;block&quot;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 3. 开启通道</span></span></span><br><span class="line"><span class="javascript">                xmlHttpRequest.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax-autocomplete/query?_=&quot;</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()+<span class="string">&quot;&amp;keywords=&quot;</span> + <span class="built_in">this</span>.value, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 4. 发送请求</span></span></span><br><span class="line"><span class="javascript">                xmlHttpRequest.send()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setInput</span>(<span class="params">content</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;keywords&quot;</span>).value = content</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;datadiv&quot;</span>).style.display = <span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userInput&quot;</span> <span class="attr">id</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;datadiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;showDataDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;p&gt;北京疫情最新情况&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;北京天气&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;北京时间&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;北京人&lt;/p&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>QueryServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户输入的关键字</span></span><br><span class="line">        String keywords = request.getParameter(<span class="string">&quot;keywords&quot;</span>);</span><br><span class="line">        <span class="comment">// jdbc代码连接数据库，根据关键字查询数据库，返回数据，拼接json格式的字符串</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            String url = <span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">            String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select content from t_ajax where content like ?&quot;</span>; <span class="comment">// 模糊查询的时候，条件不建议使用%开始，因为会让字段上的索引失效，查询效率降低。</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, keywords + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// [&#123;&quot;content&quot;:&quot;javascript&quot;&#125;,&#123;&quot;content&quot;:&quot;javaweb&quot;&#125;,&#123;&quot;content&quot;:&quot;java...&quot;&#125;]</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                String content = rs.getString(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">                sb.append(<span class="string">&quot;&#123;\&quot;content\&quot;:\&quot;&quot;</span>+content+<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(sb.subSequence(<span class="number">0</span>, sb.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/2022/09/20/SpringMVC/SpringMVC%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-什么是SpringMVC"><a href="#1-什么是SpringMVC" class="headerlink" title="1.什么是SpringMVC"></a>1.什么是SpringMVC</h1><p>  它是基于MVC开发模式的框架,用来优化控制器.它是Spring家族的一员.它也具备IOC和AOP.</p>
<p>  什么是MVC?<br>  它是一种开发模式,它是模型视图控制器的简称.所有的web应用都是基于MVC开发.<br>  M:模型层,包含实体类,业务逻辑层,数据访问层<br>  V:视图层,html,javaScript,vue等都是视图层,用来显现数据<br>  C:控制器,它是用来接收客户端的请求,并返回响应到客户端的组件,Servlet就是组件</p>
<h1 id="2-SpringMVC框架的优点"><a href="#2-SpringMVC框架的优点" class="headerlink" title="2.SpringMVC框架的优点"></a>2.SpringMVC框架的优点</h1><p>  1)轻量级,基于MVC的框架<br>  2)易于上手,容易理解,功能强大<br>  3)它具备IOC和AOP<br>  4)完全基于注解开发</p>
<h1 id="3-基于注解的SpringMVC框架开发的步骤"><a href="#3-基于注解的SpringMVC框架开发的步骤" class="headerlink" title="3.基于注解的SpringMVC框架开发的步骤"></a>3.基于注解的SpringMVC框架开发的步骤</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span>)新建项目,选择webapp模板.</span><br><span class="line">  <span class="number">2</span>)修改目录,添加缺失的test,java,resources(两套),并修改目录属性</span><br><span class="line">  <span class="number">3</span>)修改pom.xml文件,添加SpringMVC的依赖,添加Servlet的依赖</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">5.2</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--添加servlet的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  <span class="number">4</span>)添加springmvc.xml配置文件,指定包扫描,添加视图解析器.</span><br><span class="line">    &lt;!--添加包扫描--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.bjpowernode.controller&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line">    &lt;!--添加视图解析器--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="line">        &lt;!--配置前缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/admin/&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--配置后缀--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.jsp&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">  <span class="number">5</span>)删除web.xml文件,新建web.xml</span><br><span class="line">  <span class="number">6</span>)在web.xml文件中注册springMVC框架(所有的web请求都是基于servlet的)</span><br><span class="line">    &lt;!--注册SpringMVC框架--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">classpath</span>:<span class="title">springmvc</span>.<span class="title">xml</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;!--</span></span><br><span class="line"><span class="class">          指定拦截什么样的请求</span></span><br><span class="line"><span class="class">          <span class="title">http</span>://<span class="title">localhost</span>:8080/<span class="title">one</span></span></span><br><span class="line"><span class="class">          <span class="title">http</span>://<span class="title">localhost</span>:8080/<span class="title">index</span>.<span class="title">jsp</span></span></span><br><span class="line"><span class="class">          <span class="title">http</span>://<span class="title">localhost</span>:8080/<span class="title">demo</span>.<span class="title">action</span></span></span><br><span class="line"><span class="class">          &lt;<span class="title">a</span> <span class="title">href</span></span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo.action&quot;</span>&gt;访问服务器&lt;/a&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">  <span class="number">7</span>)在webapp目录下新建admin目录,在admin目录下新建main.jsp页面,删除index.jsp页面,并新建,发送请求给服务器</span><br><span class="line">  <span class="number">8</span>)开发控制器(Servlet),它是一个普通的类.</span><br><span class="line">	  <span class="meta">@Controller</span>  <span class="comment">//交给Spring去创建对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line">	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	       * 以前的Servlet的规范</span></span><br><span class="line"><span class="comment">     * protected void doPost(HttpServletRequest request, HttpServletResponse response) throws     ServletException, IOException &#123;&#125;</span></span><br><span class="line"><span class="comment">     * action中所有的功能实现都是由方法来完成的</span></span><br><span class="line"><span class="comment">          * action方法的规范</span></span><br><span class="line"><span class="comment">          * 1)访问权限是public</span></span><br><span class="line"><span class="comment">          * 2)方法的返回值任意</span></span><br><span class="line"><span class="comment">          * 3)方法名称任意</span></span><br><span class="line"><span class="comment">          * 4)方法可以没有参数,如果有可是任意类型</span></span><br><span class="line"><span class="comment">          * 5)要使用<span class="doctag">@RequestMapping</span>注解来声明一个访问的路径(名称)</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;服务器被访问到了.......&quot;</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//可以直接跳到/admin/main.jsp页面上</span></span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="number">9</span>)添加tomcat进行测试功能  </span><br></pre></td></tr></table></figure>

<h1 id="4-分析web请求"><a href="#4-分析web请求" class="headerlink" title="4.分析web请求"></a>4.分析web请求</h1><p>  web请求执行的流程<br>                                  核心处理器<br>  index.jsp&lt;—————&gt;DispatcherServlet&lt;——————-&gt;SpringMVC的处理器是一个普通的方法<br>  one.jsp  &lt;—————&gt;DispatcherServlet&lt;——————-&gt;SpringMVC的处理器是一个普通的方法</p>
<p>  DispatcherServlet要在web.xml文件中注册才可用.</p>
<h1 id="5-RequestMapping注解详解"><a href="#5-RequestMapping注解详解" class="headerlink" title="5.@RequestMapping注解详解"></a>5.@RequestMapping注解详解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 此注解就是来映射服务器访问的路径.</span><br><span class="line"> <span class="number">1</span>)此注解可加在方法上,是为此方法注册一个可以访问的名称(路径)</span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;服务器被访问到了.......&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//可以直接跳到/admin/main.jsp页面上</span></span><br><span class="line">   &#125;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo.action&quot;</span>&gt;访问服务器&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>)此注解可以加在类上,相当于是包名(虚拟路径),区分不同类中相同的action的名称</span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction1</span> </span>&#123;..&#125;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/demo.action&quot;</span>&gt;访问服务器&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> <span class="number">3</span>)此注解可区分get请求和post请求</span><br><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/req&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">req</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是处理get请求的........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/req&quot; ,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">req1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是处理post请求的........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-五种数据提交方式的优化"><a href="#6-五种数据提交方式的优化" class="headerlink" title="6.五种数据提交方式的优化"></a>6.五种数据提交方式的优化</h1><p>  1)单个提交数据<br>  页面:  </p>
  <form action="${pageContext.request.contextPath}/one.action">
      姓名:<input name="myname"><br>
      年龄:<input name="age"><br>
      <input type="submit" value="提交">
  </form>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">action:</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">one</span><span class="params">(String myname,<span class="keyword">int</span> age)</span></span>&#123;  ===&gt;自动注入,并且类型转换</span><br><span class="line">        System.out.println(<span class="string">&quot;myname=&quot;</span>+myname+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  2)对象封装提交数据<br>    在提交请求中,保证<strong>请求参数的名称与实体类中成员变量的名称一致</strong>,则可以自动创建对象,则可以自动提交数据,自动类型转换,自动封装数据到对象中.<br>    实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;&#125;</span><br></pre></td></tr></table></figure>


<p>​    页面:</p>
<pre><code>&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/two.action&quot; method=&quot;post&quot;&gt;
    姓名:&lt;input name=&quot;name&quot;&gt;&lt;br&gt;
    年龄:&lt;input name=&quot;age&quot;&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">action:</span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/two&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">two</span><span class="params">(Users u)</span></span>&#123;</span><br><span class="line">     System.out.println(u);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>  3)动态占位符提交<br>​    仅限于超链接或地址拦提交数据.它是一杠一值,一杠一大括号,使用注解@PathVariable来解析.      </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/three/张三/22.action&quot;</span>&gt;</span>动态提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@RequestMapping(&quot;/three/&#123;uname&#125;/&#123;uage&#125;&quot;)</span></span><br><span class="line">​    <span class="function"><span class="keyword">public</span> String <span class="title">three</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">​            <span class="meta">@PathVariable(&quot;uname&quot;)</span>  ===&gt;用来解析路径中的请求参数</span></span></span><br><span class="line"><span class="params"><span class="function">​            String name,</span></span></span><br><span class="line"><span class="params"><span class="function">​            <span class="meta">@PathVariable(&quot;uage&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">​            <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">​        System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">​        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure>


<p>  4)映射名称不一致<br>​    提交请求参数与action方法的形参的名称不一致,使用注解@RequestParam来解析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4.参数名称不致解决方案<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/four.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">four</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="meta">@RequestParam(&quot;name&quot;)</span>  ===&gt;专门用来解决名称不一致的问题</span></span></span><br><span class="line"><span class="params"><span class="function"> String uname,</span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="meta">@RequestParam(&quot;age&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function"> <span class="keyword">int</span> uage)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;uname=&quot;</span>+uname+<span class="string">&quot;,uage=&quot;</span>+(uage+<span class="number">100</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5)手工提取数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/five.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/five&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">five</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">		String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> age = Integer.parseInt(request.getParameter(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">		System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h1 id="7-中文乱码解决方案"><a href="#7-中文乱码解决方案" class="headerlink" title="7.中文乱码解决方案"></a>7.中文乱码解决方案</h1><p>  配置过滤器.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">      &lt;filter-name&gt;encode&lt;/filter-name&gt;</span><br><span class="line">      &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;!--</span></span><br><span class="line"><span class="class">        配置参数</span></span><br><span class="line"><span class="class">          <span class="title">private</span> <span class="title">String</span> <span class="title">encoding</span></span>;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">boolean</span> forceRequestEncoding;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">boolean</span> forceResponseEncoding;</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;init-param&gt;</span><br><span class="line">          &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">          &lt;param-value&gt;UTF-<span class="number">8</span>&lt;/param-value&gt;</span><br><span class="line">      &lt;/init-param&gt;</span><br><span class="line">      &lt;init-param&gt;</span><br><span class="line">          &lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;</span><br><span class="line">          &lt;param-value&gt;<span class="keyword">true</span>&lt;/param-value&gt;</span><br><span class="line">      &lt;/init-param&gt;</span><br><span class="line">      &lt;init-param&gt;</span><br><span class="line">          &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;</span><br><span class="line">          &lt;param-value&gt;<span class="keyword">true</span>&lt;/param-value&gt;</span><br><span class="line">      &lt;/init-param&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">      &lt;filter-name&gt;encode&lt;/filter-name&gt;</span><br><span class="line">      &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">  &lt;/filter-mapping&gt; </span></span><br><span class="line"><span class="comment">   </span></span><br></pre></td></tr></table></figure>

<h1 id="8-action方法的返回值"><a href="#8-action方法的返回值" class="headerlink" title="8.action方法的返回值"></a>8.action方法的返回值</h1><p>  1)String:客户端资源的地址,自动拼接前缀和后缀.还可以屏蔽自动拼接字符串,可以指定返回的路径.<br>  2)Object:返回json格式的对象.自动将对象或集合转为json.使用的jackson工具进行转换,必须要添加jackson依赖.一般用于ajax请求.<br>  3)void:无返回值,一般用于ajax请求.<br>  4)基本数据类型,用于ajax请求.<br>  5)ModelAndView:返回数据和视图对象,现在用的很少.</p>
<h1 id="9-完成ajax请求访问服务器-返回学生集合"><a href="#9-完成ajax请求访问服务器-返回学生集合" class="headerlink" title="9.完成ajax请求访问服务器,返回学生集合."></a>9.完成ajax请求访问服务器,返回学生集合.</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span>)添加jackson依赖</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.9</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"> <span class="number">2</span>)在webapp目录下新建js目录,添加jQuery函数库</span><br><span class="line"> <span class="number">3</span>)在index.jsp页面上导入函数库</span><br><span class="line"> <span class="function">function <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajax.action&quot;</span>,</span><br><span class="line">           dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">           type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">           success:function (list) &#123;</span><br><span class="line">             <span class="comment">//  alert(list);</span></span><br><span class="line">               <span class="keyword">var</span> s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">               $.each(list,function (i,stu) &#123;</span><br><span class="line">                 <span class="comment">//  alert(stu);</span></span><br><span class="line">                   s+=stu.name+<span class="string">&quot;----&quot;</span>+stu.age+<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">               &#125;);</span><br><span class="line">               $(<span class="string">&quot;#mydiv&quot;</span>).html(s);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="number">4</span>)在action上添加注解<span class="meta">@ResponseBody</span>,用来处理ajax请求</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxAction</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理ajax请求,一定要加@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ajax&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">ajax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>,<span class="number">23</span>);</span><br><span class="line">       List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(stu1);</span><br><span class="line">       list.add(stu2);</span><br><span class="line">       list.add(stu3);</span><br><span class="line">        <span class="comment">//调用json转换工具ObjectMapper进行转换</span></span><br><span class="line">        <span class="keyword">return</span> list;  <span class="comment">//===&gt;springmvc负责转换成json</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="number">5</span>)在springmvc.xml文件中添加注解驱动&lt;mvc:annotationdriven/&gt;,它用来解析<span class="meta">@ResponseBody</span>注解</span><br><span class="line"> &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

<h1 id="10-四种跳转方式"><a href="#10-四种跳转方式" class="headerlink" title="10.四种跳转方式"></a>10.四种跳转方式</h1><p>  本质还是两种跳转:请求转发和重定向,衍生出四种是请求转发页面,转发action,重定向页面,重定向action</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">one</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是请求转发页面跳转.........&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//默认是请求转发,使用视图解析器拼接前缀后缀进行页面跳转</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/two&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">two</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是请求转发action跳转.........&quot;</span>);</span><br><span class="line">      <span class="comment">//  /admin/  /other.action  .jsp</span></span><br><span class="line">      <span class="comment">//forward: 这组字符串可以屏蔽前缀和后缀的拼接.实现请求转发跳转</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;forward:/other.action&quot;</span>;  <span class="comment">//默认是请求转发,使用视图解析器拼接前缀后缀进行页面跳转</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/three&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">three</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是重定向页面.......&quot;</span>);</span><br><span class="line">      <span class="comment">//redirect:  这组字符串可以屏蔽前缀和后缀的拼接.实现重定向跳转</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/admin/main.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">four</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是重定向action.......&quot;</span>);</span><br><span class="line">      <span class="comment">//redirect:  这组字符串可以屏蔽前缀和后缀的拼接.实现重定向跳转</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/other.action&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/five&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">five</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是随便跳.......&quot;</span>);</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;forward:/fore/login.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="11-SpringMVC默认的参数类型"><a href="#11-SpringMVC默认的参数类型" class="headerlink" title="11.SpringMVC默认的参数类型"></a>11.SpringMVC默认的参数类型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">不需要去创建,直接拿来使用即可.</span><br><span class="line"><span class="number">1</span>)HttpServletRequest</span><br><span class="line"><span class="number">2</span>)HttpServletResponse</span><br><span class="line"><span class="number">3</span>)HttpSession</span><br><span class="line"><span class="number">4</span>)Model</span><br><span class="line"><span class="number">5</span>)Map</span><br><span class="line"><span class="number">6</span>)ModelMap</span><br><span class="line"> 		<span class="comment">//做一个数据,传到main.jsp页面上</span></span><br><span class="line">      Users u = <span class="keyword">new</span> Users(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//传递数据</span></span><br><span class="line">      request.setAttribute(<span class="string">&quot;requestUsers&quot;</span>,u);</span><br><span class="line">      session.setAttribute(<span class="string">&quot;sessionUsers&quot;</span>,u);</span><br><span class="line">      model.addAttribute(<span class="string">&quot;modelUsers&quot;</span>,u);</span><br><span class="line">      map.put(<span class="string">&quot;mapUsers&quot;</span>,u);</span><br><span class="line">      modelMap.addAttribute(<span class="string">&quot;modelMapUsers&quot;</span>,u);</span><br><span class="line"></span><br><span class="line">注意:Map,Model,ModelMap和request一样,都使用请求作用域进行数据传递.所以服务器端的跳转必须是请求转发.</span><br></pre></td></tr></table></figure>

<h1 id="12-日期处理"><a href="#12-日期处理" class="headerlink" title="12.日期处理"></a>12.日期处理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span>)日期的提交处理</span><br><span class="line">   A.单个日期处理</span><br><span class="line">   要使用注解<span class="meta">@DateTimeFormat</span>,此注解必须搭配springmvc.xml文件中的&lt;mvc:annotationdriven标签&gt;</span><br><span class="line"></span><br><span class="line">   B.类中全局日期处理</span><br><span class="line">   注册一个注解,用来解析本类中所有的日期类型,自动转换.</span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder dataBinder)</span></span>&#123;</span><br><span class="line">       dataBinder.registerCustomEditor(Date.class,<span class="keyword">new</span> CustomDateEditor(sf,<span class="keyword">true</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>)日期的显示处理</span><br><span class="line">   在页面上显示好看的日期,必须使用JSTL.</span><br><span class="line">   步骤:</span><br><span class="line">   A)添加依赖jstl</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   B)在页面上导入标签库 </span><br><span class="line">   如果是单个日期对象,直接转为好看的格式化的字符串进行显示.</span><br><span class="line">   如果是list中的实体类对象的成员变量是日期类型,则必须使用jstl进行显示.</span><br><span class="line">   &lt;%--导入jstl核心标签库--%&gt;</span><br><span class="line">   &lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">   &lt;%--导入jstl格式化标签库--%&gt;</span><br><span class="line">   &lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">   </span><br><span class="line">   C)使用标签显示数据    </span><br><span class="line"></span><br><span class="line">  &lt;table width=<span class="string">&quot;800px&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">       &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">       &lt;th&gt;生日&lt;/th&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   	&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">           &lt;td&gt;$&#123;stu.name&#125;&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;$&#123;stu.birthday&#125;------ &lt;fmt:formatDate value=<span class="string">&quot;$&#123;stu.birthday&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;&lt;/fmt:formatDate&gt;&lt;/td&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   	&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>



   <table width="800px" border="1">
    <tr>
        <th>姓名</th>
        <th>生日</th>
    </tr>
        <c:forEach items="${list}" var="stu">
    <tr>
            <td>${stu.name}</td>
            <td>${stu.birthday}------ <fmt:formatDate value="${stu.birthday}" pattern="yyyy-MM-dd"></fmt:formatDate></td>
    </tr>
        </c:forEach>
    </table>
# 13.资源在WEB-INF目录下
  此目录下的动态资源,不可直接访问,只能通过请求转发的方式进行访问 .

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInfAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showIndex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问index.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showMain&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问main.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问login.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录的业务判断</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String name, String pwd, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zar&quot;</span>.equalsIgnoreCase(name) &amp;&amp; <span class="string">&quot;123&quot;</span>.equalsIgnoreCase(pwd))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码不正确!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="14-SpringMVC的拦截器"><a href="#14-SpringMVC的拦截器" class="headerlink" title="14.SpringMVC的拦截器"></a>14.SpringMVC的拦截器</h1><p>  针对请求和响应进行的额外的处理.在请求和响应的过程中添加预处理,后处理和最终处理.</p>
<h1 id="15-拦截器执行的时机"><a href="#15-拦截器执行的时机" class="headerlink" title="15.拦截器执行的时机"></a>15.拦截器执行的时机</h1><p>  1)preHandle():在请求被处理之前进行操作,预处理<br>  2)postHandle():在请求被处理之后,但结果还没有渲染前进行操作,可以改变响应结果,后处理<br>  3)afterCompletion:所有的请求响应结束后执行善后工作,清理对象,关闭资源 ,最终处理.</p>
<h1 id="16-拦截器实现的两种方式"><a href="#16-拦截器实现的两种方式" class="headerlink" title="16.拦截器实现的两种方式"></a>16.拦截器实现的两种方式</h1><p>  1)继承HandlerInterceptorAdapter的父类<br>  2)实现HandlerInterceptor接口,实现的接口,推荐使用实现接口的方式</p>
<h1 id="17-拦截器实现的步骤"><a href="#17-拦截器实现的步骤" class="headerlink" title="17.拦截器实现的步骤"></a>17.拦截器实现的步骤</h1><p>login.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input  name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">$&#123;msg&#125;</span><br></pre></td></tr></table></figure>

<p>  1)改造登录方法,在session中存储用户信息,用于进行权限验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String name, String pwd, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="string">&quot;zar&quot;</span>.equalsIgnoreCase(name) &amp;&amp; <span class="string">&quot;123&quot;</span>.equalsIgnoreCase(pwd))&#123;</span><br><span class="line">           <span class="comment">//在session中存储用户信息,用于进行权限验证</span></span><br><span class="line">           request.getSession().setAttribute(<span class="string">&quot;users&quot;</span>,name);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码不正确!&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>  2)开发拦截器的功能.实现HandlerInterceptor接口,重写preHandle()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;users&quot;</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//此时就是没有登录,打回到登录页面,并给出提示</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;您还没有登录,请先去登录!&quot;</span>);</span><br><span class="line">    	<span class="comment">//转发</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//放行请求</span></span><br></pre></td></tr></table></figure>


<p>  3)在springmvc.xml文件中注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--映射要拦截的请求--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置放行的请求--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/showLogin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置具体的拦截器实现功能的类--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="18-SSM整合的步骤"><a href="#18-SSM整合的步骤" class="headerlink" title="18.SSM整合的步骤"></a>18.SSM整合的步骤</h1><p>  0)建库,建表<br>  1)新建Maven项目,选择webapp模板<br>  2)修改目录<br>  3)修改pom.xml文件(使用老师提供)<br>  4)添加jdbc.properties属性文件<br>  5)添加SqlMapConfig.xml文件(使用模板)<br>  6)添加applicationContext_mapper.xml文件(数据访问层的核心配置文件)<br>  7)添加applicationContext_service.xml文件(业务逻辑层的核心配置文件)<br>  8)添加spirngmvc.xml文件<br>  9)删除web.xml文件,新建,改名,设置中文编码,并注册spirngmvc框架,并注册Spring框架<br>  10)新建实体类user<br>  11)新建UserMapper.java接口<br>  12)新建UserMapper.xml实现增删查所有功能,没有更新<br>  13)新建service接口和实现类<br>  14)新建测试类,完成所有功能的测试<br>  15)新建控制器,完成所有功能<br>  16)浏览器测试功能</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
  </entry>
  <entry>
    <title>Spring-code</title>
    <url>/2022/09/11/Spring/Spring-code/Spring-code/</url>
    <content><![CDATA[<h1 id="spring-001-demo-基于xml的IOC"><a href="#spring-001-demo-基于xml的IOC" class="headerlink" title="spring_001_demo(基于xml的IOC  )"></a>spring_001_demo(基于xml的IOC  )</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220918121822416.png" class="" title="image-20220918121822416">

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_001_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加spring依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="pojo1"><a href="#pojo1" class="headerlink" title="pojo1"></a>pojo1</h2><p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的无参的构造方法..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>resources.01.applicationContext</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建学生对象</span></span><br><span class="line"><span class="comment">      等同于 Student stu = new Student();</span></span><br><span class="line"><span class="comment">      id:就是创建的对象的名称</span></span><br><span class="line"><span class="comment">      class:就是创建的对象的类型,底层通过反射构建对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      启动容器的同时,创建对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建学生对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//程序员创建对象</span></span><br><span class="line"><span class="comment">//        Student stu = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(stu);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudentSpring</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//由spring容器进行对象对创造</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//如果想从spring容器中取出对象，则要先创建容器对象，并启动才可以取出对象</span></span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s01/applicationContext.xml&quot;</span>);</span><br><span class="line">		Student stu=(Student)ac.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">		System.out.println(stu);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pojo2"><a href="#pojo2" class="headerlink" title="pojo2"></a>pojo2</h2><p>School.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了给成员变量注入值,必须提供无参构造方法和setXXX()方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学校的无参的构造方法被调用..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用类型的成员变量,学生所在的学校</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的无参的构造方法..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//交给Spring容器注入值,必须提供setXXX()方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>resources.02.applicationContext</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建学校对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo2.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建学生对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo2.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mytest2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo2.School;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo2.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//创建容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s02/applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//取出学校对象</span></span><br><span class="line">        School school = (School) ac.getBean(<span class="string">&quot;school&quot;</span>);</span><br><span class="line">        System.out.println(school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s02/applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//取出学校对象</span></span><br><span class="line">        Student stu = (Student) ac.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="pojo3"><a href="#pojo3" class="headerlink" title="pojo3"></a>pojo3</h2><p>School.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用带参构造方法注入值</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">(String name1, String address1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name1;</span><br><span class="line">		<span class="keyword">this</span>.address = address1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span>  String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//引用类型的成员变量</span></span><br><span class="line">	<span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, School school)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.school = school;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">				<span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>resources.03.applicationContext</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建学校的对象，使用构造方法参数名称并注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建学生对象，使用构造方法的参数的下标注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一一&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建学生对象，使用默认的构造方法的参数顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuSequence&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;程程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo3.Student;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo3.School;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSchool</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s03/applicationContext.xml&quot;</span>);</span><br><span class="line">		School school=(School) ac.getBean(<span class="string">&quot;school&quot;</span>);</span><br><span class="line">		System.out.println(school);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s03/applicationContext.xml&quot;</span>);</span><br><span class="line">		Student student=(Student) ac.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudentSequence</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s03/applicationContext.xml&quot;</span>);</span><br><span class="line">		Student student=(Student) ac.getBean(<span class="string">&quot;stuSequence&quot;</span>);</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="spring002-sanceng-使用三层架构进行用户的插入操作"><a href="#spring002-sanceng-使用三层架构进行用户的插入操作" class="headerlink" title="spring002_sanceng(  使用三层架构进行用户的插入操作.)"></a>spring002_sanceng(  使用三层架构进行用户的插入操作.)</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220918121955225.png" class="" title="image-20220918121955225">

<h2 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring002_sanceng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>UserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 界面层</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">	<span class="comment">//如何去访问业务逻辑层，就是创建对象</span></span><br><span class="line">	<span class="comment">//所有界面层都有业务逻辑层的对象</span></span><br><span class="line">	<span class="keyword">private</span> UsersService usersService=<span class="keyword">new</span> UsersServiceImpl();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//界面层的功能实现，对外提供访问的功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usersService.insert(users);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><p>UserMapper.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//增加用户</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UsersMapperImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数据访问层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span> </span>&#123;</span><br><span class="line">		System.out.println(u.getUname()+<span class="string">&quot;用户增加成功&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><p>Users.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">	<span class="keyword">private</span> String uname;</span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">int</span> uage;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(<span class="keyword">int</span> uid, String uname, <span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.uid = uid;</span><br><span class="line">		<span class="keyword">this</span>.uname = uname;</span><br><span class="line">		<span class="keyword">this</span>.uage = uage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> uid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.uid = uid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> uname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.uname = uname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> uage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUage</span><span class="params">(<span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.uage = uage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">				<span class="string">&quot;, uname=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, uage=&quot;</span> + uage +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><h4 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h4><p>UsersService.interface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line">import com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line">public interface UsersService &#123;</span><br><span class="line">   //增加用户</span><br><span class="line">   int insert(Users users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UsersServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UsersMapperImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 业务逻辑层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//切记切记：在所有的业务逻辑层中都必定有数据访问层的对象</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper=<span class="keyword">new</span> UsersMapperImpl();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userMapper.insert(users);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.controller.UsersController;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建UsersController对象</span></span><br><span class="line">		UsersController usersController = <span class="keyword">new</span> UsersController();</span><br><span class="line">		<span class="keyword">int</span> num = usersController.insert(<span class="keyword">new</span> Users(<span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">22</span>));</span><br><span class="line">		System.out.println(num);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="spring003-sancengxml"><a href="#spring003-sancengxml" class="headerlink" title="spring003_sancengxml"></a>spring003_sancengxml</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220918123118298.png" class="" title="image-20220918123118298">

<h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring003_sancengxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h2><h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 界面层</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">	<span class="comment">//如何去访问业务逻辑层，就是创建对象</span></span><br><span class="line">	<span class="comment">//所有界面层都有业务逻辑层的对象</span></span><br><span class="line">	<span class="keyword">private</span> UsersService usersService;<span class="comment">//=new UsersServiceImpl();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//交给spring去注入值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UsersService usersService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.usersService = usersService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//界面层的功能实现，对外提供访问的功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usersService.insert(users);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h3><p>UserMapper.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加用户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapperImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数据访问层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span> </span>&#123;</span><br><span class="line">      System.out.println(u.getUname()+<span class="string">&quot;用户增加成功&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="pojo-1"><a href="#pojo-1" class="headerlink" title="pojo"></a>pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">   <span class="keyword">private</span> String uname;</span><br><span class="line">   <span class="keyword">private</span>  <span class="keyword">int</span> uage;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(<span class="keyword">int</span> uid, String uname, <span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uid = uid;</span><br><span class="line">      <span class="keyword">this</span>.uname = uname;</span><br><span class="line">      <span class="keyword">this</span>.uage = uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uid = uid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uname = uname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUage</span><span class="params">(<span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uage = uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">            <span class="string">&quot;, uname=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, uage=&quot;</span> + uage +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h4 id="impl-1"><a href="#impl-1" class="headerlink" title="impl"></a>impl</h4><p>UsersService.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加用户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UsersServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UsersMapperImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 业务逻辑层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//切记切记：在所有的业务逻辑层中都必定有数据访问层的对象</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;<span class="comment">//=new UsersMapperImpl();</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//交给Spring去依赖注入值，必须提供setXXX方法</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userMapper.insert(users);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h2><p>applicationContext_controller.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建界面层的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersController&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;uService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建各种对象啊--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建数据访问层的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.dao.UsersMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建业务逻辑层的对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.impl.UsersServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;uMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>total.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单个导入--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;import resource=&quot;applicationContext_controller.xml&quot;&gt;&lt;/import&gt;</span></span><br><span class="line"><span class="comment">    &lt;import resource=&quot;applicationContext_service.xml&quot;&gt;&lt;/import&gt;</span></span><br><span class="line"><span class="comment">    &lt;import resource=&quot;applicationContext_mapper.xml&quot;&gt;&lt;/import&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--批量导入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext_*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h2><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.controller.UsersController;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 创建容器并启动</span></span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;total.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出对象测试功能</span></span><br><span class="line">      UsersController uController = (UsersController)ac.getBean(<span class="string">&quot;uController&quot;</span>);</span><br><span class="line">      <span class="comment">//测试功能</span></span><br><span class="line">      <span class="keyword">int</span> num = uController.insert(<span class="keyword">new</span> Users(<span class="number">200</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">24</span>));</span><br><span class="line">      System.out.println(num);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spring-004-annotation-基于注解的IOC"><a href="#spring-004-annotation-基于注解的IOC" class="headerlink" title="spring_004_annotation(基于注解的IOC)"></a>spring_004_annotation(基于注解的IOC)</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220918144543362.png" class="" title="image-20220918144543362">

<h2 id="pom文件-1"><a href="#pom文件-1" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_004_annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加spring依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="s01"><a href="#s01" class="headerlink" title="s01"></a>s01</h2><p>student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;stu&quot;)</span>  <span class="comment">//交给spring去创建对象，就是在容器启动时创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;22&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;学生对象的无参构造方法。。。。&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s01</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.s01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mytest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.s01.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建容器对象并启动</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s01/applicationContext.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出对象</span></span><br><span class="line">      Student stu=(Student) ac.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">      System.out.println(stu);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s02"><a href="#s02" class="headerlink" title="s02"></a>s02</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;schoolNew&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;清华大学&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;海淀区&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;School的无参构造方法&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;李四&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;23&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//引用类型按类型注入</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;schoolNew&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s02</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.s02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.s02.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建容器对象并启动</span></span><br><span class="line">		ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s02/applicationContext.xml&quot;</span>);</span><br><span class="line">		Student student=(Student) ac.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">		System.out.println(student);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="s03"><a href="#s03" class="headerlink" title="s03"></a>s03</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;schoolFu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;清华大学&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;海淀区&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;School的无参构造方法&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;李四&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;23&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//引用类型按类型注入</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;schoolFu&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;schoolZi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSchool</span> <span class="keyword">extends</span> <span class="title">School</span></span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;清华附小&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Value(&quot;海淀小区&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SubSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是SubSchool子类的构造函数&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;SubSchool&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resoures-03</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.s03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.s03.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建容器对象并启动</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s03/applicationContext.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出对象</span></span><br><span class="line">      Student stu=(Student) ac.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      System.out.println(stu);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spring005-sanceng-annotation"><a href="#spring005-sanceng-annotation" class="headerlink" title="spring005_sanceng_annotation"></a>spring005_sanceng_annotation</h1><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><h3 id="java-2"><a href="#java-2" class="headerlink" title="java"></a>java</h3><h4 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h4><p>UsersController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 界面层</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//让spring创建界面层对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//如何去访问业务逻辑层，就是创建对象</span></span><br><span class="line">   <span class="comment">//所有界面层都有业务逻辑层的对象</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UsersService usersService;<span class="comment">//=new UsersServiceImpl();</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//界面层的功能实现，对外提供访问的功能</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> usersService.insert(users);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="dao-2"><a href="#dao-2" class="headerlink" title="dao"></a>dao</h4><p>UserMapper.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加用户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UsersMapperImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数据访问层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//就是交给spring去创建数据访问层的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users u)</span> </span>&#123;</span><br><span class="line">      System.out.println(u.getUname()+<span class="string">&quot;用户增加成功&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pojo-2"><a href="#pojo-2" class="headerlink" title="pojo"></a>pojo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">   <span class="keyword">private</span> String uname;</span><br><span class="line">   <span class="keyword">private</span>  <span class="keyword">int</span> uage;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(<span class="keyword">int</span> uid, String uname, <span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uid = uid;</span><br><span class="line">      <span class="keyword">this</span>.uname = uname;</span><br><span class="line">      <span class="keyword">this</span>.uage = uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uid = uid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uname = uname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUage</span><span class="params">(<span class="keyword">int</span> uage)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.uage = uage;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">            <span class="string">&quot;, uname=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, uage=&quot;</span> + uage +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h4><h5 id="impl-2"><a href="#impl-2" class="headerlink" title="impl"></a>impl</h5><p>UsersService.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加用户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> UsersServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.dao.UsersMapperImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 业务逻辑层的实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//交给spring创建业务逻辑层的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//切记切记：在所有的业务逻辑层中都必定有数据访问层的对象</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserMapper userMapper;<span class="comment">//=new UsersMapperImpl();</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userMapper.insert(users);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="resources-1"><a href="#resources-1" class="headerlink" title="resources"></a>resources</h3><p>applicationContext_controller.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--只要基于注解的开发，必须进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> applicationContext_mapper.xml    </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--只要基于注解的开发，必须进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--只要基于注解的开发，必须进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>total.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--批量导入其他配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext_*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h2><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.controller.UsersController;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建并启动容器</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;total.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出对象</span></span><br><span class="line">      UsersController controller = (UsersController)ac.getBean(<span class="string">&quot;usersController&quot;</span>);</span><br><span class="line">      controller.insert(<span class="keyword">new</span> Users(<span class="number">100</span>,<span class="string">&quot;hahah&quot;</span>,<span class="number">25</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spring-006-aop（手写AOP框架）"><a href="#spring-006-aop（手写AOP框架）" class="headerlink" title="spring_006_aop（手写AOP框架）"></a>spring_006_aop（手写AOP框架）</h1><h2 id="业务功能"><a href="#业务功能" class="headerlink" title="业务功能"></a>业务功能</h2><p>Service.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">   <span class="comment">//规定业务功能</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加有参有返回值的方法测试代理功能</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">show</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图书购买功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;图书购买功能的实现&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是show方法被调用。。。&quot;</span>+age);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>商品购买功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;商品购买功能的实现&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切面功能"><a href="#切面功能" class="headerlink" title="切面功能"></a>切面功能</h2><p>AOP.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AOP</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">logAop</span> <span class="keyword">implements</span> <span class="title">AOP</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;前置日志输出&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事务切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransAop</span> <span class="keyword">implements</span> <span class="title">AOP</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;事务开启。。。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;事务提交。。。。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;事务回滚。。。。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="动态代理（生成代理对象）"><a href="#动态代理（生成代理对象）" class="headerlink" title="动态代理（生成代理对象）"></a>动态代理（生成代理对象）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getAgent</span><span class="params">(Service target,AOP aop)</span></span>&#123;</span><br><span class="line">		<span class="comment">//返回生成的动态代理对象</span></span><br><span class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">				<span class="comment">//类加载器</span></span><br><span class="line">				target.getClass().getClassLoader(),</span><br><span class="line">				<span class="comment">//目标对象实现的所有的接口</span></span><br><span class="line">				target.getClass().getInterfaces(),</span><br><span class="line">				<span class="comment">//代理功能实现</span></span><br><span class="line">				<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">							//生成的代理对象</span></span></span><br><span class="line"><span class="params"><span class="function">							Object proxy,</span></span></span><br><span class="line"><span class="params"><span class="function">							//正在被调用的目标方法</span></span></span><br><span class="line"><span class="params"><span class="function">							Method method,</span></span></span><br><span class="line"><span class="params"><span class="function">							//目标方法的参数</span></span></span><br><span class="line"><span class="params"><span class="function">							Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">							<span class="comment">//切面</span></span><br><span class="line">						Object obj = <span class="keyword">null</span>;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							aop.before();</span><br><span class="line">							<span class="comment">//业务</span></span><br><span class="line">							obj = method.invoke(target, args);</span><br><span class="line">							<span class="comment">//切面</span></span><br><span class="line">							aop.after();</span><br><span class="line">							<span class="comment">//切面</span></span><br><span class="line">						&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">							aop.exception();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">return</span> obj;<span class="comment">//目标方法返回值</span></span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.proxy5.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest5</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//得到动态代理对象</span></span><br><span class="line">		Service agent =(Service) ProxyFactory.getAgent(<span class="keyword">new</span> BookServiceImpl(), <span class="keyword">new</span> TransAop());</span><br><span class="line">		agent.buy();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test55</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//得到动态代理对象</span></span><br><span class="line">		Service agent =(Service) ProxyFactory.getAgent(<span class="keyword">new</span> BookServiceImpl(), <span class="keyword">new</span> TransAop());</span><br><span class="line">		<span class="comment">//新的动态代理对象去代理旧的动态代理对象</span></span><br><span class="line">		Service agent1=(Service) ProxyFactory.getAgent(agent,<span class="keyword">new</span> logAop());</span><br><span class="line">		String show = agent1.show(<span class="number">22</span>);</span><br><span class="line">		System.out.println(show);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="spring-007-aspectj（Aspectj）"><a href="#spring-007-aspectj（Aspectj）" class="headerlink" title="spring_007_aspectj（Aspectj）"></a>spring_007_aspectj（Aspectj）</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220919153749480.png" class="" title="image-20220919153749480">

<h2 id="pom文件-2"><a href="#pom文件-2" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpwernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_007_aspectj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--添加spring依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--添加aspectj的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">			</span><br></pre></td></tr></table></figure>

<h2 id="s01-1"><a href="#s01-1" class="headerlink" title="s01"></a>s01</h2><p>切面业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//交给Aspect框架去识别切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 所有切面的功能都是由切面方法来实现的</span></span><br><span class="line"><span class="comment">	 * 可以将各种切面都在此类中进行开发</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 前置通知的切面方法的规范</span></span><br><span class="line"><span class="comment">	 * 1)访问权限是public</span></span><br><span class="line"><span class="comment">	 * 2)方法的返回值是void</span></span><br><span class="line"><span class="comment">	 * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">	 * 4)方法没有参数,如果有也只能是JoinPoint类型</span></span><br><span class="line"><span class="comment">	 * 5)必须使用<span class="doctag">@Before</span>注解来声明切入的时机是前切功能和切入点</span></span><br><span class="line"><span class="comment">	 *   参数:value  指定切入点表达式</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 业务方法</span></span><br><span class="line"><span class="comment">	 * public String doSome(String name, int age)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">/*@Before(value=&quot;execution(public String com.bjpwernode.s01.SomeServiceImpl.doSome(String,int))&quot;)</span></span><br><span class="line"><span class="comment">	public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;切面方法中的前置通知功能实现&quot;);</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*@Before(value = &quot;execution(public * com.bjpwernode.s01.SomeServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;切面方法中的前置通知功能实现............&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before(value = &quot;execution(* com.bjpwernode.s01.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;目标方法的签名：&quot;</span>+jp.getSignature());</span><br><span class="line">		System.out.println(<span class="string">&quot;目标方法的参数：&quot;</span>+ Arrays.toString(jp.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">   <span class="function">String <span class="title">doSome</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">doSome</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;doSome的业务功能实现。。。。。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;show()的业务方法实现执行.............&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s01</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建业务对象</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;someService&quot; class=&quot;com.bjpwernode.s01.SomeServiceImpl&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建切面对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;myaspect&quot; class=&quot;com.bjpwernode.s01.MyAspect&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--基于注解的访问要添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpwernode.s01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpwernode.s01.SomeService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest01</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s01/applicationContext.xml&quot;</span>);</span><br><span class="line">      SomeService someService= (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      System.out.println(someService.getClass());</span><br><span class="line">      String s = someService.doSome(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br><span class="line">      System.out.println(s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s01/applicationContext.xml&quot;</span>);</span><br><span class="line">      SomeService someService= (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      System.out.println(someService.getClass());</span><br><span class="line">      someService.show();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s02-1"><a href="#s02-1" class="headerlink" title="s02"></a>s02</h2><p>切面业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 后置通知的方法的规范</span></span><br><span class="line"><span class="comment">    * 1)访问权限是public</span></span><br><span class="line"><span class="comment">    * 2)方法没有返回值void</span></span><br><span class="line"><span class="comment">    * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">    * 4)方法有参数(也可以没有参数,如果目标方法没有返回值,则可以写无参的方法,但一般会写有参,这样可以处理无参可以处理有参),这个切面方法的参数就是目标方法的返回值</span></span><br><span class="line"><span class="comment">    * 5)使用<span class="doctag">@AfterReturning</span>注解表明是后置通知</span></span><br><span class="line"><span class="comment">    *   参数:</span></span><br><span class="line"><span class="comment">    *      value:指定切入点表达式</span></span><br><span class="line"><span class="comment">    *      returning:指定目标方法的返回值的名称,则名称必须与切面方法的参数名称一致.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AfterReturning(value = &quot;execution(* com.bjpwernode.s02.*.*(..))&quot;,returning = &quot;obj&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;后置通知功能的实现。。。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(obj!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            obj = obj.toString().toUpperCase();</span><br><span class="line">            System.out.println(<span class="string">&quot;在切面方法中目标方法的返回值：&quot;</span>+obj);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            Student stu = (Student) obj;</span><br><span class="line">            stu.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;在切面方法中目标方法的返回值为：&quot;</span>+stu);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">   <span class="function">String <span class="title">doSome</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">Student  <span class="title">change</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">doSome</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;doSome()业务方法被执行。。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Student <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;change()方法被执行。。。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s02</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--基于注解的访问要添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpwernode.s02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpwernode.s02.SomeService;</span><br><span class="line"><span class="keyword">import</span> com.bjpwernode.s02.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest02</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ApplicationContext ac =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s02/applicationContext.xml&quot;</span>);</span><br><span class="line">   SomeService someService = (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      String s = someService.doSome(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;在测试方法中目标方法的返回值：&quot;</span>+s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ApplicationContext ac =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s02/applicationContext.xml&quot;</span>);</span><br><span class="line">      SomeService someService = (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      Student stu = someService.change();</span><br><span class="line">      System.out.println(<span class="string">&quot;在测试方法中目标方法的返回值：&quot;</span>+stu);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s03-1"><a href="#s03-1" class="headerlink" title="s03"></a>s03</h2><p>切面业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 环绕通知方法的规范</span></span><br><span class="line"><span class="comment">    * 1)访问权限是public</span></span><br><span class="line"><span class="comment">    * 2)切面方法有返回值,此返回值就是目标方法的返回值</span></span><br><span class="line"><span class="comment">    * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">    * 4)方法有参数,此参数就是目标方法</span></span><br><span class="line"><span class="comment">    * 5)回避异常Throwable</span></span><br><span class="line"><span class="comment">    * 6)使用<span class="doctag">@Around</span>注解声明是环绕通知</span></span><br><span class="line"><span class="comment">    *   参数:</span></span><br><span class="line"><span class="comment">    *      value:指定切入点表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Around(value = &quot;execution(* com.bjpwernode.s03.*.*(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      <span class="comment">//前切功能实现</span></span><br><span class="line">      System.out.println(<span class="string">&quot;环绕通知中的前置功能实现。。。&quot;</span>);</span><br><span class="line">      <span class="comment">//目标方法调用</span></span><br><span class="line">      Object obj = pjp.proceed(pjp.getArgs());</span><br><span class="line">      <span class="comment">//后切功能实现</span></span><br><span class="line">      System.out.println(<span class="string">&quot;环绕通知中的后置功能实现。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>  obj.toString().toUpperCase();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">   <span class="function">String <span class="title">doSome</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">doSome</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;doSome业务方法被执行。。&quot;</span>+name);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s03</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--基于注解的访问要添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpwernode.s03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpwernode.s03.SomeService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest03</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ApplicationContext ac =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s03/applicationContext.xml&quot;</span>);</span><br><span class="line">   SomeService someService = (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      String s = someService.doSome(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;在测试方法中目标方法的返回值：&quot;</span>+s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="s04"><a href="#s04" class="headerlink" title="s04"></a>s04</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 最终通知方法的规范</span></span><br><span class="line"><span class="comment">    * 1)访问权限是public</span></span><br><span class="line"><span class="comment">    * 2)方法没有返回值</span></span><br><span class="line"><span class="comment">    * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">    * 4)方法没有参数,如果有也只能是JoinPoint</span></span><br><span class="line"><span class="comment">    * 5)使用<span class="doctag">@After</span>注解表明是最终通知</span></span><br><span class="line"><span class="comment">    *   参数:</span></span><br><span class="line"><span class="comment">    *     value:指定切入点表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@After(value=&quot;mycut()&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;最终通知的功能，。。。。&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before(value = &quot;mycut()&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;前置通知的功能。。。。。&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AfterReturning(value = &quot;mycut()&quot;,returning = &quot;obj&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;后置通知的功能...&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(value=&quot;mycut()&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;环绕通知中的前置通知的功能。。。。&quot;</span>);</span><br><span class="line">      <span class="comment">//ProceedingJoinPoint的proceed()方法来执行被代理的方法</span></span><br><span class="line">      Object obj = pjp.proceed(pjp.getArgs());</span><br><span class="line">      System.out.println(<span class="string">&quot;环绕通知中的后置通知的功能。。。。&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>  obj;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Pointcut(value = &quot;execution(* com.bjpwernode.s04.*.*(..))&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mycut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">   <span class="function">String <span class="title">doSome</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode.s04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">doSome</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;doSome业务方法被执行。。&quot;</span>+name);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources-s04</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--基于注解的访问要添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpwernode.s04&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyTest4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpwernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpwernode.s04.SomeService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest04</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ApplicationContext ac =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;s04/applicationContext.xml&quot;</span>);</span><br><span class="line">   SomeService someService = (SomeService) ac.getBean(<span class="string">&quot;someServiceImpl&quot;</span>);</span><br><span class="line">      String s = someService.doSome(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;在测试方法中目标方法的返回值：&quot;</span>+s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spring-008-sm"><a href="#spring-008-sm" class="headerlink" title="spring_008_sm"></a>spring_008_sm</h1><img src="/2022/09/11/Spring/Spring-code/Spring-code/image-20220920085915128.png" class="" title="image-20220920085915128">

<h2 id="pom文件-3"><a href="#pom文件-3" class="headerlink" title="pom文件"></a>pom文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_008_sm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aspectj依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring核心ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--做spring事务用到的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring集成的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里公司的数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目的是把src/main/java目录中的xml文件包含到输出结果中。输出到classes目录中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h2><h3 id="java-3"><a href="#java-3" class="headerlink" title="java"></a>java</h3><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><p>UsersMapper.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UsersMapper.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt; &lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.bjpowernode.mapper.UsersMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">    <span class="keyword">private</span> Integer userid;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String upass;</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span> parameterType=<span class="string">&quot;users&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into users <span class="title">values</span><span class="params">(#&#123;userid&#125;,#&#123;username&#125;,#&#123;upass&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure>

<p>AccountsMapper.interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Accounts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountsMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加账户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Accounts accounts)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.AccountsMapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        //增加账户</span></span><br><span class="line"><span class="comment">       int save(Accounts accounts);</span></span><br><span class="line"><span class="comment">       private Integer aid;</span></span><br><span class="line"><span class="comment">       private String aname;</span></span><br><span class="line"><span class="comment">       private String acontent;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;accounts&quot;</span> &gt;</span></span><br><span class="line">        insert into accounts values (#&#123;aid&#125;,#&#123;aname&#125;,#&#123;acontent&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="pojo-3"><a href="#pojo-3" class="headerlink" title="pojo"></a>pojo</h4><p>Users.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer userid;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String upass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;userid=&quot;</span> + userid +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, upass=&#x27;&quot;</span> + upass + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserid</span><span class="params">(Integer userid)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.userid = userid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> username;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.username = username;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUpass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> upass;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpass</span><span class="params">(String upass)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.upass = upass;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(Integer userid, String username, String upass)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.userid = userid;</span><br><span class="line">      <span class="keyword">this</span>.username = username;</span><br><span class="line">      <span class="keyword">this</span>.upass = upass;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Accounts.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Accounts</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer aid;</span><br><span class="line">   <span class="keyword">private</span> String aname;</span><br><span class="line">   <span class="keyword">private</span> String acontent;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Accounts</span><span class="params">(Integer aid, String aname, String acontent)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.aid = aid;</span><br><span class="line">      <span class="keyword">this</span>.aname = aname;</span><br><span class="line">      <span class="keyword">this</span>.acontent = acontent;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Accounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getAid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> aid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.aid = aid;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> aname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAname</span><span class="params">(String aname)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.aname = aname;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAcontent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> acontent;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcontent</span><span class="params">(String acontent)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.acontent = acontent;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Accounts&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;aid=&quot;</span> + aid +</span><br><span class="line">            <span class="string">&quot;, aname=&#x27;&quot;</span> + aname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, acontent=&#x27;&quot;</span> + acontent + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h4><p>UsersService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加用户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AccountsService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Accounts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountsService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加账户</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Accounts accounts)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h5><p>UsersServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.UsersMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Accounts;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.AccountsService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.UsersService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	AccountsService accountsService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = usersMapper.insert(users);</span><br><span class="line">		System.out.println(<span class="string">&quot;用户添加成功!num=&quot;</span>+num);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用账户的增加操作</span></span><br><span class="line">		num = accountsService.save(<span class="keyword">new</span> Accounts(<span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;账户好的呢！&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span>  num;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AccountsServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.mapper.AccountsMapper;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Accounts;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.AccountsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">/*@Transactional(propagation = Propagation.REQUIRED,//事物的传播特性</span></span><br><span class="line"><span class="comment">      noRollbackForClassName = &quot;ArithmeticException&quot;,//指定发生什么异常不回滚，使用的是异常的名称</span></span><br><span class="line"><span class="comment">      noRollbackFor = ArithmeticException.class,//指定发生什么异常不回滚指，使用的是异常的类型</span></span><br><span class="line"><span class="comment">      rollbackForClassName = &quot;&quot;,//指定发生什么异常必须滚指</span></span><br><span class="line"><span class="comment">      rollbackFor =ArithmeticException.class,//指定发生什么异常必须滚指</span></span><br><span class="line"><span class="comment">      timeout = -1, //连接超时设置,默认值是-1,表示永不超时</span></span><br><span class="line"><span class="comment">      readOnly = false, //默认是false,如果是查询操作,必须设置为true.</span></span><br><span class="line"><span class="comment">      isolation = Isolation.DEFAULT//使用数据库自已的隔离级别</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountsServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AccountsMapper accountsMapper;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Accounts accounts)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">      num= accountsMapper.save(accounts);</span><br><span class="line">      System.out.println(<span class="string">&quot;账户增加成功！num=&quot;</span>+num);</span><br><span class="line">      <span class="comment">//手工抛出异常</span></span><br><span class="line">      System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="resources-2"><a href="#resources-2" class="headerlink" title="resources"></a>resources</h3><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--读取属性文件中数据库的配置--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;properties resource=&quot;db.properties&quot;&gt;&lt;/properties&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置日志输出语句,显示相应操作的sql语名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册别名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">        &lt;package name=&quot;com.bjpowernode.pojo&quot;&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;environments default=&quot;development&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;environment id=&quot;development&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name=&quot;url&quot;</span></span><br><span class="line"><span class="comment">                          value=&quot;jdbc:mysql://localhost:3308/ssm?useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;allowPublicKeyRetrieval=true&quot;/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name=&quot;password&quot; value=&quot;123&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;/dataSource&gt;</span></span><br><span class="line"><span class="comment">        &lt;/environment&gt;</span></span><br><span class="line"><span class="comment">    &lt;/environments&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--   &lt;mappers&gt;</span></span><br><span class="line"><span class="comment">        &lt;package name=&quot;mapper文件所在的包名&quot;&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mappers&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--读取属性文件jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactoryBean类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置MyBatis的核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SqlMapConfig.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册实体类的别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入applicationContext_mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext_mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SM是基于注解的开发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.service.impl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务处理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.添加事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为事务必须关联数据库管理，所以要配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.添加事务的注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>applicationContext_trans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--此配置文件与applicationContext_service.xml的功能一样,只是事务配置不同--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入applicationContext_mapper.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext_mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.service.impl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myadvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*search*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*insert*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">no-rollback-for</span>=<span class="string">&quot;ArithmeticException&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">no-rollback-for</span>=<span class="string">&quot;ArithmeticException&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*set*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*change*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*modify*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*remove*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*drop*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*clear*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定切面和切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mycut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.bjpowernode.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span>  <span class="attr">advice-ref</span>=<span class="string">&quot;myadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mycut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Accounts;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.AccountsService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.UsersService;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.service.impl.UsersServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span></span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建容器并启动</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_service.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出UsersServiceImpl</span></span><br><span class="line">      UsersService uService= (UsersService) ac.getBean(<span class="string">&quot;usersServiceImpl&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> num = uService.insert(<span class="keyword">new</span> Users(<span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">      System.out.println(num);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccounts</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建容器并启动</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_service.xml&quot;</span>);</span><br><span class="line">      AccountsService accountsService= (AccountsService) ac.getBean(<span class="string">&quot;accountsServiceImpl&quot;</span>);</span><br><span class="line">      System.out.println(accountsService.getClass());</span><br><span class="line">      accountsService.save(<span class="keyword">new</span> Accounts(<span class="number">206</span>,<span class="string">&quot;李四6&quot;</span>,<span class="string">&quot;账户安全6&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTrans</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//创建容器并启动</span></span><br><span class="line">      ApplicationContext ac=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_trans.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//取出UsersServiceImpl</span></span><br><span class="line">      UsersService uService= (UsersService) ac.getBean(<span class="string">&quot;usersServiceImpl&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> num = uService.insert(<span class="keyword">new</span> Users(<span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">      System.out.println(num);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>servlet-jsp-code</title>
    <url>/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/</url>
    <content><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="servlet01-使用IDEA工具开发Servlet"><a href="#servlet01-使用IDEA工具开发Servlet" class="headerlink" title="servlet01 使用IDEA工具开发Servlet"></a>servlet01 使用IDEA工具开发Servlet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet无参构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s init method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s service method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s destroy method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>StudentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.StudentServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>StudentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/student<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>student page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里项目名字/xmm，无法动态获取，先写死--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/servlet/student&quot;</span>&gt;</span>student list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>静态资源</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220514191039434.png" class="" title="image-20220514191039434">

<p>servlet</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220514191138169.png" class="" title="image-20220514191138169">

<h2 id="Servlet02"><a href="#Servlet02" class="headerlink" title="Servlet02"></a>Servlet02</h2><h3 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AServlet无参构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s init method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s service method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Aservllet&#x27;s destroy method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServelt</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BServelt</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Bservlet无参构造方法执行了&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>XML文件</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220514191515832.png" class="" title="image-20220514191515832">

<p>servlet标签内加load-on-startup标签即可在服务器启动时创建servlet对象！</p>
<hr>
<h3 id="适配器模式改造servlet"><a href="#适配器模式改造servlet" class="headerlink" title="适配器模式改造servlet"></a>适配器模式改造servlet</h3><p>使代码变得更优雅</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 编写一个标准通用的Servlet，起名：GenericServlet</span></span><br><span class="line"><span class="comment"> 以后所有的Servlet类都不要直接实现Servlet接口了</span></span><br><span class="line"><span class="comment"> 以后所有的Servlet类都要继承GenericServlet类</span></span><br><span class="line"><span class="comment"> GenericServlet就是一个适配器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法：这个方法最常用，所以要求子类必须实现service方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理用户请求，请稍后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vip可以享受更好的服务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>XML文件</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220514191931460.png" class="" title="image-20220514191931460">

<hr>
<h3 id="改造GenericServlet"><a href="#改造GenericServlet" class="headerlink" title="改造GenericServlet"></a>改造GenericServlet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 编写一个标准通用的Servlet，起名：GenericServlet</span></span><br><span class="line"><span class="comment"> 以后所有的Servlet类都不要直接实现Servlet接口了</span></span><br><span class="line"><span class="comment"> 以后所有的Servlet类都要继承GenericServlet类</span></span><br><span class="line"><span class="comment"> GenericServlet就是一个适配器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * init方法中的ServletConfig对象是小猫咪创建好的</span></span><br><span class="line"><span class="comment">     * 这个ServletConfig对象目前在init方法的参数上，属于局部变量</span></span><br><span class="line"><span class="comment">     * 那么ServletConfig对象肯定以后要在service方法中使用的，怎么才能保证ServletConfig对象在service方法中能够使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//  System.out.println(&quot;servletConfig对象，小猫咪创建好的：&quot; + servletConfig);</span></span><br><span class="line">        <span class="keyword">this</span>.config=servletConfig;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个init方法是提供给子类重写的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法：这个方法最常用，所以要求子类必须实现service方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//父类将原始的init方法final了，我子类没有办法重写这个init方法了</span></span><br><span class="line">    <span class="comment">//若果这个时候我还是想能够重写init方法，该怎么办呢</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoginServley&#x27;s init() method execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理用户请求，请稍后&quot;</span>);</span><br><span class="line">        <span class="comment">//想在LoginServlet子类中使用ServletConfig对象怎么办？</span></span><br><span class="line">        ServletConfig config=<span class="keyword">this</span>.getServletConfig();</span><br><span class="line">        System.out.println(<span class="string">&quot;service方法中是否可以获取到ServletConfig对象？&quot;</span> + config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个是原装的GenericServlet类</span></span><br><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServlet&#x27;s service execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>XML文件</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220514223049013.png" class="" title="image-20220514223049013">

<hr>
<h2 id="Servlet03-ServletConfig接口详解"><a href="#Servlet03-ServletConfig接口详解" class="headerlink" title="Servlet03 ServletConfig接口详解"></a>Servlet03 ServletConfig接口详解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletConfig</span></span><br><span class="line"><span class="comment"> * 1.  jakarta.servlet.ServletConfig</span></span><br><span class="line"><span class="comment"> *      显然ServletConfig是Servlet规范中的一员</span></span><br><span class="line"><span class="comment"> *      ServletConfig是一个接口（jakarta.servlet.ServletConfig是一个接口）</span></span><br><span class="line"><span class="comment"> * 2. 谁实现了这个接口？WEB服务器实现了</span></span><br><span class="line"><span class="comment"> *     public class org.apache.catalina.core.StandardWrapperFacade implements ServletConif&#123;&#125;</span></span><br><span class="line"><span class="comment"> *      结论：Tomcat服务器实现了ServletConfig接口</span></span><br><span class="line"><span class="comment"> *      思考：如果Tomcat服务器换成jetty服务器，输出ServletConfig对象的时候，还会是这个结果吗</span></span><br><span class="line"><span class="comment"> *          不一定一样，包名类名可能和Tomcat不一样，但是他们都实现了ServletConfig这个规范</span></span><br><span class="line"><span class="comment"> * 3.一个Servlet对象中有一个ServletConfig对象，（Servlet和ServletConfig对象是一对一）</span></span><br><span class="line"><span class="comment"> *     100个Servlet，有100ServletConfig对象</span></span><br><span class="line"><span class="comment"> * 4.ServletConfig对象是谁创建的，什么时候</span></span><br><span class="line"><span class="comment"> *      Tomcat服务器（WEB服务器）创建了ServletConfig对象</span></span><br><span class="line"><span class="comment"> *      在创建Sevlet对象的时候，同时创建ServletConfig对象</span></span><br><span class="line"><span class="comment"> * 5.ServletConfig接口到底是干嘛的呢？有什么用</span></span><br><span class="line"><span class="comment"> *      Config是COnfiguration单词的缩写</span></span><br><span class="line"><span class="comment"> *    ServletConfig为：Servlet对象的配置信息</span></span><br><span class="line"><span class="comment"> *    一个Servlet对象有一个配置信息</span></span><br><span class="line"><span class="comment"> * 6.Servlet对象包装了什么信息？</span></span><br><span class="line"><span class="comment">*      &lt;servlet&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;servlet-name&gt;configTest&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;servlet-class&gt;com.powernode.javaweb.servlet.ConfigTestServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;/servlet&gt;</span></span><br><span class="line"><span class="comment"> *     ServletConfig对象中包装的信息是：</span></span><br><span class="line"><span class="comment"> *          web.xml文件中&lt;servlet&gt;&lt;/servlet&gt;标签配置的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     Tomcat小猫咪解析web.xml文件,将web.xml文件&lt;servlet&gt;&lt;/servlet&gt;标签配置的信息自动包装到ServletConfig对象中</span></span><br><span class="line"><span class="comment"> *7.ServletConfig接口中有哪些方法？</span></span><br><span class="line"><span class="comment"> * &lt;servlet&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;servlet-name&gt;configTest&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;servlet-class&gt;com.powernode.javaweb.servlet.ConfigTestServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;!--这里可以配置一个Servlet对象的初始化信息的 --&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;init-param&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-name&gt;driver&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-value&gt;com.mysql.cj.jdbc.Driver&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;init-param&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-name&gt;url&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-value&gt;jdbc:mysql://localhost:3306/westos&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;init-param&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-name&gt;user&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-value&gt;root&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;init-param&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-name&gt;password&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;param-value&gt;123&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment"> *         &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;/servlet&gt;</span></span><br><span class="line"><span class="comment"> *      以上servlet标签中的&lt;init-param&gt;&lt;/init-param&gt;是初始化参数，这个初始化参数会自动被小猫咪封装到ServletConfig对象当中</span></span><br><span class="line"><span class="comment"> * 8.ServletConfig接口中有四个方法</span></span><br><span class="line"><span class="comment"> *      1.</span></span><br><span class="line"><span class="comment"> *          public String getInitParameter（String name)</span></span><br><span class="line"><span class="comment"> *      2.</span></span><br><span class="line"><span class="comment"> *          public Enumeration&lt;String&gt; getInitParameterNames()</span></span><br><span class="line"><span class="comment"> *      3.</span></span><br><span class="line"><span class="comment"> *          public ServletContext getServletContext()</span></span><br><span class="line"><span class="comment"> *      4.</span></span><br><span class="line"><span class="comment"> *          public String getServletName()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      以上的四个方法，在自己编写的的Servlet类中也可以使用this调用。（这个Servlet类继承了GenericServlet)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">            PrintWriter out = servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取ServletConfig对象</span></span><br><span class="line">            ServletConfig  config=<span class="keyword">this</span>.getServletConfig();</span><br><span class="line">            <span class="comment">//输出该对象</span></span><br><span class="line">            <span class="comment">//ServletConfig对象是：org.apache.catalina.core.StandardWrapperFacade@4c9173b2</span></span><br><span class="line">            out.print(<span class="string">&quot;ServletConfig对象是：&quot;</span> + config.toString());</span><br><span class="line">            out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">//获取&lt;servlet-name&gt;&lt;/servlet-name&gt;</span></span><br><span class="line">             String servletName = config.getServletName();</span><br><span class="line">             out.print(<span class="string">&quot;&lt;servlet-name&gt;&quot;</span>+servletName+<span class="string">&quot;&lt;/servlet-name&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames =config.getInitParameterNames();</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">while</span>(initParameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String parameterName =initParameterNames.nextElement();</span><br><span class="line">            String parameterVal=config.getInitParameter(parameterName);</span><br><span class="line">            out.print(parameterName);</span><br><span class="line">            out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实际上获取一个Servlet对象，可以不用获取ServletConfig对象，直接通过this也行</span></span><br><span class="line">        Enumeration&lt;String&gt; names=<span class="keyword">this</span>.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span>(names.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String name=names.nextElement();</span><br><span class="line">            String value=<span class="keyword">this</span>.getInitParameter(name);</span><br><span class="line">            <span class="comment">//打印到后台</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过ServletConfig获取ServletContext对象</span></span><br><span class="line">        <span class="comment">//第一种方法：通过ServletConfig对象来获取ServletContext对象</span></span><br><span class="line">        ServletContext application=config.getServletContext();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        out.print(application+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种方法：通过this来获取</span></span><br><span class="line">        ServletContext application2=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">        out.print(application2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestServlet2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ServletConfig对象</span></span><br><span class="line">        ServletConfig config=<span class="keyword">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//输出该对象</span></span><br><span class="line">        <span class="comment">//ServletConfig对象是：org.apache.catalina.core.StandardWrapperFacade@4c9173b2</span></span><br><span class="line">        out.print(<span class="string">&quot;ServletConfig对象是：&quot;</span> + config);</span><br><span class="line"></span><br><span class="line">        String value = config.getInitParameter(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>configTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.powernode.javaweb.servlet.ConfigTestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里可以配置一个Servlet对象的初始化信息的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/westos<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>configTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>configTest2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.powernode.javaweb.servlet.ConfigTestServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>configTest2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Servlet04-ServletContext接口详解"><a href="#Servlet04-ServletContext接口详解" class="headerlink" title="Servlet04 ServletContext接口详解"></a>Servlet04 ServletContext接口详解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext</span></span><br><span class="line"><span class="comment"> * 1.ServletContext是什么？</span></span><br><span class="line"><span class="comment"> *      ServletContext是接口，是Servlet规范中的一员</span></span><br><span class="line"><span class="comment"> * 2.ServletContext是谁实现的？</span></span><br><span class="line"><span class="comment"> *       TomCat服务器（Web服务器）实现的</span></span><br><span class="line"><span class="comment"> *  public class org.apache.catalina.core.ApplicationContextFacade</span></span><br><span class="line"><span class="comment"> * 3.ServletContext对象是谁创建的呢？在什么时候创建的？</span></span><br><span class="line"><span class="comment"> *      ServletContext对象在WEB服务器启动的时候创建</span></span><br><span class="line"><span class="comment"> *      对于一个webapp来说，ServletContext对象只有一个</span></span><br><span class="line"><span class="comment"> *      ServletContext对象在夫妻关闭的时候bei销毁</span></span><br><span class="line"><span class="comment"> * 4.ServletContext怎么理解</span></span><br><span class="line"><span class="comment"> *      context什么意思？</span></span><br><span class="line"><span class="comment"> *          Servlet对象的环境对象。（Servlet对象的上下文对象）；</span></span><br><span class="line"><span class="comment"> * ServletContext对象其实对应的是整个web.xml文件</span></span><br><span class="line"><span class="comment"> * 一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext application=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">        out.print(<span class="string">&quot;ServletContext对象是:&quot;</span>+application+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取上下文的初始化参数</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = application.getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span>(initParameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String name=initParameterNames.nextElement();</span><br><span class="line">            String value=application.getInitParameter(name);</span><br><span class="line">            out.print(name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取context path（获取应用上下文的根）</span></span><br><span class="line">        String contextPath=application.getContextPath();</span><br><span class="line">        out.print(contextPath+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件的绝对路径</span></span><br><span class="line">        <span class="comment">//后面的这个路径，加了”/“，这个”/“是代表的是web的根</span></span><br><span class="line">        <span class="comment">//String realPath=application.getRealPath(&quot;/index/html&quot;);</span></span><br><span class="line">        <span class="comment">//不加”/“，默认也是从根下开始寻找</span></span><br><span class="line">        <span class="comment">//String realPath=application.getRealPath(&quot;index/html&quot;);也可以</span></span><br><span class="line">        <span class="comment">//out.print(realPath+&quot;&lt;br&gt;&quot;);</span></span><br><span class="line"></span><br><span class="line">        String  realPath= application.getRealPath(<span class="string">&quot;/common/common.html&quot;</span>);</span><br><span class="line">        out.print(realPath+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备数据</span></span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">//想ServletContext应用域中存储数据</span></span><br><span class="line">        application.setAttribute(<span class="string">&quot;userObj&quot;</span>,user);</span><br><span class="line">        <span class="comment">//取出来</span></span><br><span class="line">        Object userObj=application.getAttribute(<span class="string">&quot;userObj&quot;</span>);</span><br><span class="line">        <span class="comment">//输出到浏览器中</span></span><br><span class="line">        out.print(userObj+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext application=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">        out.print(<span class="string">&quot;ServletConfig对象是:&quot;</span>+application+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//log</span></span><br><span class="line">        <span class="comment">//这个日志会自动记录到哪里呢</span></span><br><span class="line">        <span class="comment">//CATALINA_HOME/logs目录下</span></span><br><span class="line">        <span class="comment">//application.log(&quot;冲冲冲！&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            application.log(<span class="string">&quot;对不起，您未成年，请绕行&quot;</span>,<span class="keyword">new</span> RuntimeException(<span class="string">&quot;小屁孩，快走开，不适合你！&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出来</span></span><br><span class="line">        Object userObj=application.getAttribute(<span class="string">&quot;userObj&quot;</span>);</span><br><span class="line">        <span class="comment">//输出到浏览器中</span></span><br><span class="line">        out.print(userObj+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--上下文的初始化参数,以下的配置信息，可以通过ServletContext对象来获取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>bservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.BServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>bservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/b<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Servlet05-Get和Post的区别"><a href="#Servlet05-Get和Post的区别" class="headerlink" title="Servlet05 Get和Post的区别"></a>Servlet05 Get和Post的区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//响应一些内容到浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//out.println是输出信息到浏览器，最终源代码中换行。（不是网页上有换行效果，网页上有换行效果必须使用&lt;br&gt;)</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;!doctype html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;from get servlet&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;from get servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            <span class="comment">//响应一些内容到浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">     out.print(<span class="string">&quot;&lt;!doctype html&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot; &lt;html&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot;&lt;title&gt;from post servlet&lt;/title&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot; &lt;body&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot;&lt;h1&gt;from post servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">     out.print(<span class="string">&quot; &lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>http协议<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：浏览器上编写的这个请求路径还是要带上应用的根路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>get请求:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet05/getServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    username<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>post请求:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet05/postServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  username<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  password<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>postServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.PostServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>postServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/postServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="template-模板方法设计模式"><a href="#template-模板方法设计模式" class="headerlink" title="template 模板方法设计模式"></a>template 模板方法设计模式</h2><p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.template2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Teacher和Student都是Person</span></span><br><span class="line"><span class="comment"> * 1. Person就是模板方法设计模式当中的模板类。</span></span><br><span class="line"><span class="comment"> * 2. day()方法就是模板方法设计模式当中的模板方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">// 模板类通常是抽象类。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="comment">// 添加了final之后，这个方法无法被覆盖，这样核心的算法也可以得到保护。</span></span><br><span class="line">    <span class="comment">// 模板方法定义核心的算法骨架，具体的实现步骤可以延迟到子类当中去实现。</span></span><br><span class="line">    <span class="comment">// 核心算法一方面是得到了保护，不能被改变。另外一方面就是算法得到了重复使用。</span></span><br><span class="line">    <span class="comment">// 另外代码也得到了服用，因为算法中某些步骤的代码是固定的。这些固定的代码不会随着子类的变化而变换，这一部分代码可以写到模板类当中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">day</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 第一步</span></span><br><span class="line">        qiChuang();</span><br><span class="line">        <span class="comment">// 第二步</span></span><br><span class="line">        xiShu();</span><br><span class="line">        <span class="comment">// 第三步</span></span><br><span class="line">        chiZaoCan();</span><br><span class="line">        <span class="comment">// 第四步</span></span><br><span class="line">        doSome();</span><br><span class="line">        <span class="comment">// 第五步</span></span><br><span class="line">        chiWanFan();</span><br><span class="line">        <span class="comment">// 第六步</span></span><br><span class="line">        shuiJiao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其中的某些步骤，不会随着子类的变化而变化，这些代码可以写到父类中，得到代码复用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qiChuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xiShu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;洗漱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chiZaoCan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃早餐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这一步是要做，但是具体这一步怎么做，子类说了算。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chiWanFan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃晚饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shuiJiao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.template2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生上学，学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Teacher</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.template2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师正在课堂上授课，教授学生知识&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.template2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        p1.day();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Student();</span><br><span class="line">        p2.day();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Servlet06-HttpServlet源码分析"><a href="#Servlet06-HttpServlet源码分析" class="headerlink" title="Servlet06 HttpServlet源码分析"></a>Servlet06 HttpServlet源码分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过无参构造方法创建对象</span></span><br><span class="line"><span class="comment">//    public HelloServlet()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有init方法，那么必然执行父类HttpServlet的init方法</span></span><br><span class="line">    <span class="comment">//HttpServlet类没有init方法，那么必然执行GenericServlet类中的init（）方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有提供service方法，那么必然执行父类HttpServlet类service（）方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="comment">//        response.setContentType(&quot;text/html&quot;);</span></span><br><span class="line"><span class="comment">//        PrintWriter out = response.getWriter();</span></span><br><span class="line"><span class="comment">//        out.print(&quot;&lt;h1&gt;hello servlet&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前端发送的是get请求的时候，我这里重写doGet方法</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="comment">//        PrintWriter out = response.getWriter();</span></span><br><span class="line"><span class="comment">//        out.print(&quot;&lt;h1&gt;doGet&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//当前端发送的是post请求的时候，我这里重写doGet方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;h1&gt;doPost&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;h1&gt;登陆成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>get请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/servlet06/hello&quot;</span>&gt;</span>hello(get请求)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>post请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet06/hello&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet06/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Servlet07-web欢迎页"><a href="#Servlet07-web欢迎页" class="headerlink" title="Servlet07 web欢迎页"></a>Servlet07 web欢迎页</h2><img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220518180426157.png" class="" title="image-20220518180426157">

<p>page.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome to study servlet<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hellohello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;welcome-file-list&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/welcome-file-list&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过request接口获取请求参数"><a href="#通过request接口获取请求参数" class="headerlink" title="通过request接口获取请求参数"></a>通过request接口获取请求参数</h2><p>发送请求的html</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220521144112781.png" class="" title="image-20220521144112781">

<p>xml文件</p>
<img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220521144322528.png" class="" title="image-20220521144322528">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">username=zhangsan&amp;userpwd=123&amp;interest=s&amp;interest=d</span></span><br><span class="line"><span class="comment">Map&lt;String,String[]&gt;</span></span><br><span class="line"><span class="comment">key				value</span></span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line"><span class="comment">&quot;username&quot;		&#123;&quot;zhangsan&quot;&#125;</span></span><br><span class="line"><span class="comment">&quot;userpwd&quot;		&#123;&quot;123&quot;&#125;</span></span><br><span class="line"><span class="comment">&quot;interest&quot;		&#123;&quot;s&quot;, &quot;d&quot;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结一下：request接口中四个非常重要的方法。</span></span><br><span class="line"><span class="comment">	Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span></span><br><span class="line"><span class="comment">	Enumeration&lt;String&gt; names = request.getParameterNames();</span></span><br><span class="line"><span class="comment">	String[] values = request.getParameterValues(&quot;name&quot;);</span></span><br><span class="line"><span class="comment">	String value = request.getParameter(&quot;name&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException,ServletException</span>&#123;</span><br><span class="line">		<span class="comment">// 面向接口编程:HttpServletRequest接口。</span></span><br><span class="line">		<span class="comment">// 获取前端提交的数据</span></span><br><span class="line">		<span class="comment">// 前端会提交什么数据呢？</span></span><br><span class="line">		<span class="comment">// username=zhangsan&amp;userpwd=123&amp;interest=s&amp;interest=d</span></span><br><span class="line">		<span class="comment">// 以上的数据会被小猫咪封装到request对象中。</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取参数Map集合</span></span><br><span class="line">		Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">		<span class="comment">// 遍历Map集合(获取Map集合中所有的key，遍历)</span></span><br><span class="line">		Set&lt;String&gt; keys = parameterMap.keySet();</span><br><span class="line">		Iterator&lt;String&gt; it = keys.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			String key = it.next();</span><br><span class="line">			<span class="comment">//System.out.println(key);</span></span><br><span class="line">			<span class="comment">// 通过key获取value</span></span><br><span class="line">			String[] values = parameterMap.get(key);</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				username=[Ljava.lang.String;@7cce40b4</span></span><br><span class="line"><span class="comment">				userpwd=[Ljava.lang.String;@7453f0b9</span></span><br><span class="line"><span class="comment">				interest=[Ljava.lang.String;@4063ebb5</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="comment">//System.out.println(key + &quot;=&quot; + values);</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 遍历一维数组</span></span><br><span class="line">			System.out.print(key + <span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span>(String value : values)&#123;</span><br><span class="line">				System.out.print(value + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 换行</span></span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 直接通过getParameterNames()这个方法，可以直接获取这个Map集合的所有key</span></span><br><span class="line">		Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(names.hasMoreEents())&#123;</span><br><span class="line">			String name = names.nextElement();</span><br><span class="line">			System.out.println(name);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 直接通过name获取value这个一维数组。</span></span><br><span class="line">		String[] usernames = request.getParameterValues(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String[] userpwds = request.getParameterValues(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">		String[] interests = request.getParameterValues(<span class="string">&quot;interest&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历一维数组</span></span><br><span class="line">		<span class="keyword">for</span>(String username : usernames)&#123;</span><br><span class="line">			System.out.println(username);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(String userpwd : userpwds)&#123;</span><br><span class="line">			System.out.println(userpwd);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(String interest : interests)&#123;</span><br><span class="line">			System.out.println(interest);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 通过name获取value这个一维数组的第一个元素</span></span><br><span class="line">		<span class="comment">// 这个方法使用最多，因为这个一维数组中一般只有一个元素。</span></span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String userpwd = request.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">		<span class="comment">//String interest = request.getParameter(&quot;interest&quot;);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 既然是checkbox，调用方法：request.getParameterValues(&quot;interest&quot;)</span></span><br><span class="line">		String[] interests2 = request.getParameterValues(<span class="string">&quot;interest&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取的都是一维数组当中的第一个元素。</span></span><br><span class="line">		System.out.println(username);</span><br><span class="line">		System.out.println(userpwd);</span><br><span class="line">		<span class="comment">//System.out.println(interest);</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(String interest : interests2)&#123;</span><br><span class="line">			System.out.println(interest);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Servlet08-请求域对象及关于request对象的常用方法（1）"><a href="#Servlet08-请求域对象及关于request对象的常用方法（1）" class="headerlink" title="Servlet08  请求域对象及关于request对象的常用方法（1）"></a>Servlet08  请求域对象及关于request对象的常用方法（1）</h2><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requestTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.RequestTestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requestTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testRequest<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>b<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.BServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>b<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/b<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>test html page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>user register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet08/testRequest&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    interest:</span><br><span class="line">        smoke<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;s&quot;</span>&gt;</span></span><br><span class="line">        drink<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">        tangtou<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取系统当前时间</span></span><br><span class="line">        Date nowTime = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将系统当前时间绑定到请求域当中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;sysTime&quot;</span>, nowTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出来</span></span><br><span class="line">        <span class="comment">//Object sysTime = request.getAttribute(&quot;sysTime&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出到控制台</span></span><br><span class="line">        <span class="comment">//System.out.println(sysTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这样做可以吗？</span></span><br><span class="line">        <span class="comment">// 在AServlet当中new一个BServlet对象，然后调用BServlet对象的doGet方法，把request对象传过去。</span></span><br><span class="line">        <span class="comment">// 这个代码虽然可以实现功能，但是Servlet对象不能自己由程序员来new。自己new的Servlet对象生命周期不受Tomcat服务器的管理。</span></span><br><span class="line">        <span class="comment">/*BServlet bServlet = new BServlet();</span></span><br><span class="line"><span class="comment">        bServlet.doGet(request, response);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Servlet当中的转发机制。</span></span><br><span class="line">        <span class="comment">// 执行了AServlet之后，跳转到BServlet。（这个资源跳转可以使用转发机制来完成。）</span></span><br><span class="line">        <span class="comment">// 怎么转发？代码怎么写？</span></span><br><span class="line">        <span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line">        <span class="comment">// 相当于把&quot;/b&quot;这个路径包装到请求转发器当中，实际上是把下一个跳转的资源的路径告知给Tomcat服务器了。</span></span><br><span class="line">        <span class="comment">//RequestDispatcher dispatcher = request.getRequestDispatcher(&quot;/b&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：调用请求转发器RequestDispatcher的forward方法。进行转发。</span></span><br><span class="line">        <span class="comment">// 转发的时候：这两个参数很重要。request和response都是要传递给下一个资源的。</span></span><br><span class="line">        <span class="comment">//dispatcher.forward(request, response);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一行代码搞定转发。</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher(&quot;/b&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转发到一个Servlet，也可以转发到一个HTML，只要是WEB容器当中的合法资源即可。</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/test.html&quot;</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从请求域当中取出绑定的数据</span></span><br><span class="line">        Object sysTime = request.getAttribute(<span class="string">&quot;sysTime&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出到浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;系统当前时间是：&quot;</span> + sysTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*response.setContentType(&quot;text/html&quot;);</span></span><br><span class="line"><span class="comment">        PrintWriter out = response.getWriter();</span></span><br><span class="line"><span class="comment">        // org.apache.catalina.connector.RequestFacade@642e8513</span></span><br><span class="line"><span class="comment">        out.print(request);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 获取客户端的IP地址</span></span><br><span class="line"><span class="comment">        String remoteAddr = request.getRemoteAddr();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;客户端的IP地址：&quot; + remoteAddr);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个方法使用比较多。（动态获取应用的根路径。）</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;应用的根路径：&quot;</span> + contextPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method); <span class="comment">// GET</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求的URI</span></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        System.out.println(requestURI); <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取servlet路径</span></span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        System.out.println(servletPath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    protected void doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">            throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="comment">        // 这是POST请求。</span></span><br><span class="line"><span class="comment">        String username = request.getParameter(&quot;username&quot;);</span></span><br><span class="line"><span class="comment">        // 输出这个用户提交的用户名</span></span><br><span class="line"><span class="comment">        System.out.println(username);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Servlet09-关于request对象的常用方法（2）"><a href="#Servlet09-关于request对象的常用方法（2）" class="headerlink" title="Servlet09 关于request对象的常用方法（2）"></a>Servlet09 关于request对象的常用方法（2）</h2><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>saveServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.UserSaveServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>saveServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/save<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>user register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet09/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSaveServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String realname = request.getParameter(<span class="string">&quot;realname&quot;</span>);</span><br><span class="line">        System.out.println(realname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求体的字符集</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户提交的用户名</span></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出username</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;大家好，我是一名Java软件工程师&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Servlet10-剖析转发和重定向"><a href="#Servlet10-剖析转发和重定向" class="headerlink" title="Servlet10 剖析转发和重定向"></a>Servlet10 剖析转发和重定向</h2><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>save<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.StudentSaveServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>save<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/save<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>b<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.BServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>b<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/b<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1"></a>eg1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 一个普通的javabean</span></span><br><span class="line"><span class="comment"> * 2. 什么是javabean？</span></span><br><span class="line"><span class="comment"> *  java是咖啡。</span></span><br><span class="line"><span class="comment"> *  bean是豆子。</span></span><br><span class="line"><span class="comment"> *  javabean：咖啡豆。</span></span><br><span class="line"><span class="comment"> *  咖啡是由咖啡豆研磨而成。寓意是Java程序是由一个一个的Javabean组成的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 一个JavaBean一般是有规范的：</span></span><br><span class="line"><span class="comment"> *      有无参数的构造方法</span></span><br><span class="line"><span class="comment"> *      属性私有化</span></span><br><span class="line"><span class="comment"> *      对外提供setter和getter方法</span></span><br><span class="line"><span class="comment"> *      重写toString()</span></span><br><span class="line"><span class="comment"> *      重写hashCode + equals</span></span><br><span class="line"><span class="comment"> *      实现java.io.Serializable接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, user.id) &amp;&amp; Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javaweb.bean.User;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个用户对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;杰克&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户对象存储到请求域当中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;userObj&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转发</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher(&quot;/b&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向（重新定方向）</span></span><br><span class="line">        <span class="comment">// 重定向时的路径当中需要以项目名开始，或者说需要添加项目名。</span></span><br><span class="line">        <span class="comment">// response对象将这个路径：&quot;/servlet10/b&quot;响应给浏览器了。</span></span><br><span class="line">        <span class="comment">// 浏览器又自发的向服务器发送了一次全新的请求：http://localhost:8080/servlet10/b</span></span><br><span class="line">        <span class="comment">// 所以浏览器一共发送了两次请求：</span></span><br><span class="line">        <span class="comment">// 第一次请求：http://localhost:8080/servlet10/a</span></span><br><span class="line">        <span class="comment">// 第二次请求：http://localhost:8080/servlet10/b</span></span><br><span class="line">        <span class="comment">// 最终浏览器地址栏上显示的地址当然是最后那一次请求的地址。所以重定向会导致浏览器地址栏上的地址发生改变。</span></span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">&quot;/b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 从请求域当中取出存储的数据</span></span><br><span class="line">        Object userObj = request.getAttribute(<span class="string">&quot;userObj&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出到浏览器</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;请求域当中的用户对象：&quot;</span> + userObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2"></a>eg2</h3><p>student.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet10/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    学生编号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;no&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    学生姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javaweb.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentSaveServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 保存学生信息到数据库</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String no = request.getParameter(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;insert into t_student(no,name) values(?,?)&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, no);</span><br><span class="line">            ps.setString(<span class="number">2</span>, name);</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存成功之后跳转到成功页面</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 转发</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/success.html&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/success.html&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量：在类加载时执行。</span></span><br><span class="line">    <span class="comment">// 并且是有顺序的。自上而下的顺序。</span></span><br><span class="line">    <span class="comment">// 属性资源文件绑定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;resources.jdbc&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据属性配置文件key获取value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 注册驱动（注册驱动只需要注册一次，放在静态代码块当中。DBUtil类加载的时候执行。）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// &quot;com.mysql.jdbc.Driver&quot; 是连接数据库的驱动，不能写死。因为以后可能还会连接Oracle数据库。</span></span><br><span class="line">            <span class="comment">// 如果连接oracle数据库的时候，还需要修改java代码，显然违背了OCP开闭原则。</span></span><br><span class="line">            <span class="comment">// OCP开闭原则：对扩展开放，对修改关闭。（什么是符合OCP呢？在进行功能扩展的时候，不需要修改java源代码。）</span></span><br><span class="line">            <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Servlet11-Servlet的注解式开发"><a href="#Servlet11-Servlet的注解式开发" class="headerlink" title="Servlet11 Servlet的注解式开发"></a>Servlet11 Servlet的注解式开发</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name=&quot;hello&quot;,urlPatterns = &#123;&quot;/hello1&quot;,&quot;/hello2&quot;&#125;,loadOnStartup = 1,</span></span><br><span class="line"><span class="meta">initParams = &#123;@WebInitParam(name=&quot;username&quot;,value=&quot;root&quot;),@WebInitParam(name = &quot;password&quot;,value=&quot;123&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法执行，HelloServlet加载完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String servletName = <span class="keyword">this</span>.getServletName();</span><br><span class="line">        out.print(<span class="string">&quot;servletName=&quot;</span>+servletName+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Servlet path</span></span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        out.print(<span class="string">&quot;servletPath=&quot;</span>+servletPath+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取初始化参数</span></span><br><span class="line">        Enumeration&lt;String&gt;  names = getInitParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            String value = getInitParameter(name);</span><br><span class="line">            out.print(name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebServlet(urlPatterns = &#123;&quot;/welcome1&quot;, &quot;/welcome2&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 注意：当注解的属性是一个数组，并且数组中只有一个元素，大括号可以省略。</span></span><br><span class="line"><span class="comment">//@WebServlet(urlPatterns = &quot;/welcome&quot;)</span></span><br><span class="line"><span class="comment">// 这个value属性和urlPatterns属性一致，都是用来指定Servlet的映射路径的。</span></span><br><span class="line"><span class="comment">//@WebServlet(value = &#123;&quot;/welcome1&quot;, &quot;/welcome2&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 如果注解的属性名是value的话，属性名也是可以省略的。</span></span><br><span class="line"><span class="comment">//@WebServlet(value = &quot;/welcome1&quot;)</span></span><br><span class="line"><span class="comment">//@WebServlet(&#123;&quot;/wel&quot;, &quot;/abc&quot;, &quot;/def&quot;&#125;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/wel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;欢迎学习Servlet。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用反射机制将类上面的注解进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用反射机制将类上面的注解进行解析</span></span><br><span class="line">    <span class="comment">//获取Class对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; welcomeServletClass= Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.WelcomeServlet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取这个类上面的注解对象</span></span><br><span class="line">        <span class="comment">//判断这个类上面有没有注解对象，如果有，就获取该注解对象</span></span><br><span class="line">        <span class="comment">//boolean annotationPresent = welcomeServletClass.isAnnotationPresent(WebServlet.class);</span></span><br><span class="line">        <span class="comment">//System.out.println(annotationPresent);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(welcomeServletClass.isAnnotationPresent(WebServlet.class))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取这个类上面的注解对象</span></span><br><span class="line">            WebServlet annotation = welcomeServletClass.getAnnotation(WebServlet.class);</span><br><span class="line">            <span class="comment">//获取注解的value属性值</span></span><br><span class="line">            String[] value=annotation.value();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;value.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(value[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="oa-使用纯Servlet做一个单表的CRUD操作"><a href="#oa-使用纯Servlet做一个单表的CRUD操作" class="headerlink" title="oa 使用纯Servlet做一个单表的CRUD操作"></a>oa 使用纯Servlet做一个单表的CRUD操作</h2><h3 id="欢迎页与错误页"><a href="#欢迎页与错误页" class="headerlink" title="欢迎页与错误页"></a>欢迎页与错误页</h3><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎使用oa系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前端超链接发送请求的时候，请求路径以“/”开始，并且要带着项目名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/dept/list&quot;</span>&gt;</span>查看部门列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>error.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>操作失败，<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.back()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h3><p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/bjpowernode?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量：在类加载时执行。</span></span><br><span class="line">    <span class="comment">// 并且是有顺序的。自上而下的顺序。</span></span><br><span class="line">    <span class="comment">// 属性资源文件绑定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;resources.jdbc&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据属性配置文件key获取value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 注册驱动（注册驱动只需要注册一次，放在静态代码块当中。DBUtil类加载的时候执行。）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// &quot;com.mysql.jdbc.Driver&quot; 是连接数据库的驱动，不能写死。因为以后可能还会连接Oracle数据库。</span></span><br><span class="line">            <span class="comment">// 如果连接oracle数据库的时候，还需要修改java代码，显然违背了OCP开闭原则。</span></span><br><span class="line">            <span class="comment">// OCP开闭原则：对扩展开放，对修改关闭。（什么是符合OCP呢？在进行功能扩展的时候，不需要修改java源代码。）</span></span><br><span class="line">            <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  //查看部门列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDetailServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/detail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDelServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/delete<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>save<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptSaveServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>save<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/save<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptEditServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/edit<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>modify<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptModifyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>modify<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/modify<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="部门list动态页面"><a href="#部门list动态页面" class="headerlink" title="部门list动态页面"></a>部门list动态页面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取应用的根路径</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集。防止中文乱码问题。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;title&gt;部门列表页面&lt;/title&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;script type=&#x27;text/javascript&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;    function del(dno)&#123;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;        if(window.confirm(&#x27;亲，删了不可恢复哦！&#x27;))&#123;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;            document.location.href = &#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/delete?deptno=&#x27; + dno&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;        &#125;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;    &#125;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;h1 align=&#x27;center&#x27;&gt;部门列表&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;table border=&#x27;1px&#x27; align=&#x27;center&#x27; width=&#x27;50%&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;			&lt;tr&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;序号&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;部门编号&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;部门名称&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;操作&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;			&lt;/tr&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">/*上面一部分是死的*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，查询所有的部门</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 获取预编译的数据库操作对象</span></span><br><span class="line">            String sql = <span class="string">&quot;select deptno as a,dname,loc from dept&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                String deptno = rs.getString(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;			&lt;tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+(++i)+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+deptno+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+dname+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;javascript:void(0)&#x27; onclick=&#x27;del(&quot;</span>+deptno+<span class="string">&quot;)&#x27;&gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/edit?deptno=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/detail?fdsafdsas=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;			&lt;/tr&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*下面一部分是死的*/</span></span><br><span class="line">        out.print(<span class="string">&quot;		&lt;/table&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/add.html&#x27;&gt;新增部门&lt;/a&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="增加部门"><a href="#增加部门" class="headerlink" title="增加部门"></a>增加部门</h3><p>add.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>新增部门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增部门<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/oa/dept/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">			部门编号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;deptno&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">			部门名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">			部门位置<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;loc&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptSaveServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理post请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取部门的信息</span></span><br><span class="line">        <span class="comment">//注意乱码问题（tomcat10不会有此问题）</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String deptno=request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        String dname = request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        String loc = request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库insert语句</span></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn= DBUtil.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;insert into dept(deptno,dname,loc)values(?,?,?)&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,deptno);</span><br><span class="line">            ps.setString(<span class="number">2</span>,dname);</span><br><span class="line">            ps.setString(<span class="number">3</span>,loc);</span><br><span class="line">            count=ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn,ps,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//保存成功跳转到列表页面</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request,response);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里最好使用重定向（浏览器会发一次全新的请求）</span></span><br><span class="line">            <span class="comment">//浏览器在地址栏上发送请求，这个请求是get请求</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//保存失败跳转到error页面</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request,response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="删除部门"><a href="#删除部门" class="headerlink" title="删除部门"></a>删除部门</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptDelServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据部门编号，删除部门。</span></span><br><span class="line">        <span class="comment">// 获取部门编号</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接数据库删除数据</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 开启事务（自动提交机制关闭）</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql = <span class="string">&quot;delete from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            <span class="comment">// 返回值是：影响了数据库表当中多少条记录。</span></span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">            <span class="comment">// 事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 遇到异常要回滚</span></span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断删除成功了还是失败了。</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//删除成功</span></span><br><span class="line">            <span class="comment">//仍然跳转到部门列表页面</span></span><br><span class="line">            <span class="comment">//部门列表页面的显示需要执行另一个Servlet。怎么办？转发。</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 删除失败</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改部门</p>
<p>负责编辑的Servlet（提交要改的部门位置，与部门名称）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptEditServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取应用根路径</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">    out.print(<span class="string">&quot;              &lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;      &lt;html&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;          &lt;head&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;              &lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;              &lt;title&gt;修改部门&lt;/title&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;          &lt;/head&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;          &lt;body&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;              &lt;h1&gt;修改部门&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;              &lt;hr&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;              &lt;form action=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/modify&#x27; method=&#x27;post&#x27;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取部门编号</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库，根据部门编号查询信息</span></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn= DBUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            String sql=<span class="string">&quot;select dname,loc from dept where deptno =?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,deptno);</span><br><span class="line">            rs= ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                String dname=rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String loc=rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line">                <span class="comment">//输出动态网页</span></span><br><span class="line">                out.print(<span class="string">&quot;                      部门编号&lt;input type=&#x27;text&#x27; name=&#x27;deptno&#x27; value=&#x27;&quot;</span>+deptno+<span class="string">&quot;&#x27; readonly/&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;                      部门名称&lt;input type=&#x27;text&#x27; name=&#x27;dname&#x27; value=&#x27;&quot;</span>+dname+<span class="string">&quot;&#x27;/&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;                      部门位置&lt;input type=&#x27;text&#x27; name=&#x27;loc&#x27; value=&#x27;&quot;</span>+loc+<span class="string">&quot;&#x27; /&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;                  &lt;input type=&#x27;submit&#x27; value=&#x27;修改&#x27;&gt; &lt;br&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;              &lt;/form&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;          &lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;      &lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现修改的Servlet（通过update来该数据库的信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptModifyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决请求体的乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       <span class="comment">//获取表单数据</span></span><br><span class="line">        String deptno=request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        String dname=request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        String loc=request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line">        <span class="comment">//连接数据库执行更新语句</span></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn= DBUtil.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;update dept set dname=?,loc=? where deptno=?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,dname);</span><br><span class="line">            ps.setString(<span class="number">2</span>,loc);</span><br><span class="line">            ps.setString(<span class="number">3</span>,deptno);</span><br><span class="line">            count= ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn,ps,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//更新成功</span></span><br><span class="line">            <span class="comment">//更新成功跳转到部门列表页面（部门列表页面是通过Java程序动态生成的,所以还需要执行另一个Servlet)</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request,response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//更新失败</span></span><br><span class="line">           <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request,response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详情部门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptDetailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;title&gt;部门详情&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;h1&gt;部门详情&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取部门编号</span></span><br><span class="line">        <span class="comment">// /oa/dept/detail?fdsafdsas=30</span></span><br><span class="line">        <span class="comment">// 虽然是提交的30，但是服务器获取的是&quot;30&quot;这个字符串。</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;fdsafdsas&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，根据部门编号查询部门信息。</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;select dname,loc from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 这个结果集一定只有一条记录。</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;部门编号：&quot;</span>+deptno+<span class="string">&quot; &lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;部门名称：&quot;</span>+dname+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;部门位置：&quot;</span>+loc+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;		&lt;input type=&#x27;button&#x27; value=&#x27;后退&#x27; onclick=&#x27;window.history.back()&#x27;/&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="oa2-使用模板方法设计模式解决类爆炸"><a href="#oa2-使用模板方法设计模式解决类爆炸" class="headerlink" title="oa2 使用模板方法设计模式解决类爆炸"></a>oa2 使用模板方法设计模式解决类爆炸</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板类</span></span><br><span class="line"><span class="meta">@WebServlet(&#123;&quot;/dept/list&quot;, &quot;/dept/save&quot;, &quot;/dept/edit&quot;, &quot;/dept/detail&quot;, &quot;/dept/delete&quot;, &quot;/dept/modify&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 模糊匹配</span></span><br><span class="line"><span class="comment">// 只要请求路径是以&quot;/dept&quot;开始的，都走这个Servlet。</span></span><br><span class="line"><span class="comment">//@WebServlet(&quot;/dept/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="comment">// 重写service方法（并没有重写doGet或者doPost）</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取servlet path</span></span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/dept/list&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doList(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/save&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doSave(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/edit&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doEdit(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/detail&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doDetail(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/delete&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doDel(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/modify&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">            doModify(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doList</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取应用的根路径</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集。防止中文乱码问题。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;title&gt;部门列表页面&lt;/title&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;script type=&#x27;text/javascript&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;    function del(dno)&#123;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;        if(window.confirm(&#x27;亲，删了不可恢复哦！&#x27;))&#123;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;            document.location.href = &#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/delete?deptno=&#x27; + dno&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;        &#125;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;    &#125;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;h1 align=&#x27;center&#x27;&gt;部门列表&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;table border=&#x27;1px&#x27; align=&#x27;center&#x27; width=&#x27;50%&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;			&lt;tr&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;序号&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;部门编号&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;部门名称&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;				&lt;th&gt;操作&lt;/th&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;			&lt;/tr&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">/*上面一部分是死的*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，查询所有的部门</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 获取预编译的数据库操作对象</span></span><br><span class="line">            String sql = <span class="string">&quot;select deptno as a,dname,loc from dept&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                String deptno = rs.getString(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;			&lt;tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+(++i)+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+deptno+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>+dname+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;javascript:void(0)&#x27; onclick=&#x27;del(&quot;</span>+deptno+<span class="string">&quot;)&#x27;&gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/edit?deptno=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;					&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/detail?fdsafdsas=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;				&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;			&lt;/tr&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*下面一部分是死的*/</span></span><br><span class="line">        out.print(<span class="string">&quot;		&lt;/table&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/add.html&#x27;&gt;新增部门&lt;/a&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取部门的信息</span></span><br><span class="line">        <span class="comment">// 注意乱码问题（Tomcat10不会出现这个问题）</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        String dname = request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        String loc = request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库执行insert语句</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;insert into dept(deptno, dname, loc) values(?,?,?)&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            ps.setString(<span class="number">2</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">3</span>, loc);</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 保存成功跳转到列表页面</span></span><br><span class="line">            <span class="comment">// 转发是一次请求。</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里最好使用重定向（浏览器会发一次全新的请求。）</span></span><br><span class="line">            <span class="comment">// 浏览器在地址栏上发送请求，这个请求是get请求。</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 保存失败跳转到错误页面</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里也建议使用重定向。</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doEdit</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取应用的根路径。</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;title&gt;修改部门&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;h1&gt;修改部门&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;form action=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/modify&#x27; method=&#x27;post&#x27;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取部门编号</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接数据库，根据部门编号查询部门的信息。</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;select dname, loc as location from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 这个结果集中只有一条记录。</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String location = rs.getString(<span class="string">&quot;location&quot;</span>); <span class="comment">// 参数&quot;location&quot;是sql语句查询结果列的列名。</span></span><br><span class="line">                <span class="comment">// 输出动态网页。</span></span><br><span class="line">                out.print(<span class="string">&quot;                部门编号&lt;input type=&#x27;text&#x27; name=&#x27;deptno&#x27; value=&#x27;&quot;</span>+deptno+<span class="string">&quot;&#x27; readonly /&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;                部门名称&lt;input type=&#x27;text&#x27; name=&#x27;dname&#x27; value=&#x27;&quot;</span>+dname+<span class="string">&quot;&#x27;/&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;                部门位置&lt;input type=&#x27;text&#x27; name=&#x27;loc&#x27; value=&#x27;&quot;</span>+location+<span class="string">&quot;&#x27;/&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;			&lt;input type=&#x27;submit&#x27; value=&#x27;修改&#x27;/&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;/form&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDetail</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;meta charset=&#x27;utf-8&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;title&gt;部门详情&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;h1&gt;部门详情&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;		&lt;hr &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取部门编号</span></span><br><span class="line">        <span class="comment">// /oa/dept/detail?fdsafdsas=30</span></span><br><span class="line">        <span class="comment">// 虽然是提交的30，但是服务器获取的是&quot;30&quot;这个字符串。</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;fdsafdsas&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数据库，根据部门编号查询部门信息。</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;select dname,loc from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 这个结果集一定只有一条记录。</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;部门编号：&quot;</span>+deptno+<span class="string">&quot; &lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;部门名称：&quot;</span>+dname+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;部门位置：&quot;</span>+loc+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;		&lt;input type=&#x27;button&#x27; value=&#x27;后退&#x27; onclick=&#x27;window.history.back()&#x27;/&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;	&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDel</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据部门编号，删除部门。</span></span><br><span class="line">        <span class="comment">// 获取部门编号</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接数据库删除数据</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            <span class="comment">// 开启事务（自动提交机制关闭）</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql = <span class="string">&quot;delete from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            <span class="comment">// 返回值是：影响了数据库表当中多少条记录。</span></span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">            <span class="comment">// 事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// 遇到异常要回滚</span></span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断删除成功了还是失败了。</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//删除成功</span></span><br><span class="line">            <span class="comment">//仍然跳转到部门列表页面</span></span><br><span class="line">            <span class="comment">//部门列表页面的显示需要执行另一个Servlet。怎么办？转发。</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 删除失败</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doModify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 解决请求体的中文乱码问题。</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取表单中的数据</span></span><br><span class="line">        String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        String dname = request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        String loc = request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接数据库执行更新语句</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DBUtil.getConnection();</span><br><span class="line">            String sql = <span class="string">&quot;update dept set dname = ?, loc = ? where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">2</span>, loc);</span><br><span class="line">            ps.setString(<span class="number">3</span>, deptno);</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 更新成功</span></span><br><span class="line">            <span class="comment">// 跳转到部门列表页面（部门列表页面是通过Java程序动态生成的，所以还需要再次执行另一个Servlet）</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 更新失败</span></span><br><span class="line">            <span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Servlet12-session的实现"><a href="#Servlet12-session的实现" class="headerlink" title="Servlet12  session的实现"></a>Servlet12  session的实现</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ACER</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">5</span>/<span class="number">25</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  $END$</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>session test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/servlet12/test/session&quot;</span>&gt;</span>测试session<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test/session&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSessionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// request和session都是服务器端的java对象。都在JVM当中。</span></span><br><span class="line">        <span class="comment">// request对象代表了一次请求。（一次请求对应一个request对象。两次请求就会对应两个不同的request对象。）</span></span><br><span class="line">        <span class="comment">// session对象代表了一次会话。（一次会话对应一个session对象。）</span></span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        <span class="comment">// 从WEB服务器当中获取session对象，如果session对象没有，则新建。</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向会话域当中绑定数据。</span></span><br><span class="line">        <span class="comment">// session.setAttribute();</span></span><br><span class="line">        <span class="comment">// 从会话域当中取数据。</span></span><br><span class="line">        <span class="comment">// Object obj = session.getAttribute()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将session对象响应到浏览器。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;会话对象：&quot;</span> + session); <span class="comment">// 想看看对象的内存地址。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Servlet13-在Java中使用cookie"><a href="#Servlet13-在Java中使用cookie" class="headerlink" title="Servlet13 在Java中使用cookie"></a>Servlet13 在Java中使用cookie</h2><p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> session=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/cookie/generate&quot;</span>&gt;服务器生成cookie，然后将cookie响应到浏览器，浏览器接受cookie，将cookie放到客户端上&lt;/a&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/sendCookie&quot;</span>&gt;浏览器发送cookie给服务器&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookie/generate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generate</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建Cookie对象</span></span><br><span class="line">		Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;productid&quot;</span>, <span class="string">&quot;12345645623145612&quot;</span>);</span><br><span class="line">		Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置cookie在一小时之后失效。（保存在硬盘文件当中）</span></span><br><span class="line">		<span class="comment">//cookie.setMaxAge(60 * 60);</span></span><br><span class="line">		<span class="comment">// 设置cookie的有效期为0，表示该cookie被删除。主要应用在：使用这种方式删除浏览器上的同名cookie。</span></span><br><span class="line">		<span class="comment">//cookie.setMaxAge(0);</span></span><br><span class="line">		<span class="comment">// 设置cookie的有效期 &lt; 0，表示该cookie不会被存储。（表示不会被存储到硬盘文件中。会放在浏览器运行内存当中。）</span></span><br><span class="line">		cookie.setMaxAge(-<span class="number">1</span>); <span class="comment">// 和不调用sexMaxAge是同一个效果。</span></span><br><span class="line">		cookie2.setMaxAge(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 默认情况下，没有设置path的时候，cookie关联的路径是什么？</span></span><br><span class="line">		<span class="comment">//cookie.setPath(&quot;/servlet13&quot;);</span></span><br><span class="line">		cookie.setPath(request.getContextPath());</span><br><span class="line">		cookie2.setPath(request.getContextPath());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将cookie响应到浏览器</span></span><br><span class="line">		response.addCookie(cookie);</span><br><span class="line">		response.addCookie(cookie2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sendCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 通过java程序怎么接收到浏览器发送过来的cookie呢？</span></span><br><span class="line">		<span class="comment">// 当然通过request对象了。（返回值是一个数组，因为浏览器可能会提交多个cookie给服务器。）</span></span><br><span class="line">		<span class="comment">// 注意细节：这个方法可能会返回null。如果浏览器没有提交cookie，这个方法返回值是null，并不是返回一个长度为0的数组。</span></span><br><span class="line">		Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果不是null，表示一定有cookie</span></span><br><span class="line">		<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 遍历数组</span></span><br><span class="line">			<span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">				<span class="comment">// 获取cookie的name和value</span></span><br><span class="line">				String name = cookie.getName();</span><br><span class="line">				String value = cookie.getValue();</span><br><span class="line">				System.out.println(name + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--HTML的注释，这个注释不专业，仍然会被翻译到java源代码当中。在JSP中不要使用这种注释--&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--JSP专业注释，这个注释信息不会被翻译到java源代码当中。建议使用这种注释方式。--%&gt;</span><br><span class="line">&lt;%--报错原因：在service方法当中定义的变量不能使用<span class="keyword">private</span>等访问权限修饰符修饰。--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--方法体当中，不能直接编写静态代码块，不能直接编写方法，方法套方法是不允许的。--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--错误原因：方法体当中的代码每一行都是一个java语句，java语句要以分号结尾。--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">--%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">fdsal;jfkdlsjaklfdsa</span><br><span class="line">fdjskaljfkdlsajklfdjsa</span><br><span class="line">fdjskalfjkldsjakfldsjaklfds</span><br><span class="line">html</span><br><span class="line">css</span><br><span class="line">javascript</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(f);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">&lt;%!</span><br><span class="line">    System.out.println(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;jackson&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1 method execute!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> f = <span class="number">11</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ACER</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">5</span>/<span class="number">24</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">28</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="oa3-Servlet和JSP改造oa项目"><a href="#oa3-Servlet和JSP改造oa项目" class="headerlink" title="oa3 Servlet和JSP改造oa项目"></a>oa3 Servlet和JSP改造oa项目</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220526133212305.png" class="" title="image-20220526133212305">

<h3 id="index-jsp（欢迎页）"><a href="#index-jsp（欢迎页）" class="headerlink" title="index.jsp（欢迎页）"></a>index.jsp（欢迎页）</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;欢迎使用oa系统&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">        &lt;!--前端超链接发送请求的时候，请求路径以“/”开始，并且要带着项目名--&gt;</span><br><span class="line">		&lt;%--&lt;a href=<span class="string">&quot;/oa/list.jsp&quot;</span>&gt;查看部门列表&lt;/a&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--注意空格问题--%&gt;</span><br><span class="line">		&lt;a href=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/dept/list&quot;</span>&gt;查看部门列表&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--调用哪个对象的哪个方法，可以动态的获取一个应用的根路径。--%&gt;</span><br><span class="line">		&lt;%--&lt;%= request.getContextPath()%&gt;--%&gt;  &lt;%-- out.print(request.getContextPath());--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;%--&lt;h1&gt;用户登录&lt;/h1&gt;</span><br><span class="line">	&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			username&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			password&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">		&lt;/form&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="bean-Dept"><a href="#bean-Dept" class="headerlink" title="bean-Dept"></a>bean-Dept</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String deptno;</span><br><span class="line">	<span class="keyword">private</span> String dname;</span><br><span class="line">	<span class="keyword">private</span> String loc;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptno;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(String deptno)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dname = dname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> loc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.loc = loc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Dept dept = (Dept) o;</span><br><span class="line">		<span class="keyword">return</span> Objects.equals(deptno, dept.deptno) &amp;&amp; Objects.equals(dname, dept.dname) &amp;&amp; Objects.equals(loc, dept.loc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Objects.hash(deptno, dname, loc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;deptno=&#x27;&quot;</span> + deptno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, dname=&#x27;&quot;</span> + dname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, loc=&#x27;&quot;</span> + loc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="list-jsp-围绕list开展的业务"><a href="#list-jsp-围绕list开展的业务" class="headerlink" title="list.jsp(围绕list开展的业务)"></a>list.jsp(围绕list开展的业务)</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;欢迎使用oa系统&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">        &lt;!--前端超链接发送请求的时候，请求路径以“/”开始，并且要带着项目名--&gt;</span><br><span class="line">		&lt;%--&lt;a href=<span class="string">&quot;/oa/list.jsp&quot;</span>&gt;查看部门列表&lt;/a&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--注意空格问题--%&gt;</span><br><span class="line">		&lt;a href=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/dept/list&quot;</span>&gt;查看部门列表&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--调用哪个对象的哪个方法，可以动态的获取一个应用的根路径。--%&gt;</span><br><span class="line">		&lt;%--&lt;%= request.getContextPath()%&gt;--%&gt;  &lt;%-- out.print(request.getContextPath());--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;%--&lt;h1&gt;用户登录&lt;/h1&gt;</span><br><span class="line">	&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			username&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			password&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">		&lt;/form&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DeptServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.webaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.bean.Dept;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&#123;&quot;/dept/list&quot;,&quot;/dept/detail&quot;,&quot;/dept/delete&quot;,&quot;/dept/save&quot;,&quot;/dept/modify&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String servletPath = request.getServletPath();</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;/dept/list&quot;</span>.equals(servletPath)) &#123;</span><br><span class="line">			doList(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/detail&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">			doDetail(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/delete&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">			doDel(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/save&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">			doSave(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/dept/modify&quot;</span>.equals((servletPath)))&#123;</span><br><span class="line">			doModify(request,response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doModify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 解决请求体的中文乱码问题。</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取表单中的数据</span></span><br><span class="line">		String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">		String dname = request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">		String loc = request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line">		<span class="comment">// 连接数据库执行更新语句</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn = DBUtil.getConnection();</span><br><span class="line">			String sql = <span class="string">&quot;update dept set dname = ?, loc = ? where deptno = ?&quot;</span>;</span><br><span class="line">			ps = conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>, dname);</span><br><span class="line">			ps.setString(<span class="number">2</span>, loc);</span><br><span class="line">			ps.setString(<span class="number">3</span>, deptno);</span><br><span class="line">			count = ps.executeUpdate();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 更新成功</span></span><br><span class="line">			<span class="comment">// 跳转到部门列表页面（部门列表页面是通过Java程序动态生成的，所以还需要再次执行另一个Servlet）</span></span><br><span class="line">			<span class="comment">//request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span></span><br><span class="line"></span><br><span class="line">			response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 更新失败</span></span><br><span class="line">			<span class="comment">//request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span></span><br><span class="line">			response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error.html&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 获取部门的信息</span></span><br><span class="line">		<span class="comment">// 注意乱码问题（Tomcat10不会出现这个问题）</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">		String dname = request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">		String loc = request.getParameter(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 连接数据库执行insert语句</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn = DBUtil.getConnection();</span><br><span class="line">			String sql = <span class="string">&quot;insert into dept(deptno, dname, loc) values(?,?,?)&quot;</span>;</span><br><span class="line">			ps = conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">			ps.setString(<span class="number">2</span>, dname);</span><br><span class="line">			ps.setString(<span class="number">3</span>, loc);</span><br><span class="line">			count = ps.executeUpdate();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			DBUtil.close(conn, ps, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">			response.sendRedirect(request.getContextPath() + <span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDel</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取部门编号</span></span><br><span class="line">		String deptno = request.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">		Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn=DBUtil.getConnection();</span><br><span class="line">			String sql=<span class="string">&quot;delete from dept where deptno =?&quot;</span>;</span><br><span class="line">			ps=conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>,deptno);</span><br><span class="line">			count=ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			DBUtil.close(conn,ps,<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(count==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">//重定向到列表页面</span></span><br><span class="line">			String contextPath = request.getContextPath();</span><br><span class="line">			response.sendRedirect(contextPath+<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDetail</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取部门编号</span></span><br><span class="line">		String dno = request.getParameter(<span class="string">&quot;dno&quot;</span>);</span><br><span class="line">		<span class="comment">//根据部门编号获取部门信息，将部门信息封装成咖啡豆</span></span><br><span class="line">		Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">		Dept dept=<span class="keyword">new</span> Dept();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn=DBUtil.getConnection();</span><br><span class="line">			String sql=<span class="string">&quot;select dname,loc from dept where deptno=?&quot;</span>;</span><br><span class="line">			ps=conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>,dno);</span><br><span class="line">			rs= ps.executeQuery();</span><br><span class="line">			<span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">				String dname=rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">				String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line">				<span class="comment">//封装对象(创建豆子)</span></span><br><span class="line">				dept.setDeptno(dno);</span><br><span class="line">				dept.setDname(dname);</span><br><span class="line">				dept.setLoc(loc);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			DBUtil.close(conn,ps,rs);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//这个豆子只有一个，所有不需要袋子，只需要将这个咖啡豆放到request域当中即可</span></span><br><span class="line">		request.setAttribute(<span class="string">&quot;dept&quot;</span>,dept);</span><br><span class="line">		<span class="comment">//转发(不是重定向，因为要跳转到JSP做数据演示)</span></span><br><span class="line">		<span class="comment">//request.getRequestDispatcher(&quot;/detail.jsp&quot;).forward(request,response);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*	String f=request.getParameter(&quot;f&quot;);</span></span><br><span class="line"><span class="comment">		if(&quot;m&quot;.equals(f))&#123;</span></span><br><span class="line"><span class="comment">			//转发到修改页面</span></span><br><span class="line"><span class="comment">			request.getRequestDispatcher(&quot;/edit.jsp&quot;).forward(request,response);</span></span><br><span class="line"><span class="comment">		&#125;else if(&quot;d&quot;.equals(f))&#123;</span></span><br><span class="line"><span class="comment">			request.getRequestDispatcher(&quot;/detail.jsp&quot;).forward(request,response);</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line"></span><br><span class="line">		request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>+request.getParameter(<span class="string">&quot;f&quot;</span>)+<span class="string">&quot;.jsp&quot;</span>).forward(request,response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doList</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 准备一个容器，用来专门存储部门</span></span><br><span class="line">		List&lt;Dept&gt; depts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 连接数据库，查询所有的部门信息</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 获取连接</span></span><br><span class="line">			conn = DBUtil.getConnection();</span><br><span class="line">			<span class="comment">// 执行查询语句</span></span><br><span class="line">			String sql = <span class="string">&quot;select deptno,dname,loc from dept&quot;</span>;</span><br><span class="line">			ps = conn.prepareStatement(sql);</span><br><span class="line">			rs = ps.executeQuery();</span><br><span class="line">			<span class="comment">// 遍历结果集</span></span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">				<span class="comment">// 从结果集中取出。</span></span><br><span class="line">				String deptno = rs.getString(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">				String dname = rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">				String loc = rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 将以上的零散的数据封装成java对象。</span></span><br><span class="line">				Dept dept = <span class="keyword">new</span> Dept();</span><br><span class="line">				dept.setDeptno(deptno);</span><br><span class="line">				dept.setDname(dname);</span><br><span class="line">				dept.setLoc(loc);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 将部门对象放到list集合当中</span></span><br><span class="line">				depts.add(dept);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 释放资源</span></span><br><span class="line">			DBUtil.close(conn, ps, rs);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将一个集合放到请求域当中</span></span><br><span class="line">		request.setAttribute(<span class="string">&quot;deptList&quot;</span>, depts);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 转发（不要重定向）</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">&quot;/list.jsp&quot;</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="add-jsp"><a href="#add-jsp" class="headerlink" title="add.jsp"></a>add.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;新增部门&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;h1&gt;新增部门&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/dept/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			部门编号&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;deptno&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			部门名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;dname&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">			部门位置&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;loc&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="detail-jsp"><a href="#detail-jsp" class="headerlink" title="detail.jsp"></a>detail.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.oa.bean.Dept&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">	<span class="comment">//从request域中取出数据</span></span><br><span class="line">	Dept d = (Dept) request.getAttribute(<span class="string">&quot;dept&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;部门详情&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;h1&gt;部门详情&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		部门编号:&lt;%= d.getDeptno()%&gt; &lt;br&gt;</span><br><span class="line">		部门名称:&lt;%= d.getDname()%&gt; &lt;br&gt;</span><br><span class="line">		部门位置:&lt;%= d.getLoc()%&gt; &lt;br&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;后退&quot;</span> onclick=<span class="string">&quot;window.history.back()&quot;</span>/&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="edit-jsp"><a href="#edit-jsp" class="headerlink" title="edit.jsp"></a>edit.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.oa.bean.Dept&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">	 Dept d = (Dept) request.getAttribute(<span class="string">&quot;dept&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;修改部门&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;h1&gt;修改部门&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/dept/modify&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			部门编号&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;deptno&quot;</span> value=<span class="string">&quot;&lt;%=d.getDeptno()%&gt;&quot;</span> readonly/&gt;&lt;br&gt;</span><br><span class="line">			部门名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;&lt;%=d.getDname()%&gt;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">			部门位置&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;loc&quot;</span> value=<span class="string">&quot;&lt;%=d.getLoc()%&gt;&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220528163512416.png" class="" title="image-20220528163512416">

<h3 id="存取的基本使用"><a href="#存取的基本使用" class="headerlink" title="存取的基本使用"></a>存取的基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njpowernode.javaweb.jsp.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 符合javabean规范的一个java类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress222</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return &quot;User&#123;&quot; +</span></span><br><span class="line"><span class="comment">                &quot;username=&#x27;&quot; + username + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">                &quot;, password=&#x27;&quot; + password + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getUsername()方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getPassword()方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者getage()</span></span><br><span class="line">    <span class="comment">// java程序员给方法起名的时候，建议驼峰。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge()方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法只是一个get方法而已。类中并没有声明email属性。</span></span><br><span class="line"><span class="comment">     * 使用EL表达式可以获取Email吗？</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dujubin@126.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njpowernode.javaweb.jsp.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> String zipcode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String city, String street, String zipcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.street = street;</span><br><span class="line">        <span class="keyword">this</span>.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreet</span><span class="params">(String street)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.street = street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZipcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZipcode</span><span class="params">(String zipcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.Address&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建User对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;jackson&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建地址Address对象</span></span><br><span class="line">    Address a = <span class="keyword">new</span> Address();</span><br><span class="line">    a.setCity(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    a.setStreet(<span class="string">&quot;大兴区&quot;</span>);</span><br><span class="line">    a.setZipcode(<span class="string">&quot;11111111&quot;</span>);</span><br><span class="line"></span><br><span class="line">    user.setAddress(a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将User对象存储到request域当中</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;userObj&quot;</span>, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式，从request域当中，取出User对象，并将其输出到浏览器--%&gt;</span><br><span class="line">&lt;%--<span class="number">1.</span> EL表达式会自动从某个范围中取数据。<span class="number">2.</span> 将其转成字符串。 <span class="number">3.</span> 将其输出到浏览器。--%&gt;</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--你想输出的是user对象的username属性--%&gt;</span><br><span class="line">$&#123;userObj.username&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--输出password--%&gt;</span><br><span class="line">$&#123;userObj.password&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--输出年龄age--%&gt;</span><br><span class="line">$&#123;userObj.age&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--输出email--%&gt;</span><br><span class="line">$&#123;userObj.email&#125;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--在EL表达式中不能添加双引号，如果添加了双引号，EL表达式就会将其当做普通的字符串输出到浏览器。--%&gt;</span><br><span class="line">$&#123;<span class="string">&quot;userObj&quot;</span>&#125;</span><br><span class="line">userObj</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%--取出User对象是哪个城市的？--%&gt;</span><br><span class="line">城市:$&#123;userObj.address222.city&#125;</span><br><span class="line">街道：$&#123;userObj.address222.street&#125;</span><br><span class="line">邮编：$&#123;userObj.address222.zipcode&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4个隐含的隐式的范围对象"><a href="#4个隐含的隐式的范围对象" class="headerlink" title="4个隐含的隐式的范围对象"></a>4个隐含的隐式的范围对象</h3><p>8.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 四个域都存储了数据，并且name相同。</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;session&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;application&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在没有指定范围的前提下，EL表达式优先从小范围中取数据--%&gt;</span><br><span class="line">&lt;%--pageContext &lt; request &lt; session &lt; application --%&gt;</span><br><span class="line">$&#123;data&#125;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%-- 在EL表达式中可以指定范围来读取数据--%&gt;</span><br><span class="line">&lt;%--EL表达式有<span class="number">4</span>个隐含的隐式的范围对象--%&gt;</span><br><span class="line">&lt;%--pageScope requestScope sessionScope applicationScope--%&gt;</span><br><span class="line">&lt;%--以下是指定范围取数据。--%&gt;</span><br><span class="line">$&#123;pageScope.data&#125;&lt;br&gt;</span><br><span class="line">$&#123;requestScope.data&#125;&lt;br&gt;</span><br><span class="line">$&#123;sessionScope.data&#125;&lt;br&gt;</span><br><span class="line">$&#123;applicationScope.data&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--在实际开发中，因为向某个域中存储数据的时候，name都是不同的。所以 xxxScope  都是可以省略的。--%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="EL表达式对null的处理"><a href="#EL表达式对null的处理" class="headerlink" title="EL表达式对null的处理"></a>EL表达式对null的处理</h3><p>9.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出数据并且输出到浏览器--%&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">&quot;username&quot;</span>)%&gt;</span><br><span class="line">采用EL表达式：$&#123;username&#125;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=request.getAttribute(<span class="string">&quot;usernam&quot;</span>)%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--EL表达式主要任务是做页面展示，要求最终页面展示上是友好的。--%&gt;</span><br><span class="line">&lt;%--所以EL表达式对<span class="keyword">null</span>进行了处理。如果是<span class="keyword">null</span>，则在浏览器上显示空白。--%&gt;</span><br><span class="line">采用EL表达式：$&#123;usernam&#125;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--EL表达式表面上是这种写法，实际上运行的时候，还是要翻译生成java代码的。--%&gt;</span><br><span class="line">$&#123;usernam&#125; 这个EL表达式等同于这一段java代码：&lt;%=request.getAttribute(<span class="string">&quot;usernam&quot;</span>) == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : request.getAttribute(<span class="string">&quot;usernam&quot;</span>)%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="EL表达式取数据的时候有两种形式"><a href="#EL表达式取数据的时候有两种形式" class="headerlink" title="EL表达式取数据的时候有两种形式"></a>EL表达式取数据的时候有两种形式</h3><p>10.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.User&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建user对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储到request域当中。</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;fdsafdsafdsa&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向request域当中存储数据。</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;abc.def&quot;</span>, <span class="string">&quot;hello jsp el!!!&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取出，并且输出到浏览器--%&gt;</span><br><span class="line">&lt;%--从域当中取user--%&gt;</span><br><span class="line">$&#123;fdsafdsafdsa&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取user的username--%&gt;</span><br><span class="line">&lt;%----%&gt;</span><br><span class="line">$&#123;fdsafdsafdsa.username&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取user的username，注意[]当中的需要添加 双引号--%&gt;</span><br><span class="line">&lt;%--[] 里面的没有加双引号的话，会将其看做变量。如果是带双引号 <span class="string">&quot;username&quot;</span>，则去找user对象的username属性。--%&gt;</span><br><span class="line">$&#123;fdsafdsafdsa[<span class="string">&quot;username&quot;</span>]&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--将数据取出并输出到浏览器--%&gt;</span><br><span class="line">$&#123;requestScope.abc.def&#125;</span><br><span class="line">之前是空白滴：</span><br><span class="line">&lt;%--防止识别成变量--%&gt;</span><br><span class="line">$&#123;requestScope[<span class="string">&quot;abc.def&quot;</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="从Map中取数据"><a href="#从Map中取数据" class="headerlink" title="从Map中取数据"></a>从Map中取数据</h3><p>11.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset-UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;userMap&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,User&gt; userMap2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    userMap2.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;fdsafdsa&quot;</span>, userMap2);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用EL表达式将Map集合中的user对象中的username取出--%&gt;</span><br><span class="line">$&#123;fdsafdsa.user.username&#125;</span><br><span class="line"></span><br><span class="line">$&#123;userMap.username&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">$&#123;userMap.password&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">$&#123;userMap[<span class="string">&quot;username&quot;</span>]&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">$&#123;userMap[<span class="string">&quot;password&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从数组和list集合中以及set集合中取数据"><a href="#从数组和list集合中以及set集合中取数据" class="headerlink" title="从数组和list集合中以及set集合中取数据"></a>从数组和list集合中以及set集合中取数据</h3><p>12.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Set&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.User&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 数组对象</span></span><br><span class="line">    String[] usernames = &#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向域中存储数组</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;nameArray&quot;</span>, usernames);</span><br><span class="line"></span><br><span class="line">    User u1 = <span class="keyword">new</span> User();</span><br><span class="line">    u1.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User u2 = <span class="keyword">new</span> User();</span><br><span class="line">    u2.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User[] users = &#123;u1, u2&#125;;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;userArray&quot;</span>, users);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;myList&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;set&quot;</span>, set);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出set集合--%&gt;</span><br><span class="line">set集合：$&#123;set&#125;</span><br><span class="line">&lt;%--无法获取：PropertyNotFoundException: 类型[java.util.HashSet]上找不到属性[<span class="number">0</span>]--%&gt;</span><br><span class="line">&lt;%--$&#123;set[<span class="number">0</span>]&#125;--%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出List集合--%&gt;</span><br><span class="line">&lt;%--list集合也是通过下标的方式取数据的。--%&gt;</span><br><span class="line">$&#123;myList&#125;</span><br><span class="line">$&#123;myList[<span class="number">0</span>]&#125;</span><br><span class="line">$&#123;myList[<span class="number">1</span>]&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出数组中第二个用户的用户名--%&gt;</span><br><span class="line">$&#123;userArray[<span class="number">1</span>].username&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取出数组中的元素--%&gt;</span><br><span class="line">$&#123;nameArray&#125; &lt;%--将数组对象直接输出--%&gt;</span><br><span class="line">$&#123;nameArray[<span class="number">0</span>]&#125; &lt;%--取出数组中的第一个元素--%&gt;</span><br><span class="line">$&#123;nameArray[<span class="number">1</span>]&#125;</span><br><span class="line">$&#123;nameArray[<span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line">&lt;%--取不出数据，在浏览器上直接显示的就是空白。不会出现数组下表越界。--%&gt;</span><br><span class="line">$&#123;nameArray[<span class="number">100</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="EL表达式的忽略"><a href="#EL表达式的忽略" class="headerlink" title="EL表达式的忽略"></a>EL表达式的忽略</h3><p>13.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;--%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%--&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> isELIgnored=<span class="string">&quot;true&quot;</span> %&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- isELIgnored=<span class="string">&quot;true&quot;</span> 表示忽略JSP中整个页面的所有EL表达式。如果想忽略其中某个，可以使用以下反斜杠。 --%&gt;</span><br><span class="line">\$&#123;username&#125;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">$&#123;username&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EL表达式获取应用的根"><a href="#EL表达式获取应用的根" class="headerlink" title="EL表达式获取应用的根"></a>EL表达式获取应用的根</h3><p>14.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;jakarta.servlet.http.HttpServletRequest&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="comment">// JSP有九大内置对象</span></span><br><span class="line"><span class="comment">// pageContext,request,session,application,response,out,config,page,exception</span></span><br><span class="line"><span class="comment">// 其中四个域对象，其中最小的域是pageContext</span></span><br><span class="line"><span class="comment">// pageContext翻译为：页面上下文。通过pageContext可以获取？？？？</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--从以下代码来看，pageContext.getRequest() 方法是没用的。这是获取request对象。而JSP中自带了内置对象request，直接用request内置对象就行了。--%&gt;</span><br><span class="line">&lt;%=pageContext.getRequest() %&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%=request %&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    在EL表达式当中没有request这个隐式对象。</span><br><span class="line">    requestScope 这个只代表“请求范围”。不等同于request对象。</span><br><span class="line">    在EL表达式当中有一个隐式的对象：pageContext</span><br><span class="line">    EL表达式中的pageContext和JSP中的九大内置对象pageContext是同一个对象。</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%--&lt;%=pageContext.getRequest() %&gt;--%&gt;</span><br><span class="line">&lt;%=((HttpServletRequest)pageContext.getRequest()).getContextPath() %&gt;</span><br><span class="line">这段java代码对应的EL表达式：</span><br><span class="line">使用EL表达式来获取应用的根路径：</span><br><span class="line">$&#123;pageContext.request.contextPath&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="EL表达式中其他的隐式对象"><a href="#EL表达式中其他的隐式对象" class="headerlink" title="EL表达式中其他的隐式对象"></a>EL表达式中其他的隐式对象</h3><p>15.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--JSP中EL表达式的隐含对象：</span><br><span class="line">    <span class="number">1.</span> pageContext</span><br><span class="line">    <span class="number">2.</span> param</span><br><span class="line">    <span class="number">3.</span> paramValues</span><br><span class="line">    <span class="number">4.</span> initParam</span><br><span class="line">    <span class="number">5.</span> 其他（不是重点）</span><br><span class="line">--%&gt;</span><br><span class="line">应用的根路径：$&#123;pageContext.request.contextPath&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--request是JSP九大内置对象之一。--%&gt;</span><br><span class="line">&lt;%--request.getParameter(<span class="string">&quot;username&quot;</span>) 获取请求的参数。--%&gt;</span><br><span class="line">&lt;%--用户在浏览器上提交数据：http:<span class="comment">//localhost:8080/jsp/15.jsp?username=lisi --%&gt;</span></span><br><span class="line">用户名：&lt;%=request.getParameter(<span class="string">&quot;username&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line">用户名:$&#123;param.username&#125;</span><br><span class="line"></span><br><span class="line">&lt;%--假设用户提交的数据：http:<span class="comment">//localhost:8080/jsp/15.jsp?aihao=smoke&amp;aihao=drink&amp;aihao=tangtou--%&gt;</span></span><br><span class="line">&lt;%--以上提交的数据显然是采用checkbox进行提交的。同一组的checkbox的name是一样的。--%&gt;</span><br><span class="line">&lt;%--param 获取的是请求参数一维数组当中的第一个元素。--%&gt;</span><br><span class="line">爱好：$&#123;param.aihao&#125; &lt;br&gt;</span><br><span class="line">爱好：&lt;%=request.getParameter(<span class="string">&quot;aihao&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">一维数组：$&#123;paramValues.aihao&#125;&lt;br&gt;</span><br><span class="line">一维数组：&lt;%=request.getParameterValues(<span class="string">&quot;aihao&quot;</span>)%&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--获取数组当中的元素：[下标]--%&gt;</span><br><span class="line">爱好：$&#123;paramValues.aihao[<span class="number">0</span>]&#125;、$&#123;paramValues.aihao[<span class="number">1</span>]&#125;、$&#123;paramValues.aihao[<span class="number">2</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--EL表达式中的隐含对象：initParam--%&gt;</span><br><span class="line">&lt;%--ServletContext是Servlet上下文对象，对应的JSP九大内置对象之一是：application --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String a = application.getInitParameter(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line">    String b = application.getInitParameter(<span class="string">&quot;pageNum&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">每页显示的记录条数：&lt;%=a%&gt; &lt;br&gt;</span><br><span class="line">页码：&lt;%=b%&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每页显示的记录条数：&lt;%=application.getInitParameter(<span class="string">&quot;pageSize&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line">页码：&lt;%=application.getInitParameter(<span class="string">&quot;pageNum&quot;</span>)%&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">每页显示的记录条数：$&#123;initParam.pageSize&#125; &lt;br&gt;</span><br><span class="line">页码：$&#123;initParam.pageNum&#125; &lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="EL表达式的运算符"><a href="#EL表达式的运算符" class="headerlink" title="EL表达式的运算符"></a>EL表达式的运算符</h3><p>16.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.javaweb.jsp.bean.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    关于EL表达式中的运算符</span><br><span class="line">        <span class="number">1.</span> 算术运算符</span><br><span class="line">            + - * / %</span><br><span class="line">        <span class="number">2.</span> 关系运算符</span><br><span class="line">            == != &gt; &gt;= &lt; &lt;= eq</span><br><span class="line">        <span class="number">3.</span> 逻辑运算符</span><br><span class="line">            ! &amp;&amp; || not and or （注意：!和not都是取反）</span><br><span class="line">        <span class="number">4.</span> 条件运算符</span><br><span class="line">            ? :</span><br><span class="line">        <span class="number">5.</span> 取值运算符：</span><br><span class="line">            [] 和 .</span><br><span class="line">        <span class="number">6.</span> empty 运算符</span><br><span class="line">--%&gt;</span><br><span class="line">$&#123;<span class="number">10</span> + <span class="number">20</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 在EL表达式当中“+”运算符只能做求和运算。不会进行字符串拼接操作。 --%&gt;</span><br><span class="line">&lt;%--<span class="string">&quot;20&quot;</span>会被自动转换成数字<span class="number">20</span>--%&gt;</span><br><span class="line">$&#123;<span class="number">10</span> + <span class="string">&quot;20&quot;</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- java.lang.NumberFormatException: For input string: <span class="string">&quot;abc&quot;</span> --%&gt;</span><br><span class="line">&lt;%-- + 两边不是数字的时候，一定会转成数字。转不成数字就报错：NumberFormatException--%&gt;</span><br><span class="line">\$&#123;<span class="number">10</span> + <span class="string">&quot;abc&quot;</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">\$&#123;<span class="string">&quot;king&quot;</span> + <span class="string">&quot;soft&quot;</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 关系运算符 --%&gt;</span><br><span class="line">$&#123;<span class="string">&quot;abc&quot;</span> == <span class="string">&quot;abc&quot;</span>&#125; &lt;br&gt;</span><br><span class="line">$&#123;<span class="string">&quot;abc&quot;</span>&#125; == $&#123;<span class="string">&quot;abc&quot;</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k1&quot;</span>, obj);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;k2&quot;</span>, obj);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;k1 == k2&#125; &lt;br&gt; &lt;%--<span class="keyword">true</span>--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String s1 = <span class="keyword">new</span> String(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">    String s2 = <span class="keyword">new</span> String(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;a&quot;</span>, s1);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;b&quot;</span>, s2);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;a == b&#125; &lt;%--<span class="keyword">true</span>--%&gt; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">    request.setAttribute(<span class="string">&quot;o1&quot;</span>, o1);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;o2&quot;</span>, o2);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;o1 == o2&#125; &lt;br&gt; &lt;%--<span class="keyword">false</span>--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="string">&quot;110&quot;</span>, <span class="string">&quot;警察&quot;</span>);</span><br><span class="line">    Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;110&quot;</span>, <span class="string">&quot;警察&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;stu1&quot;</span>, stu1);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;stu2&quot;</span>, stu2);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--EL表达式当中的 <span class="string">&quot;==&quot;</span> 调用了equals方法。--%&gt;</span><br><span class="line">\$&#123;stu1 == stu2&#125; &lt;br&gt;</span><br><span class="line">\$&#123;stu1 eq stu2&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%-- != 也会调用对象的equals方法。--%&gt;</span><br><span class="line">$&#123;stu1 != stu2&#125; &lt;br&gt;</span><br><span class="line">$&#123;<span class="number">200</span> != <span class="number">200</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--以下语法错误，没有加小括号--%&gt;</span><br><span class="line">\$&#123;!stu1 eq stu2&#125; &lt;br&gt;</span><br><span class="line">&lt;%--正确的--%&gt;</span><br><span class="line">$&#123;!(stu1 eq stu2)&#125;&lt;br&gt;</span><br><span class="line">$&#123;not(stu1 eq stu2)&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--条件运算符--%&gt;</span><br><span class="line">$&#123;empty param.username ? <span class="string">&quot;对不起，用户名不能为空！&quot;</span> : <span class="string">&quot;欢迎访问！！！！&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--empty运算符：运算结果是<span class="keyword">boolean</span>类型。--%&gt;</span><br><span class="line">&lt;%--判断是否为空，如果为空，结果是<span class="keyword">true</span>。如果不为空，结果是<span class="keyword">false</span>--%&gt;</span><br><span class="line">$&#123;empty param.username&#125; &lt;br&gt;</span><br><span class="line">$&#123;!empty param.username&#125; &lt;br&gt;</span><br><span class="line">$&#123;not empty param.username&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--结果<span class="keyword">false</span>--%&gt;</span><br><span class="line">&lt;%--前半部分是<span class="keyword">boolean</span>类型。后面是<span class="keyword">null</span>--%&gt;</span><br><span class="line">$&#123;empty param.password == <span class="keyword">null</span>&#125; &lt;br&gt;</span><br><span class="line">$&#123;(empty param.password) == <span class="keyword">null</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">$&#123;param.password == <span class="keyword">null</span>&#125; &lt;br&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><h3 id="代替jsp中的java代码"><a href="#代替jsp中的java代码" class="headerlink" title="代替jsp中的java代码"></a>代替jsp中的java代码</h3><p>17.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--引入标签库。这里引入的是jstl的核心标签库。--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--格式化标签库，专门负责格式化操作的。--%&gt;</span><br><span class="line">&lt;%--&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span>%&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--sql标签库--%&gt;</span><br><span class="line">&lt;%--&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;sql&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建List集合</span></span><br><span class="line">    List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Student对象</span></span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;110&quot;</span>, <span class="string">&quot;经常&quot;</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;120&quot;</span>, <span class="string">&quot;救护车&quot;</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;119&quot;</span>, <span class="string">&quot;消防车&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到List集合中</span></span><br><span class="line">    stuList.add(s1);</span><br><span class="line">    stuList.add(s2);</span><br><span class="line">    stuList.add(s3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将list集合存储到request域当中</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;stuList&quot;</span>, stuList);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--需求：将List集合中的元素遍历。输出学生信息到浏览器--%&gt;</span><br><span class="line">&lt;%--使用java代码--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 从域中获取List集合</span></span><br><span class="line">    List&lt;Student&gt; stus = (List&lt;Student&gt;)request.getAttribute(<span class="string">&quot;stuList&quot;</span>);</span><br><span class="line">    <span class="comment">// 编写for循环遍历list集合</span></span><br><span class="line">    <span class="keyword">for</span>(Student stu : stus)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">id:&lt;%=stu.getId()%&gt;,name:&lt;%=stu.getName()%&gt;&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用core标签库中forEach标签。对List集合进行遍历--%&gt;</span><br><span class="line">&lt;%--EL表达式只能从域中取数据。--%&gt;</span><br><span class="line">&lt;%--<span class="keyword">var</span>后面的名字是随意的。<span class="keyword">var</span>属性代表的是集合中的每一个元素。--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;stuList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    id:$&#123;s.id&#125;,name:$&#123;s.name&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>18.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--引入核心标签库--%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--核心标签库中的<span class="keyword">if</span>标签--%&gt;</span><br><span class="line">&lt;%--test属性是必须的。test属性支持EL表达式。test属性值只能是<span class="keyword">boolean</span>类型。--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;用户名不能为空。&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--没有<span class="keyword">else</span>标签的话，可以搞两个<span class="keyword">if</span>出来。--%&gt;</span><br><span class="line">&lt;%--<span class="keyword">if</span>标签还有<span class="keyword">var</span>属性，不是必须的。--%&gt;</span><br><span class="line">&lt;%--<span class="keyword">if</span>标签还有scope属性，用来指定<span class="keyword">var</span>的存储域。也不是必须的。--%&gt;</span><br><span class="line">&lt;%--scope有四个值可选：page(pageContext域)、request(request域)、session(session域)、application(application域)--%&gt;</span><br><span class="line">&lt;%--将<span class="keyword">var</span>中的v存储到request域。--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty param.username&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;v&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;欢迎你$&#123;param.username&#125;。&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--通过EL表达式将request域当中的v取出--%&gt;</span><br><span class="line">&lt;%--v变量中存储的是test属性的值。--%&gt;</span><br><span class="line">$&#123;v&#125;</span><br></pre></td></tr></table></figure>

<h3 id="forEach标签"><a href="#forEach标签" class="headerlink" title="forEach标签"></a>forEach标签</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.javaweb.jsp.bean.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.njpowernode.javaweb.jsp.bean.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="keyword">var</span>用来指定循环中的变量--%&gt;</span><br><span class="line">&lt;%--begin开始--%&gt;</span><br><span class="line">&lt;%--end结束--%&gt;</span><br><span class="line">&lt;%--step步长--%&gt;</span><br><span class="line">&lt;%--底层实际上：会将i存储到pageContext域当中。--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;%--所以这里才会使用EL表达式将其取出，一定是从某个域当中取出的。--%&gt;</span><br><span class="line">    $&#123;i&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建List集合</span></span><br><span class="line">    List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Student对象</span></span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;110&quot;</span>, <span class="string">&quot;经常&quot;</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;120&quot;</span>, <span class="string">&quot;救护车&quot;</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;119&quot;</span>, <span class="string">&quot;消防车&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到List集合中</span></span><br><span class="line">    stuList.add(s1);</span><br><span class="line">    stuList.add(s2);</span><br><span class="line">    stuList.add(s3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将list集合存储到request域当中</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;stuList&quot;</span>, stuList);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%--<span class="keyword">var</span>=<span class="string">&quot;s&quot;</span>这个s代表的是集合中的每个Student对象--%&gt;</span><br><span class="line">&lt;%--varStatus=<span class="string">&quot;这个属性表示var的状态对象，这里是一个java对象，这个java对象代表了var的状态&quot;</span>--%&gt;</span><br><span class="line">&lt;%--varStatus=<span class="string">&quot;这个名字是随意的&quot;</span>--%&gt;</span><br><span class="line">&lt;%--varStatus这个状态对象有count属性。可以直接使用。--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;stuList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;s&quot;</span> varStatus=<span class="string">&quot;stuStatus&quot;</span>&gt;</span><br><span class="line">    &lt;%--varStatus的count值从<span class="number">1</span>开始，以<span class="number">1</span>递增，主要是用于编号/序号。--%&gt;</span><br><span class="line">   编号:$&#123;stuStatus.count&#125;,id:$&#123;s.id&#125;,name:$&#123;s.name&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age&lt;18&#125;&quot;</span>&gt;</span><br><span class="line">        青少年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age&lt;35&#125;&quot;</span>&gt;</span><br><span class="line">        青年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age&lt;55&#125;&quot;</span>&gt;</span><br><span class="line">        中年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        老年</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>

<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="servlet14-过滤器使用及实现原理"><a href="#servlet14-过滤器使用及实现原理" class="headerlink" title="servlet14 过滤器使用及实现原理"></a>servlet14 过滤器使用及实现原理</h2><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.Filter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;url-pattern&gt;/a.do&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;url-pattern&gt;/b.do&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Filter1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*@WebFilter(&quot;/abc&quot;)*/</span></span><br><span class="line"><span class="comment">/*@WebFilter(&quot;/a.do&quot;)*/</span></span><br><span class="line"><span class="comment">/*@WebFilter(&#123;&quot;/a.do&quot;, &quot;/b.do&quot;&#125;)*/</span></span><br><span class="line"><span class="comment">/*以下这个路径属于模糊匹配中的扩展匹配，以星号开始，注意这种路径不要以/开始.*/</span></span><br><span class="line"><span class="comment">/*@WebFilter(&quot;*.do&quot;)*/</span></span><br><span class="line"><span class="comment">/*属于先追匹配。要以/开始*/</span></span><br><span class="line"><span class="comment">/*@WebFilter(&quot;/dept/*&quot;)*/</span></span><br><span class="line"><span class="comment">//匹配所有路径</span></span><br><span class="line"><span class="comment">/*@WebFilter(&quot;/*&quot;)*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter1</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Filter1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;无参数构造方法执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;init方法执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		<span class="comment">//在请求的时候添加过滤规则</span></span><br><span class="line">		System.out.println(<span class="string">&quot;doFilter方法开始执行。&quot;</span>);</span><br><span class="line">		<span class="comment">//执行下一个过滤器，如果下一个不是过滤器了，则执行目标程序Servlet.</span></span><br><span class="line">		<span class="comment">//向下走。没有它不行</span></span><br><span class="line">		chain.doFilter(request,response);</span><br><span class="line">		<span class="comment">//在响应的时候添加过滤规则</span></span><br><span class="line">		System.out.println(<span class="string">&quot;doFilter方法执行结束。&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;destroy方法执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		Filter.<span class="keyword">super</span>.init(filterConfig);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Filter2 doFilter begin&quot;</span>);</span><br><span class="line">		chain.doFilter(request,response);</span><br><span class="line">		System.out.println(<span class="string">&quot;Filter2 doFilter end&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Filter.<span class="keyword">super</span>.destroy();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/a.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;AServlet中的doGet方法执行了。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/b.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;BServlet中的doGet方法执行了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><h2 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h2><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span>MyServletContextListener<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServletContextListener监听器主要监听的是：ServletContext对象的状态。</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 监听器中的方法不需要程序员手动调用。是发生某个特殊事件之后被服务器调用。</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sce</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123; <span class="comment">// 服务器启动时间点，想在这个时候执行一段代码，写就行了。</span></span><br><span class="line">		<span class="comment">// 现在这个特殊的时刻写代码，你写就是了。它会被服务器自动调用。</span></span><br><span class="line">		<span class="comment">// 这个方法是在ServletContext对象被创建的时候调用。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;ServletContext对象创建了。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123; <span class="comment">// 服务器关闭时间点。</span></span><br><span class="line">		<span class="comment">// 现在这个特殊的时刻写代码，你写就是了。它会被服务器自动调用。</span></span><br><span class="line">		<span class="comment">// 这个方法是在ServletContext对象被销毁的时候调用。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;ServletContext对象被销毁了。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ServletRequestlistener"><a href="#ServletRequestlistener" class="headerlink" title="ServletRequestlistener"></a>ServletRequestlistener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletRequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line">	<span class="comment">// request对象销毁时间点</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;request对象销毁了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// request对象创建时间点</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;request对象初始化了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h2><p>my.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">my jsp page</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/exit&quot;</span>&gt;退出系统&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ExitServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/exit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 销毁session</span></span><br><span class="line">            session.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpSessionListner</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session被销毁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h2><p>会话域监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionAttributeListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpSessionAttributeListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向session域当中存储数据的时候，以下方法被WEB服务器调用。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session data add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将session域当中存储的数据删除的时候，以下方法被WEB服务器调用。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session data remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// session域当中的某个数据被替换的时候，以下方法被WEB服务器调用。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session data replace&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/session/attribute/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionAttributeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向session域中存储数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="HttpSessionBindingListenerServlet"><a href="#HttpSessionBindingListenerServlet" class="headerlink" title="HttpSessionBindingListenerServlet"></a>HttpSessionBindingListenerServlet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javaweb.bean.User1;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javaweb.bean.User2;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/session/bind&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionBindingListenerServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备两个对象：User1 User2</span></span><br><span class="line">        User1 user1 = <span class="keyword">new</span> User1(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        User2 user2 = <span class="keyword">new</span> User2(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将user1存储到session域</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user1&quot;</span>, user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将user2存储到session域</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user2&quot;</span>, user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>User1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">implements</span> <span class="title">HttpSessionBindingListener</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;绑定数据&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;解绑数据&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> String usecode;</span><br><span class="line">		<span class="keyword">public</span>  String username;</span><br><span class="line">		<span class="keyword">public</span>  String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User1</span><span class="params">(String usecode, String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.usecode = usecode;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsecode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usecode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsecode</span><span class="params">(String usecode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.usecode = usecode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>User2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javaweb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String usecode;</span><br><span class="line">	<span class="keyword">public</span>  String username;</span><br><span class="line">	<span class="keyword">public</span>  String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User2</span><span class="params">(String usecode, String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.usecode = usecode;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsecode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> usecode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsecode</span><span class="params">(String usecode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.usecode = usecode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="oa3"><a href="#oa3" class="headerlink" title="oa3"></a>oa3</h1><h2 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h2><img src="/2022/05/14/Javaweb/servlet-jsp-code/servlet-jsp-code/image-20220603101914238.png" class="" title="image-20220603101914238">

<h2 id="oa"><a href="#oa" class="headerlink" title="oa"></a>oa</h2><h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><h4 id="Dept"><a href="#Dept" class="headerlink" title="Dept"></a>Dept</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String deptno;</span><br><span class="line">	<span class="keyword">private</span> String dname;</span><br><span class="line">	<span class="keyword">private</span> String loc;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptno;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(String deptno)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dname = dname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> loc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.loc = loc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Dept dept = (Dept) o;</span><br><span class="line">		<span class="keyword">return</span> Objects.equals(deptno, dept.deptno) &amp;&amp; Objects.equals(dname, dept.dname) &amp;&amp; Objects.equals(loc, dept.loc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Objects.hash(deptno, dname, loc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Dept&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;deptno=&#x27;&quot;</span> + deptno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, dname=&#x27;&quot;</span> + dname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, loc=&#x27;&quot;</span> + loc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="User"><a href="#User" class="headerlink" title="User"></a>User</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">HttpSessionBindingListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//用户登陆了</span></span><br><span class="line">		<span class="comment">//User类型的对象向session中存放了</span></span><br><span class="line">		<span class="comment">//获取ServletContext对象</span></span><br><span class="line">		ServletContext application = event.getSession().getServletContext();</span><br><span class="line">		<span class="comment">//获取在线人数</span></span><br><span class="line">		Object onclinecount = application.getAttribute(<span class="string">&quot;onclinecount&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(onclinecount==<span class="keyword">null</span>)&#123;</span><br><span class="line">			application.setAttribute(<span class="string">&quot;onclinecount&quot;</span>,<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> count=(Integer)onclinecount;</span><br><span class="line">			count++;</span><br><span class="line">			application.setAttribute(<span class="string">&quot;onclinecount&quot;</span>,count);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//用户退出了</span></span><br><span class="line">		<span class="comment">//User类型的对象从session中删除了</span></span><br><span class="line">		ServletContext application = event.getSession().getServletContext();</span><br><span class="line">		Integer onclinecount = (Integer)application.getAttribute(<span class="string">&quot;onclinecount&quot;</span>);</span><br><span class="line">		onclinecount--;</span><br><span class="line">		application.setAttribute(<span class="string">&quot;onclinecount&quot;</span>,onclinecount);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span>  String password;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><h4 id="LoginCheckFilter"><a href="#LoginCheckFilter" class="headerlink" title="LoginCheckFilter"></a>LoginCheckFilter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 什么情况下不能拦截？</span></span><br><span class="line"><span class="comment">		 *      目前写的路径是：/* 表示所有的请求均拦截。</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 *      用户访问 index.jsp的时候不能拦截</span></span><br><span class="line"><span class="comment">		 *      用户已经登录了，这个需要放行，不能拦截。</span></span><br><span class="line"><span class="comment">		 *      用户要去登录，这个也不能拦截。</span></span><br><span class="line"><span class="comment">		 *      WelcomeServlet也不能拦截。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"></span><br><span class="line">		HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">		HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取请求路径</span></span><br><span class="line">		String servletPath = request.getServletPath();</span><br><span class="line"></span><br><span class="line">		HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">/* if(&quot;/index.jsp&quot;.equals(servletPath) || &quot;/welcome&quot;.equals(servletPath) ||</span></span><br><span class="line"><span class="comment">                &quot;/user/login&quot;.equals(servletPath) || &quot;/user/exit&quot;.equals(servletPath)</span></span><br><span class="line"><span class="comment">                || (session != null &amp;&amp; session.getAttribute(&quot;username&quot;) != null))&#123;*/</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;/index.jsp&quot;</span>.equals(servletPath) || <span class="string">&quot;/welcome&quot;</span>.equals(servletPath) ||</span><br><span class="line">				<span class="string">&quot;/user/login&quot;</span>.equals(servletPath) || <span class="string">&quot;/user/exit&quot;</span>.equals(servletPath)</span><br><span class="line">				|| (session != <span class="keyword">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="keyword">null</span>))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 继续往下走</span></span><br><span class="line">			chain.doFilter(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			response.sendRedirect(request.getContextPath() + <span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><h4 id="DBUtil"><a href="#DBUtil" class="headerlink" title="DBUtil"></a>DBUtil</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量：在类加载时执行。</span></span><br><span class="line">    <span class="comment">// 并且是有顺序的。自上而下的顺序。</span></span><br><span class="line">    <span class="comment">// 属性资源文件绑定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;resources.jdbc&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据属性配置文件key获取value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 注册驱动（注册驱动只需要注册一次，放在静态代码块当中。DBUtil类加载的时候执行。）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// &quot;com.mysql.jdbc.Driver&quot; 是连接数据库的驱动，不能写死。因为以后可能还会连接Oracle数据库。</span></span><br><span class="line">            <span class="comment">// 如果连接oracle数据库的时候，还需要修改java代码，显然违背了OCP开闭原则。</span></span><br><span class="line">            <span class="comment">// OCP开闭原则：对扩展开放，对修改关闭。（什么是符合OCP呢？在进行功能扩展的时候，不需要修改java源代码。）</span></span><br><span class="line">            <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="webaction"><a href="#webaction" class="headerlink" title="webaction"></a>webaction</h3><h4 id="DeptServlet"><a href="#DeptServlet" class="headerlink" title="DeptServlet"></a>DeptServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量：在类加载时执行。</span></span><br><span class="line">    <span class="comment">// 并且是有顺序的。自上而下的顺序。</span></span><br><span class="line">    <span class="comment">// 属性资源文件绑定</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">&quot;resources.jdbc&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据属性配置文件key获取value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 注册驱动（注册驱动只需要注册一次，放在静态代码块当中。DBUtil类加载的时候执行。）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// &quot;com.mysql.jdbc.Driver&quot; 是连接数据库的驱动，不能写死。因为以后可能还会连接Oracle数据库。</span></span><br><span class="line">            <span class="comment">// 如果连接oracle数据库的时候，还需要修改java代码，显然违背了OCP开闭原则。</span></span><br><span class="line">            <span class="comment">// OCP开闭原则：对扩展开放，对修改关闭。（什么是符合OCP呢？在进行功能扩展的时候，不需要修改java源代码。）</span></span><br><span class="line">            <span class="comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="UserServlet"><a href="#UserServlet" class="headerlink" title="UserServlet"></a>UserServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.webaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&#123;&quot;/user/login&quot;,&quot;/user/exit&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String servletPath = request.getServletPath();</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;/user/login&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">			doLogin(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/user/exit&quot;</span>.equals(servletPath))&#123;</span><br><span class="line">			doExit(request,response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExit</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取session对象，销毁session</span></span><br><span class="line">		HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//从session域中删除user对象</span></span><br><span class="line">			session.removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//手动销毁session对象</span></span><br><span class="line">			session.invalidate();</span><br><span class="line">			<span class="comment">// 销毁cookie（退出系统将所有的cookie全部销毁）</span></span><br><span class="line">			Cookie[] cookies = request.getCookies();</span><br><span class="line">			<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">					<span class="comment">// 设置cookie的有效期为0，表示删除该cookie</span></span><br><span class="line">					cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">					<span class="comment">// 设置一个下cookie的路径</span></span><br><span class="line">					cookie.setPath(request.getContextPath()); <span class="comment">// 删除cookie的时候注意路径问题。</span></span><br><span class="line">					<span class="comment">// 响应cookie给浏览器，浏览器端会将之前的cookie覆盖。</span></span><br><span class="line">					response.addCookie(cookie);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 换一种方案</span></span><br><span class="line">            <span class="comment">/*Cookie cookie1 = new Cookie(&quot;username&quot;,&quot;&quot;);</span></span><br><span class="line"><span class="comment">            cookie1.setMaxAge(0);</span></span><br><span class="line"><span class="comment">            cookie1.setPath(request.getContextPath());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Cookie cookie2 = new Cookie(&quot;password&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">            cookie2.setMaxAge(0);</span></span><br><span class="line"><span class="comment">            cookie2.setPath(request.getContextPath());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            response.addCookie(cookie1);</span></span><br><span class="line"><span class="comment">            response.addCookie(cookie2);*/</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//跳转到登陆页面</span></span><br><span class="line">			response.sendRedirect(request.getContextPath());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		Boolean success=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn= DBUtil.getConnection();</span><br><span class="line">			String sql=<span class="string">&quot;select * from t_user where username= ? and password=?&quot;</span>;</span><br><span class="line">			ps=conn.prepareStatement(sql);</span><br><span class="line">			ps.setString(<span class="number">1</span>,username);</span><br><span class="line">			ps.setString(<span class="number">2</span>,password);</span><br><span class="line">			rs=ps.executeQuery();</span><br><span class="line">			<span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">				success=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			DBUtil.close(conn,ps,rs);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(success)&#123;</span><br><span class="line">				<span class="comment">// 获取session对象(这里的要求是：必须获取到session，没有session也要新建一个session对象。)</span></span><br><span class="line">				HttpSession session=request.getSession();<span class="comment">// session对象一定不是null</span></span><br><span class="line">				<span class="comment">/*session.setAttribute(&quot;username&quot;, username);*/</span></span><br><span class="line"></span><br><span class="line">				User user = <span class="keyword">new</span> User(username, password);</span><br><span class="line">				session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//登录成功了并且用户确实选择了“十天免登录”功能</span></span><br><span class="line">				String f = request.getParameter(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(f))&#123;</span><br><span class="line">					<span class="comment">//创建Cookie对象存储登录名</span></span><br><span class="line">					Cookie cookie1=<span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">					<span class="comment">//创建Cookie对象存储密码</span></span><br><span class="line">					Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;password&quot;</span>, password);<span class="comment">//真实情况下是加密的</span></span><br><span class="line">					<span class="comment">//设置cookie的有效期为10天</span></span><br><span class="line">					cookie1.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">10</span>);</span><br><span class="line">					cookie2.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">10</span>);</span><br><span class="line">					<span class="comment">//设置cookie的path(只要访问这个应用，浏览器就一定要携带这两个cookie）</span></span><br><span class="line">					cookie1.setPath(request.getContextPath());</span><br><span class="line">					cookie2.setPath(request.getContextPath());</span><br><span class="line">					<span class="comment">//响应cookie到浏览器</span></span><br><span class="line">					response.addCookie(cookie1);</span><br><span class="line">					response.addCookie(cookie2);</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				response.sendRedirect(request.getContextPath()+<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				response.sendRedirect(request.getContextPath()+<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="WelcomeServlet"><a href="#WelcomeServlet" class="headerlink" title="WelcomeServlet"></a>WelcomeServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.webaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.oa.utils.DBUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/welcome&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取cookie</span></span><br><span class="line">		<span class="comment">//这个Cookie[]数组可能是null，如果不是null，则数组长度一定是大于0的</span></span><br><span class="line">		Cookie[] cookies = request.getCookies();</span><br><span class="line">		String username=<span class="keyword">null</span>;</span><br><span class="line">		String password=<span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">					String name = cookie.getName();</span><br><span class="line">						<span class="keyword">if</span>(<span class="string">&quot;username&quot;</span>.equals(name))&#123;</span><br><span class="line">							 username = cookie.getValue();</span><br><span class="line">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;password&quot;</span>.equals(name))&#123;</span><br><span class="line">							 password=cookie.getValue();</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//要在这里使用username和password变量</span></span><br><span class="line">		<span class="keyword">if</span>(username!=<span class="keyword">null</span>&amp;&amp;password!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="comment">//验证用户名和密码是否正确</span></span><br><span class="line">			Connection conn=<span class="keyword">null</span>;</span><br><span class="line">			PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">			ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">boolean</span> success=<span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn= DBUtil.getConnection();</span><br><span class="line">				String sql=<span class="string">&quot;select * from t_user where username=? and password=?&quot;</span>;</span><br><span class="line">				ps=conn.prepareStatement(sql);</span><br><span class="line">				ps.setString(<span class="number">1</span>,username);</span><br><span class="line">				ps.setString(<span class="number">2</span>,password);</span><br><span class="line">				rs= ps.executeQuery();</span><br><span class="line">				<span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">					success=<span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">				DBUtil.close(conn,ps,rs);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(success)&#123;</span><br><span class="line">				<span class="comment">//获取session</span></span><br><span class="line">				HttpSession session = request.getSession();</span><br><span class="line">				<span class="comment">//session.setAttribute(&quot;username&quot;,username);</span></span><br><span class="line"></span><br><span class="line">				User user = <span class="keyword">new</span> User(username, password);</span><br><span class="line">				session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//正确，则表示登录成功</span></span><br><span class="line">				response.sendRedirect(request.getContextPath()+<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//错误，则表示登陆失败</span></span><br><span class="line">				response.sendRedirect(request.getContextPath()+<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//跳转到登录页面</span></span><br><span class="line">			response.sendRedirect(request.getContextPath()+<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置欢迎页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>welcome<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--登陆检查的过滤器，过滤所有路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjpowernode.oa.filter.LoginCheckFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="add-jsp-1"><a href="#add-jsp-1" class="headerlink" title="add.jsp"></a>add.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;新增部门&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;欢迎$&#123;username&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;h1&gt;新增部门&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/dept/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			部门编号&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;deptno&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			部门名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;dname&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">			部门位置&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;loc&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="detail-jsp-1"><a href="#detail-jsp-1" class="headerlink" title="detail.jsp"></a>detail.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.oa.bean.Dept&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;部门详情&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;欢迎$&#123;username&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;h1&gt;部门详情&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		部门编号:$&#123;dept.deptno&#125; &lt;br&gt;</span><br><span class="line">		部门名称:$&#123;dept.dname&#125; &lt;br&gt;</span><br><span class="line">		部门位置:$&#123;dept.loc&#125; &lt;br&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;后退&quot;</span> onclick=<span class="string">&quot;window.history.back()&quot;</span>/&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="edit-jsp-1"><a href="#edit-jsp-1" class="headerlink" title="edit.jsp"></a>edit.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;修改部门&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;欢迎$&#123;username&#125;&lt;/h3&gt;</span><br><span class="line">		&lt;h1&gt;修改部门&lt;/h1&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/dept/modify&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			部门编号&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;deptno&quot;</span> value=<span class="string">&quot;$&#123;dept.deptno&#125;&quot;</span> readonly/&gt;&lt;br&gt;</span><br><span class="line">			部门名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;dname&quot;</span> value=<span class="string">&quot;$&#123;dept.dname&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">			部门位置&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;loc&quot;</span> value=<span class="string">&quot;$&#123;dept.loc&#125;&quot;</span> /&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="error-jsp"><a href="#error-jsp" class="headerlink" title="error.jsp"></a>error.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录失败&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    登录失败，请&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/index.jsp&quot;</span>&gt;重新登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%--访问jsp的时候不生成session对象--%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> session=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;欢迎使用oa系统&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">        &lt;!--前端超链接发送请求的时候，请求路径以“/”开始，并且要带着项目名--&gt;</span><br><span class="line">		&lt;%--&lt;a href=<span class="string">&quot;/oa/list.jsp&quot;</span>&gt;查看部门列表&lt;/a&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--注意空格问题--%&gt;</span><br><span class="line">		&lt;%--&lt;a href=<span class="string">&quot;&lt;%=request.getContextPath()%&gt;/dept/list&quot;</span>&gt;查看部门列表&lt;/a&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">		&lt;%--调用哪个对象的哪个方法，可以动态的获取一个应用的根路径。--%&gt;</span><br><span class="line">		&lt;%--&lt;%= request.getContextPath()%&gt;--%&gt;  &lt;%-- out.print(request.getContextPath());--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;h1&gt;用户登录&lt;/h1&gt;</span><br><span class="line">	&lt;hr&gt;</span><br><span class="line">		&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">			username&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			password&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;f&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;十天内免登录&lt;br&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="list-jsp"><a href="#list-jsp" class="headerlink" title="list.jsp"></a>list.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;com.bjpowernode.oa.bean.Dept&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;部门列表页面 &lt;/title&gt;</span><br><span class="line">		&lt;%--设置整个网页的基础路径为:http:<span class="comment">//localhost:8080/oa/--%&gt;</span></span><br><span class="line">		&lt;%--&lt;base href=<span class="string">&quot;http://localhost:8080/oa/&quot;</span>&gt;--%&gt;</span><br><span class="line">		&lt;base href=<span class="string">&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;%--显示一个登录名--%&gt;</span><br><span class="line">	&lt;h3&gt;欢迎$&#123;username&#125;&lt;/h3&gt;</span><br><span class="line">	&lt;a href=<span class="string">&quot;user/exit&quot;</span>&gt;[退出系统]&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">		<span class="function">function <span class="title">del</span><span class="params">(dno)</span></span>&#123;</span><br><span class="line">			<span class="keyword">var</span> ok=window.confirm(<span class="string">&quot;亲，删除了不可恢复哦！&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span>(ok)&#123;</span><br><span class="line">				<span class="comment">//html的base标签可能对js代码不起作用</span></span><br><span class="line">				document.location.href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/dept/delete?deptno=&quot;</span>+dno;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;h1 align=<span class="string">&quot;center&quot;</span>&gt;部门列表&lt;/h1&gt;</span><br><span class="line">		&lt;table border=<span class="string">&quot;1px&quot;</span> align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;50%&quot;</span>&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">				&lt;th&gt;部门编号&lt;/th&gt;</span><br><span class="line">				&lt;th&gt;部门名称&lt;/th&gt;</span><br><span class="line">				&lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">			&lt;c:forEach items=<span class="string">&quot;$&#123;deptList&#125;&quot;</span> varStatus=<span class="string">&quot;deptStatus&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td&gt;$&#123;deptStatus.count&#125;&lt;/td&gt;</span><br><span class="line">					&lt;td&gt;$&#123;dept.deptno&#125;&lt;/td&gt;</span><br><span class="line">					&lt;td&gt;$&#123;dept.dname&#125;&lt;/td&gt;</span><br><span class="line">					&lt;td&gt;</span><br><span class="line">						&lt;a href=<span class="string">&quot;javascript:void(0)&quot;</span> onclick=<span class="string">&quot;del($&#123;dept.deptno&#125;)&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">						&lt;a href=<span class="string">&quot;dept/detail?f=edit&amp;dno=$&#123;dept.deptno&#125;&quot;</span>&gt;修改&lt;/a&gt;</span><br><span class="line">						&lt;a href=<span class="string">&quot;dept/detail?f=detail&amp;dno=$&#123;dept.deptno&#125;&quot;</span>&gt;详情&lt;/a&gt;</span><br><span class="line">					&lt;/td&gt;</span><br><span class="line">				&lt;/tr&gt;</span><br><span class="line">			&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;/table&gt;</span><br><span class="line">		&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">		&lt;a href=<span class="string">&quot;add.jsp&quot;</span>&gt;新增部门&lt;/a&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h2><p>  目标对象不可访问,通过代理对象增强功能访问.</p>
<p>  生活中:<br>  房东                ===&gt;目标对象<br>  房屋中介            ===&gt;代理对象<br>  你,我               ===&gt;客户端对象</p>
<p>  服务生产厂          ===&gt;目标对象<br>  门店(旗舰店)        ===&gt;代理对象<br>  你,我               ===&gt;客户端</p>
<p>  开发中:<br>  运营商(电信,移动,联通)      ====&gt;目标对象<br>  第三方公司                  ====&gt;代理对象<br>  开发的应用程序需要发送短信的功能  ===&gt;客户端<br>  开发的应用程序需要支付的功能</p>
<h2 id="2-代理模式的作用"><a href="#2-代理模式的作用" class="headerlink" title="2.代理模式的作用"></a>2.代理模式的作用</h2><p>  1)控制目标对象的访问<br>2)增强功能</p>
<h2 id="3-代理模式的分类"><a href="#3-代理模式的分类" class="headerlink" title="3.代理模式的分类"></a>3.代理模式的分类</h2><p>  1)静态代理<br>  2)动态代理,又为JDK动态代理,CGLib动态代理(子类代理)</p>
<h2 id="4-什么是静态代理"><a href="#4-什么是静态代理" class="headerlink" title="4.什么是静态代理"></a>4.什么是静态代理</h2><p>  它是代理模式的一种.<br>  它具备以下特点:<br>  1)目标对象和代理对象实现同一个业务接口<br>  2)目标对象必须实现接口<br>  3)代理对象在程序运行前就已经存在<br>  4)能够灵活的进行目标对象的切换,却无法进行功能的灵活处理(使用动态代理解决此问题)</p>
<h2 id="5-静态代理实现"><a href="#5-静态代理实现" class="headerlink" title="5.静态代理实现"></a>5.静态代理实现</h2><p>  业务功能:请明星进行节目表演.<br>  明星刘德华:目标对象(无法直接访问)<br>  刘德华助理:代理对象(我们可以访问,他还可以跟明星对接)<br>  我们      :客户端对象</p>
<p>  代码实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">业务接口Service</span><br><span class="line">public interface Service &#123;</span><br><span class="line">  //规定的唱歌的业务功能</span><br><span class="line">  void sing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 目标对象:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  目标对象:刘德华,实现业务接口中的功能,进行唱歌表演</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperStarLiu</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;我是刘德华,我正在表演唱歌............&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">代理对象:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"><span class="comment">//类中的成员变量设计为接口</span></span><br><span class="line"><span class="keyword">public</span> Service target;  <span class="comment">//目标对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入目标对象,方法的参数设计为接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Service target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;预订时间..........&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;预订场地..........&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切记切记:业务功能必须由目标对象亲自实现</span></span><br><span class="line">    <span class="comment">//        SuperStarLiu liu = new SuperStarLiu();</span></span><br><span class="line"><span class="comment">//        liu.sing();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        SuperStarZhou zhou = new SuperStarZhou();</span></span><br><span class="line"><span class="comment">//        zhou.sing();</span></span><br><span class="line">    <span class="comment">//面向接口编程:调用时,接口指向实现类</span></span><br><span class="line">    target.sing();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;结算费用..........&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 客户端对象</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgent</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//测试功能</span></span><br><span class="line"><span class="comment">//        SuperStarLiu liu = new SuperStarLiu();</span></span><br><span class="line"><span class="comment">//        liu.sing();</span></span><br><span class="line"><span class="comment">//        Agent agent = new Agent();</span></span><br><span class="line">   <span class="comment">//        agent.sing();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//有接口和实现类,必须使用接口指向实现类(规范)</span></span><br><span class="line">       Service agent = <span class="keyword">new</span> Agent();</span><br><span class="line">       agent.sing();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-面向接口编程-重要"><a href="#6-面向接口编程-重要" class="headerlink" title="6.面向接口编程(重要)"></a>6.面向接口编程(重要)</h2><p>  类中的成员变量设计为接口,方法的形参设计为接口,方法的返回值设计为接口,调用时接口指向实现类.</p>
<h2 id="7-动态代理"><a href="#7-动态代理" class="headerlink" title="7.动态代理"></a>7.动态代理</h2><p>  代理对象在程序运行的过程中动态在内存构建.可以灵活的进行业务功能的切换.</p>
<h2 id="8-JDK动态代理"><a href="#8-JDK动态代理" class="headerlink" title="8.JDK动态代理"></a>8.JDK动态代理</h2><p>  1)目标对象必须实现业务接口<br>  2)JDK代理对象不需要实现业务接口<br>  3)JDK动态代理的对象在程序运行前不存在.在程序运行时动态的在内存中构建<br>  4)JDK动态代理灵活的进行业务功能的切换<br>  5)本类中的方法(非接口中的方法)不能被代理</p>
<h2 id="9-JDK动态代理用到的类和接口"><a href="#9-JDK动态代理用到的类和接口" class="headerlink" title="9.JDK动态代理用到的类和接口"></a>9.JDK动态代理用到的类和接口</h2><p>  它是使用现在的工具类完成JDK动态实现.<br>  1)Proxy类<br>  它是java.lang.reflect.Proxy包下的类. 它有一个方法Proxy.newProxyInstance(…..)专门用来生成动态代理对象.</p>
<p>  public static Object newProxyInstance(ClassLoader loader,  //类加载器<br>                                        Class&lt;?&gt;[] interfaces,//目标对象实现的所有接口<br>                                       InvocationHandler h //它就类似于Agent的功能,代理的功能和目标对象的业务功能调用在这<br>                                          )<br>        throws IllegalArgumentException<br>    {…}</p>
<p>  2)Method类<br>  反射用的类,用来进行目标对象的方法的反射调用.<br>  method对象接住我们正在调用的方法sing(),show()<br>  method==sing(),show()<br>  method.invoke();==&gt;手工调用目标方法  sing();   show();</p>
<p>  3)InvocationHandler接口<br>  它是实现代理和业务功能的.我们在调用时使用匿名内部实现.</p>
<p>  代码实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类中的成员变量设计为接口,目标对象</span></span><br><span class="line">    Service target;</span><br><span class="line">	<span class="comment">//传入目标对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Service target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回动态代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAgent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">            <span class="comment">//ClassLoader loader, 类加载器,完成目标对象的加载</span></span><br><span class="line">            target.getClass().getClassLoader(),</span><br><span class="line">            <span class="comment">//Class&lt;?&gt;[] interfaces,目标对象实现的所有接口</span></span><br><span class="line">            target.getClass().getInterfaces(),</span><br><span class="line">            <span class="comment">//InvocationHandler h,实现代理功能的接口 ,我们传入的是匿名内部实现</span></span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                        //创建代理对象</span></span></span><br><span class="line"><span class="params"><span class="function">                        Object proxy,</span></span></span><br><span class="line"><span class="params"><span class="function">                        //method就是目标方法sing()</span>,<span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        Method method,</span></span><br><span class="line"><span class="function">                        <span class="comment">//目标方法的参数</span></span></span><br><span class="line"><span class="function">                        Object[] args) <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//代理功能</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;预订时间........&quot;</span>);</span><br><span class="line">                    <span class="comment">//代理功能</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;预订场地........&quot;</span>);</span><br><span class="line">                    <span class="comment">//主业务功能实现</span></span><br><span class="line">                    <span class="comment">//target.sing();还是写死了方法的调用, 不成</span></span><br><span class="line">                    <span class="comment">//sing(),show(),one()</span></span><br><span class="line">                    Object obj = method.invoke(target,args);</span><br><span class="line">                    <span class="comment">//代理功能</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;结算费用........&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> obj;  <span class="comment">//切记:这个是目标方法的返回值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-CGLib动态代理"><a href="#10-CGLib动态代理" class="headerlink" title="10.CGLib动态代理"></a>10.CGLib动态代理</h2><p>  又称为子类.通过动态的在内存中构建子类对象,重写父类的方法进行代理功能的增强.<br>  如果目标对象没有实现接口,则只能通过CGLib子类代理来进行功能增强.<br>  子类代理是对象字节码框架ASM来实现的.<br>  注意:<br>  被代理的类不能为final， 否则报错.<br>  目标对象的方法如果为final/static, 那么就不会被拦截，即不会执行目标对象额外的业务方法。</p>
<p>  public Object getProxyInstance(){<br>        //1.使用工具类<br>        Enhancer en=new Enhancer();<br>        //2.设置父类<br>        en.setSuperclass(target.getClass());<br>        //3.设置回调函数<br>        en.setCallback(this);<br>        //4.创建子类（代理）对象<br>        return en.create();  ===&gt;返回的是子类代理对象</p>
<h2 id="动态代理总结"><a href="#动态代理总结" class="headerlink" title="动态代理总结"></a>动态代理总结</h2><img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" class="" title="动态代理">

<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-什么是三层架构"><a href="#1-什么是三层架构" class="headerlink" title="1.什么是三层架构"></a>1.什么是三层架构</h2><p>  在项目开发中,遵循的一种形式模式.分为三层.<br>  1)界面层:用来接收客户端的输入,调用业务逻辑层进行功能处理,返回结果给客户端.过去的servlet就是界面层的功能.<br>  2)业务逻辑层:用来进行整个项目的业务逻辑处理,向上为界面层提供处理结果,向下问数据访问层要数据.<br>  3)数据访问层:专门用来进行数据库的增删改查操作,向上为业务逻辑层提供数据.</p>
<p>  各层之间的调用顺序是固定的,不允许跨层访问.<br>  界面层&lt;——-&gt;业务逻辑层&lt;——&gt;数据访问层</p>
<h2 id="2-生活中的三层架构"><a href="#2-生活中的三层架构" class="headerlink" title="2.生活中的三层架构"></a>2.生活中的三层架构</h2><img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/1---%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" class="" title="1---三层架构">

<h2 id="3-常用的框架SSM"><a href="#3-常用的框架SSM" class="headerlink" title="3.常用的框架SSM."></a>3.常用的框架SSM.</h2><p>  Spring:它是整合其它框架的框架.它的核心是IOC和AOP.它由20多个模块构成.在很多领域都提供了很好的解决方案.是一个大佬级别的存在.<br>  SpringMVC:它是Spring家族的一员.专门用来优化控制器(Servlet)的.提供了极简单数据提交,数据携带,页面跳转等功能.<br>  MyBatis:是持久化层的一个框架.用来进行数据库访问的优化.专注于sql语句.极大的简化了JDBC的访问.</p>
<h2 id="4-什么是框架"><a href="#4-什么是框架" class="headerlink" title="4.什么是框架"></a>4.什么是框架</h2><p>  它是一个半成品软件.将所有的公共的,重复的功能解决掉,帮助程序快速高效的进行开发.它是可复用,可扩展的.</p>
<h2 id="5-什么是MyBatis框架"><a href="#5-什么是MyBatis框架" class="headerlink" title="5.什么是MyBatis框架"></a>5.什么是MyBatis框架</h2><p>  MyBatis 本是 apache 的一个开源项目iBatis, 2010 年这个项目由 apache software foundation 迁移到了 google code，并且改名为 MyBatis  。2013 年 11 月迁移到 Github,最新版本是 MyBatis 3.5.7 ，其发布时间是 2021 年 4月 7日。<br>  MyBatis完成数据访问层的优化.它专注于sql语句.简化了过去JDBC繁琐的访问机制. </p>
<h2 id="6-添加框架的步骤"><a href="#6-添加框架的步骤" class="headerlink" title="6.添加框架的步骤"></a>6.添加框架的步骤</h2><p>  1)添加依赖<br>  2)添加配置文件</p>
<p>  具体步骤:<br>  1.新建库建表<br>  2.新建maven项目,选quickstart模板<br>  3.修改目录,添加缺失的目录,修改目录属性<br>  4.修改pom.xml文件,添加MyBatis的依赖,添加mysql的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加MyBatis框架的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  5.修改pom.xml文件,添加资源文件指定<br>  6.在idea中添加数据库的可视化<br>  7.添加jdbc.properties属性文件(数据库的配置)<br>  8.添加SqlMapConfig.xml文件,MyBatis的核心配置文件<br>  9.创建实体类Student,用来封装数据<br>  10.添加完成学生表的增删改查的功能的StudentMapper.xml文件<br>  11.创建测试类,进行功能测试</p>
<p>  StudentMapper.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  mapper:是整个文件的大标签,用来开始和结束xml文件</span></span><br><span class="line"><span class="comment">  属性:</span></span><br><span class="line"><span class="comment">     namespace:指定命名空间(相当于包名),用来区分不同mapper.xml文件中相同的id属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;zar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      完成查询全部学生的功能</span></span><br><span class="line"><span class="comment">      List&lt;Student&gt; getALL();</span></span><br><span class="line"><span class="comment">         resultType:指定查询返回的结果集的类型,如果是集合,则必须是泛型的类型</span></span><br><span class="line"><span class="comment">         parameterType:如果有参数,则通过它来指定参数的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span> &gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按主键id查询学生信息</span></span><br><span class="line"><span class="comment">       Student getById(Integer id)</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按学生名称模糊查询</span></span><br><span class="line"><span class="comment">        List&lt;Student&gt; getByName(String name);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">        where name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        增加学生</span></span><br><span class="line"><span class="comment">        int insert（Student stu）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        实体类：</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">        private String name;</span></span><br><span class="line"><span class="comment">        private String email;</span></span><br><span class="line"><span class="comment">        private String age;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        insert into student (name,email ,age) values(#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     按主键删除学生</span></span><br><span class="line"><span class="comment">     int delete(Integer id);</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> &gt;</span></span><br><span class="line">        delete from student where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      更新学生</span></span><br><span class="line"><span class="comment">      int update(Student stu);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        update student set name=#&#123;name&#125;,email=#&#123;email&#125;,age=#&#123;age&#125;</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">//1.使用流读取核心配置文件</span></span><br><span class="line">      InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//2.创建SqlSessionFactory工厂对象</span></span><br><span class="line">      SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">      <span class="comment">//3.取出SqlSession</span></span><br><span class="line">      SqlSession sqlSession = factory.openSession();</span><br><span class="line">      <span class="comment">//4.调用方法</span></span><br><span class="line">      <span class="keyword">int</span> num = sqlSession.update(<span class="string">&quot;zar.update&quot;</span>,<span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;hehe@126.com&quot;</span>,<span class="number">30</span>));</span><br><span class="line">      System.out.println(num);</span><br><span class="line">      sqlSession.commit();</span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3MyBatis对象分析"><a href="#7-3MyBatis对象分析" class="headerlink" title="7.3MyBatis对象分析"></a>7.3MyBatis对象分析</h2><p>  1)Resources类<br>  就是解析SqlMapConfig.xml文件,创建出相应的对象<br>  InputStream in = Resources.getResourceAsStream(“SqlMapConfig.xml”);</p>
<p>  2)SqlSessionFactory接口<br>  使用ctrl+h快捷键查看本接口的子接口及实现类<br>  DefaultSqlSessionFactory是实现类<br>  SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);</p>
<p>  3)SqlSession接口<br>  DefaultSqlSession实现类</p>
<h2 id="8-为实体类注册别名"><a href="#8-为实体类注册别名" class="headerlink" title="8.为实体类注册别名"></a>8.为实体类注册别名</h2><p>  1)单个注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>  2)批量注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;typeAlias type=&quot;com.bjpowernode.pojo.Student&quot; alias=&quot;student&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--批量注册别名</span></span><br><span class="line"><span class="comment">        别名是类名的驼峰命名法(规范)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-设置日志输出"><a href="#9-设置日志输出" class="headerlink" title="9.设置日志输出"></a>9.设置日志输出</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置日志输出底层执行的代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-动态代理存在意义"><a href="#10-动态代理存在意义" class="headerlink" title="10.动态代理存在意义"></a>10.动态代理存在意义</h2><p>  在三层架构中,业务逻辑层要通过接口访问数据访问层的功能.动态代理可以实现.</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/3---%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89.png" class="" title="3---动态代理存在的意义">

<p>  动态代理的实现规范:<br>  1)UsersMapper.xml文件与UsersMapper.java的接口必须同一个目录下.<br>  2)UsersMapper.xml文件与UsersMapper.java的接口的文件名必须一致,后缀不管.<br>  3)UserMapper.xml文件中标签的id值与与UserMapper.java的接口中方法的名称完全一致.<br>  4)UserMapper.xml文件中标签的parameterType属性值与与UserMapper.java的接口中方法的参数类型完全一致.<br>  5)UserMapper.xml文件中标签的resultType值与与UserMapper.java的接口中方法的返回值类型完全一致.<br>  6)UserMapper.xml文件中namespace属性必须是接口的完全限定名称com.bjpowernode.mapper.UsersMapper<br>  7)在SqlMapConfig.xml文件中注册mapper文件时,使用class=接口的完全限定名称com.bjpowernode.mapper.UsersMapper.</p>
<h2 id="11-动态代理访问的步骤"><a href="#11-动态代理访问的步骤" class="headerlink" title="11.动态代理访问的步骤"></a>11.动态代理访问的步骤</h2><p>  1)建表Users<br>  2)新建maven工程,刷新可视化<br>  3)修改目录<br>  4)修改pom.xml文件,添加依赖<br>  5)添加jdbc.propertis文件到resources目录下<br>  6)添加SqlMapConfig.xml文件<br>  7)添加实体类<br>  8)添加mapper文件夹,新建UsersMapper接口<br>  9)在mapper文件夹下,新建UsersMapper.xml文件,完成增删改查功能<br>  10)添加测试类,测试功能</p>
<h2 id="12-优化mapper-xml文件注册"><a href="#12-优化mapper-xml文件注册" class="headerlink" title="12.优化mapper.xml文件注册"></a>12.优化mapper.xml文件注册</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绝对路径注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;/////&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非动态代理方式下的注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--动态代理方式下的单个mapper.xml文件注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.mapper.UsersMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量注册--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bjpowernode.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="13-占位符"><a href="#13-占位符" class="headerlink" title="13.#{}占位符"></a>13.#{}占位符</h2><p>  传参大部分使用#{}传参,它的底层使用的是PreparedStatement对象,是安全的数据库访问 ,防止sql注入.<br>  #{}里如何写,看parameterType参数的类型<br>  1)如果parameterType的类型是简单类型(8种基本(封装)+String),则#{}里随便写.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span>  ===&gt;入参类型是简单类型</span><br><span class="line">       select id,username,birthday,sex,address</span><br><span class="line">       from users</span><br><span class="line">       where id=#&#123;zar&#125;  ===&gt;随便写</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<p>  2)parameterType的类型是实体类的类型,则#{}里只能是类中成员变量的名称,而且区分大小写. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> &gt;</span>  ===&gt;入参是实体类</span><br><span class="line">      insert into users (username, birthday, sex, address) values(#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)  ==&gt;成员变量名称</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-字符串拼接或字符串替换"><a href="#14-字符串拼接或字符串替换" class="headerlink" title="14.${}字符串拼接或字符串替换"></a>14.${}字符串拼接或字符串替换</h2><p>  1)字符串拼接,一般用于模糊查询中.建议少用,因为有sql注入的风险.<br>    也分两种情况,同样的看parameterType的类型<br>    A. 如果parameterType的类型是简单类型,则${}里随便写,但是分版本,如果是3.5.1及以下的版本,只以写value.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span>  ===&gt;入参是简单类型</span><br><span class="line">        select id,username,birthday,sex,address</span><br><span class="line">        from users</span><br><span class="line">        where username like &#x27;%$&#123;zar&#125;%&#x27;   ===&gt;随便写</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>​    B. 如果parameterType的类型是实体类的类型,则${}里只能是类中成员变量的名称.(现在已经少用)<br>​    C. 优化后的模糊查询(以后都要使用这种方式)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameGood&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select id,username,birthday,sex,address</span><br><span class="line">        from users</span><br><span class="line">        where username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>  2)字符串替换<br>  需求:模糊地址或用户名查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from users where username like &#x27;%小%&#x27;;</span><br><span class="line">select * from users where address like &#x27;%市%&#x27;</span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   //模糊用户名和地址查询</span></span><br><span class="line"><span class="comment">   //如果参数超过一个,则parameterType不写</span></span><br><span class="line"><span class="comment">   List&lt;Users&gt; getByNameOrAddress(</span></span><br><span class="line"><span class="comment">           @Param(&quot;columnName&quot;)  ===&gt;为了在sql语句中使用的名称 </span></span><br><span class="line"><span class="comment">           String columnName,</span></span><br><span class="line"><span class="comment">           @Param(&quot;columnValue&quot;)   ===&gt;为了在sql语句中使用的名称</span></span><br><span class="line"><span class="comment">           String columnValue);</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByNameOrAddress&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">       select id,username,birthday,sex,address</span><br><span class="line">       from users</span><br><span class="line">       where $&#123;columnName&#125; like concat(&#x27;%&#x27;,#&#123;columnValue&#125;,&#x27;%&#x27;)  ==&gt;此处使用的是@Param注解里的名称</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="15-返回主键值"><a href="#15-返回主键值" class="headerlink" title="15.返回主键值"></a>15.返回主键值</h2><p>  在插入语句结束后, 返回自增的主键值到入参的users对象的id属性中.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span>  <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">        select last_insert_id()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">       insert into users (username, birthday, sex, address) values(#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">selectKey</span>&gt;</span>标签的参数详解:	</span><br><span class="line">   keyProperty: users对象的哪个属性来接返回的主键值</span><br><span class="line">   resultType:返回的主键的类型</span><br><span class="line">   order:在插入语句执行前,还是执行后返回主键的值</span><br></pre></td></tr></table></figure>

<h2 id="16-UUID"><a href="#16-UUID" class="headerlink" title="16.UUID"></a>16.UUID</h2><p>  这是一个全球唯一随机字符串,由36个字母数字中划线组.<br>  UUID uuid = UUID.randomUUID();<br>  System.out.println(uuid.toString().replace(“-“,””).substring(20));</p>
<h2 id="17-什么是动态sql"><a href="#17-什么是动态sql" class="headerlink" title="17.什么是动态sql"></a>17.什么是动态sql</h2><p>  可以定义代码片断,可以进行逻辑判断,可以进行循环处理(批量处理),使条件判断更为简单.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1)<span class="tag">&lt;<span class="name">sql</span>&gt;</span>:用来定义代码片断,可以将所有的列名,或复杂的条件定义为代码片断,供使用时调用.</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">2)<span class="tag">&lt;<span class="name">include</span>&gt;</span>:用来引用<span class="tag">&lt;<span class="name">sql</span>&gt;</span>定义的代码片断.</span><br><span class="line"> <span class="comment">&lt;!--定义代码片断--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span></span><br><span class="line">      id,username,birthday,sex,address</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"> //引用定义好的代码片断	</span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">      select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      from users</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">3)<span class="tag">&lt;<span class="name">if</span>&gt;</span>:进行条件判断</span><br><span class="line">  test条件判断的取值可以是实体类的成员变量,可以是map的key,可以是@Param注解的名称.</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">4)<span class="tag">&lt;<span class="name">where</span>&gt;</span>:进行多条件拼接,在查询,删除,更新中使用.</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">      select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      from users</span><br><span class="line">      <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">             and username like concat(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">             and birthday = #&#123;birthday&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">             and sex = #&#123;sex&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              and address like concat(&#x27;%&#x27;,#&#123;address&#125;,&#x27;%&#x27;)</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">5)<span class="tag">&lt;<span class="name">set</span>&gt;</span>:有选择的进行更新处理,至少更新一列.能够保证如果没有传值进来,则数据库中的数据保持不变.</span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBySet&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">       update users</span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null and userName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              username = #&#123;userName&#125;,</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">               birthday = #&#123;birthday&#125;,</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               sex = #&#123;sex&#125;,</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               address =#&#123;address&#125; ,</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> 6)<span class="tag">&lt;<span class="name">foreach</span>&gt;</span>:用来进行循环遍历,完成循环条件查询,批量删除,批量增加,批量更新.</span><br><span class="line">    查询实现</span><br><span class="line">     <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        where id in</span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">               #&#123;id&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span>&gt;</span>参数详解:</span><br><span class="line">        collection:用来指定入参的类型,如果是List集合,则为list,如果是Map集合,则为map,如果是数组,则为array.</span><br><span class="line">        item:每次循环遍历出来的值或对象</span><br><span class="line">        separator:多个值或对象或语句之间的分隔符</span><br><span class="line">        open:整个循环外面的前括号 </span><br><span class="line">        close:整个循环外面的后括号</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">批量删除实现</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> &gt;</span></span><br><span class="line">    delete from users</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">批量增加实现</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">    insert into users(username, birthday, sex, address) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;u&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        (#&#123;u.userName&#125;,#&#123;u.birthday&#125;,#&#123;u.sex&#125;,#&#123;u.address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="18-指定参数位置"><a href="#18-指定参数位置" class="headerlink" title="18.指定参数位置"></a>18.指定参数位置</h2><p>  如果入参是多个,可以通过指定参数位置进行传参. 是实体包含不住的条件.实体类只能封装住成员变量的条件.如果某个成员变量要有区间范围内的判断,或者有两个值进行处理,则实体类包不住.<br>  例如:查询指定日期范围内的用户信息.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //查询指定日期范围内的用户</span></span><br><span class="line"><span class="comment">  List&lt;Users&gt; getByBirthday(Date begin, Date end);</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBirthday&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">      select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      from users</span><br><span class="line">      where birthday between #&#123;arg0&#125; and #&#123;arg1&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span>      </span><br></pre></td></tr></table></figure>

<h2 id="19-入参是map-重点掌握"><a href="#19-入参是map-重点掌握" class="headerlink" title="19.入参是map(重点掌握)"></a>19.入参是map(重点掌握)</h2><p>  如果入参超过一个以上,使用map封装查询条件,更有语义,查询条件更明确.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       //入参是map</span></span><br><span class="line"><span class="comment">    List&lt;Users&gt; getByMap(Map map);</span></span><br><span class="line"><span class="comment">    #&#123;birthdayBegin&#125;:就是map中的key</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;allColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from users</span><br><span class="line">        where birthday between #&#123;birthdayBegin&#125; and #&#123;birthdayEnd&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">        测试类中</span><br><span class="line">​    @Test</span><br><span class="line">​    public void testGetByMap() throws ParseException &#123;</span><br><span class="line">​        Date begin = sf.parse(&quot;1999-01-01&quot;);</span><br><span class="line">​        Date end = sf.parse(&quot;1999-12-31&quot;);</span><br><span class="line">​        Map map = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">​        map.put(&quot;birthdayBegin&quot;,begin);</span><br><span class="line">​        map.put(&quot;birthdayEnd&quot;, end);</span><br><span class="line">​        List<span class="tag">&lt;<span class="name">Users</span>&gt;</span> list = uMapper.getByMap(map);</span><br><span class="line">​        list.forEach(users -&gt; System.out.println(users));</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="20-返回值是map"><a href="#20-返回值是map" class="headerlink" title="20.返回值是map"></a>20.返回值是map</h2><p>  如果返回的数据实体类无法包含,可以使用map返回多张表中的若干数据.返回后这些数据之间没有任何关系.就是Object类型.返回的map的key就是列名或别名.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   //返回值是map(一行)</span></span><br><span class="line"><span class="comment">Map getReturnMap(Integer id);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getReturnMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select username nam,address a</span><br><span class="line">    from users</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  //返回多行的map</span></span><br><span class="line"><span class="comment">List&lt;Map&gt; getMulMap();</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMulMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select username,address</span><br><span class="line">    from users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="21-表之间的关联关系"><a href="#21-表之间的关联关系" class="headerlink" title="21.表之间的关联关系"></a>21.表之间的关联关系</h2><p>  关联关系是有方向的.<br>  1)一对多关联:一个老师可以教多个学生,多个学生只有一个老师来教,站在老师方,就是一对多关联.<br>  2)多对一关联:一个老师可以教多个学生,多个学生只有一个老师来教,站在学生方,就是多对一关联.<br>  3)一对一关联:一个老师辅导一个学生,一个学生只请教一个老师.学生和老师是一对一.<br>  4)多对多关联:园区划线的车位和园区的每一辆车.任意一个车位可以停任意一辆车.任意一车辆车可以停在任意一个车位上.</p>
<h2 id="22-一对多关联关系"><a href="#22-一对多关联关系" class="headerlink" title="22.一对多关联关系"></a>22.一对多关联关系</h2><p>  客户和订单就是典型的一对多关联关系.<br>  一个客户名下可以有多个订单.<br>  客户表是一方,订单表是多方.客户一中持有订单的集合.<br>  使用一对多的关联关系,可以满足查询客户的同时查询该客户名下的所有订单.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.CustomerMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    //根据客户的id查询客户所有信息并同时查询该客户名下的所有订单</span></span><br><span class="line"><span class="comment">   Customer getById(Integer id)</span></span><br><span class="line"><span class="comment">   实体类:</span></span><br><span class="line"><span class="comment">   //customer表中的三个列</span></span><br><span class="line"><span class="comment">   private Integer id;</span></span><br><span class="line"><span class="comment">   private String name;</span></span><br><span class="line"><span class="comment">   private Integer age;</span></span><br><span class="line"><span class="comment">   //该客户名下的所有订单的集合</span></span><br><span class="line"><span class="comment">   private List&lt;Orders&gt; ordersList;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;customermap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多出来的一咕噜绑定ordersList</span></span><br><span class="line"><span class="comment">       Orders实体类:</span></span><br><span class="line"><span class="comment">       private Integer id;</span></span><br><span class="line"><span class="comment">       private String orderNumber;</span></span><br><span class="line"><span class="comment">       private Double orderPrice;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;ordersList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderPrice&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderPrice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;customermap&quot;</span>&gt;</span></span><br><span class="line">       select c.id cid,name,age,o.id oid,orderNumber,orderPrice,customer_id</span><br><span class="line">       from customer c left  join orders o on c.id = o.customer_id</span><br><span class="line">       where c.id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种结局方案</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231045470.png" class="" title="image-20220825231045470">



<p>最终解决方案</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231104400.png" class="" title="image-20220825231104400">

<p>调用OrdersMapper.xml中的按用户ID查该用户名下的所有订单</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231115987.png" class="" title="image-20220825231115987">

<h2 id="23-多对一关联关系"><a href="#23-多对一关联关系" class="headerlink" title="23.多对一关联关系."></a>23.多对一关联关系.</h2><p>  订单和客户就是多对一关联.<br>  站在订单的方向查询订单的同时将客户信息查出.<br>  订单是多方,会持有一方的对象.客户是一方.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bjpowernode.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      //根据主键查询订单,并同时查询下此订单的客户信息</span></span><br><span class="line"><span class="comment">    Orders getById(Integer id);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    手工绑定数据</span></span><br><span class="line"><span class="comment">    实体类</span></span><br><span class="line"><span class="comment">    private Integer id;</span></span><br><span class="line"><span class="comment">    private String orderNumber;</span></span><br><span class="line"><span class="comment">    private Double orderPrice;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //关联下此订单的客户信息,多方持有一方的对象</span></span><br><span class="line"><span class="comment">    private Customer customer;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ordersmap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderPrice&quot;</span> <span class="attr">column</span>=<span class="string">&quot;orderPrice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多出来的一咕噜绑定</span></span><br><span class="line"><span class="comment">        private Integer id;</span></span><br><span class="line"><span class="comment">        private String name;</span></span><br><span class="line"><span class="comment">        private Integer age;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //该客户名下的所有订单的集合,一方持有多方的集合</span></span><br><span class="line"><span class="comment">        private List&lt;Orders&gt; ordersList; //不用管</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ordersmap&quot;</span>&gt;</span></span><br><span class="line">        select o.id oid,orderNumber,orderPrice,customer_id,c.id cid,name,age</span><br><span class="line">        from orders o inner join customer c on o.customer_id = c.id</span><br><span class="line">        where o.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种解决方案</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231219685.png" class="" title="image-20220825231219685">

<p>最终解决方案</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231231961.png" class="" title="image-20220825231231961">

<p>调用CustomerMapper.xml里的按用户主键查询用户信息的方法</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231243679.png" class="" title="image-20220825231243679">

<h2 id="24-一对一关联"><a href="#24-一对一关联" class="headerlink" title="24.一对一关联"></a>24.一对一关联</h2><p>实体类：</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231330813.png" class="" title="image-20220825231330813">

<p>接口：</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231340455.png" class="" title="image-20220825231340455">

<p>mapper.xml</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231351601.png" class="" title="image-20220825231351601">

<h2 id="25-多对多关联"><a href="#25-多对多关联" class="headerlink" title="25.多对多关联"></a>25.多对多关联</h2><p>实体类：</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231520392.png" class="" title="image-20220825231520392">

<p>接口：</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231528811.png" class="" title="image-20220825231528811">

<p>Mapper.xml</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220825231537338.png" class="" title="image-20220825231537338">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结：无论是什么关联关系，如果某方持有另一方的集合，则使用&lt;collection&gt;标签完成映射，如果某方持有另一方的对象，则使用&lt;association&gt;标签完成映射。</span><br></pre></td></tr></table></figure>

<h2 id="26-事务"><a href="#26-事务" class="headerlink" title="26.事务"></a>26.事务</h2><p>  多个操作同时完成,或同时失败称为事务处理.<br>  事务有四个特性:一致性,持久性,原子性,隔离性.</p>
<p>  下订单的业务:<br>  1)订单表中完成增加一条记录的操作<br>  2)订单明细表中完成N条记录的增加<br>  3)商品数据更新(减少)<br>  4)购物车中已支付商品删除<br>  5)用户积分更新(增加)</p>
<p>  在MyBatis框架中设置事务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span>  ===&gt;程序员自己控制处理的提交和回滚</span><br></pre></td></tr></table></figure>

<p>  可设置为自动提交<br>  sqlSession = factory.openSession();  ===&gt;默认是手工提交事务,设置为false也是手工提交事务,如果设置为true,则为自动提交.<br>  sqlSession = factory.openSession(true);  ===&gt;设置为自动提交,在增删改后不需要commit();</p>
<h2 id="27-缓存"><a href="#27-缓存" class="headerlink" title="27.缓存"></a>27.缓存</h2><p>  MyBatis框架提供两级缓存,一级缓存和二级缓存.默认开启一级缓存.</p>
<p>  缓存就是为了提交查询效率.</p>
<p>  使用缓存后,查询的流程:</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/6---%E7%BC%93%E5%AD%98%E6%89%A7%E8%A1%8C%E7%9A%84%E6%B5%81%E7%A8%8B.png" class="" title="6---缓存执行的流程">

<p>  查询时先到缓存里查,如果没有则查询数据库,放缓存一份,再返回客户端.下次再查询的时候直接从缓存返回,不再访问数据库.如果数据库中发生commit()操作,则清空缓存.</p>
<p>  一级缓存使用的是SqlSession的作用域,同一个sqlSession共享一级缓存的数据.</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827112656993.png" class="" title="image-20220827112656993">  

<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827112732301.png" class="" title="image-20220827112732301">

<p>二级缓存使用的是mapper的作用域,不同的sqlSession只要访问的同一个mapper.xml文件,则共享二级缓存作用域.<br>mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存，并且要让实体类实现serializable接口。</p>
<p>1.在核心配置文件    SqlMapConfig.xml中加入设置</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827112848536.png" class="" title="image-20220827112848536">

<ol start="2">
<li><p>在UsersMapper.xml文件中二启二级缓存，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cache&gt;&lt;/cache&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827112936868.png" class="" title="image-20220827112936868"></li>
</ol>
<p>3.实体类必须实现java.io.serializable接口，保证实体可序列化</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827113013000.png" class="" title="image-20220827113013000">

<p>测试</p>
<img src="/2022/08/11/Mybatis/Mybatis%E7%AC%94%E8%AE%B0/Mybatis%E7%AC%94%E8%AE%B0/image-20220827113023846.png" class="" title="image-20220827113023846">



<p>28.什么是ORM<br>  ORM(Object Relational Mapping):对象关系映射<br>  MyBatis框架是ORM非常优秀的框架.<br>  java语言中以对象的方式操作数据,存到数据库中是以表的方式进行存储,对象中的成员变量与表中的列之间的数据互换称为映射.整个这套操作就是ORM.</p>
<p>  持久化的操作：将对象保存到关系型数据库中 ,将关系型数据库中的数据读取出来以对象的形式封装</p>
<p>  MyBatis是持久化层优秀的框架.</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>PrepareStatement完成增删改</title>
    <url>/2022/04/27/Mysql/PrepareStatement%E5%AE%8C%E6%88%90%E5%A2%9E%E5%88%A0%E6%94%B9/PrepareStatement%E5%AE%8C%E6%88%90%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">                conn= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">                String sql=<span class="string">&quot;insert into t_user(id,loginName,loginPwd,realName)values(?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">//              String sql=&quot;upedat t_user set loginPwd=?,realname-? where id=?&quot;;</span></span><br><span class="line"><span class="comment">//              String sql=&quot;delete form t_user where id =?&quot;;</span></span><br><span class="line">                ps=conn.prepareStatement(sql);</span><br><span class="line">                ps.setInt(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">                ps.setString(<span class="number">2</span>,<span class="string">&quot;wzd&quot;</span>);</span><br><span class="line">                ps.setString(<span class="number">3</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">                ps.setString(<span class="number">4</span>,<span class="string">&quot;Zidian Wei&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> count=ps.executeUpdate();</span><br><span class="line">                System.out.println(count);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记</title>
    <url>/2022/09/08/Spring/Spring%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-什么是Spring框架"><a href="#1-什么是Spring框架" class="headerlink" title="1.什么是Spring框架"></a>1.什么是Spring框架</h2><p>  它是一个容器.它是整合其它框架的框架.它的核心是IOC和AOP.它由20多个模块构成.它在很多领域都提供优秀的解决方案.</p>
<p>  我们课程里学Spring , SpringMVC, SpringBoot,  SpringCloud</p>
<h2 id="2-Spring的特点"><a href="#2-Spring的特点" class="headerlink" title="2.Spring的特点"></a>2.Spring的特点</h2><p>  1)轻量级<br>  由20多个模块构成,每个jar包都很小,小于1M,核心包也就3M左右.<br>  对代码无污染.</p>
<p>  2)面向接口编程<br>  使用接口,就是面向灵活,项目的可扩展性,可维护性都极高.接口不关心实现类的类型.使用时接口指向实现类,切换实现类即可切换整个功能.</p>
<p>  3)AOP:面向切面编程<br>  就是将公共的,通用的,重复的代码单独开发,在需要的时候反织回去.底层的原理是动态代理.</p>
<p>  4)整合其它框架<br>  它整合后使其它框架更易用.</p>
<h2 id="3-什么是IOC"><a href="#3-什么是IOC" class="headerlink" title="3.什么是IOC"></a>3.什么是IOC</h2><p>  控制反转IoC(Inversion of Control)是一个概念，是一种思想。由Spring容器进行对象的创建和依赖注入.程序员在使用时直接取出使用.</p>
<p>  正转:由程序员进行对象的创建和依赖注入称为正转.程序员说了算.<br>  Student stu = new Student();   ===&gt;程序员创建对象<br>  stu.setName(“张三”);           ===&gt;程序员进行赋值<br>  stu.setAge(22);</p>
<p>  反转:由Spring容器创建对象和依赖注入称为反转,将控制权从程序员手中夺走,由给Spring容器,称为反转. 容器说了算.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span>     ===&gt;Spring容器负责对象的创建</span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span>                    ===&gt;Spring容器依赖注入值</span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  切记:Spring容器在启动时,就创建所有的对象stu….</p>
<h2 id="4-基于xml的IOC"><a href="#4-基于xml的IOC" class="headerlink" title="4.基于xml的IOC"></a>4.基于xml的IOC</h2><p>  1)创建对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  2)给创建的对象赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">A.使用setter注入</span><br><span class="line">      注入分为简单类型注入和引用类型注入</span><br><span class="line">      简单类型注入值使用value属性</span><br><span class="line">      引用类型注入值使用ref属性</span><br><span class="line">      必须要注意:使用setter注入必须提供无参的构造方法,必须提供setXXX()方法.</span><br><span class="line"><span class="comment">&lt;!--创建学生对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo2.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    ===&gt;简单类型注入</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  ===&gt;引用类型注入</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建学校对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo2.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">B.使用构造方法注入</span><br><span class="line">Student stu = new Student(&quot;张三&quot;,22);</span><br><span class="line">   a.使用构造方法的参数名称进行注入值</span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.School&quot;</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   b.使用构造方法参数的下标注入值</span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.Student&quot;</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;钱七&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   c.使用默认的构造方法的参数的顺序注入值</span><br><span class="line">   		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuSequence&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo3.Student&quot;</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;陈十&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-项目案例"><a href="#5-项目案例" class="headerlink" title="5.项目案例"></a>5.项目案例</h2><p>  使用三层架构进行用户的插入操作.<br>  界面层,业务逻辑层,数据访问层(模拟).</p>
<p>  Spring会接管三层架构中哪些对象的创建?界面层的对象,业务逻辑层的对象,数据访问层的对象.</p>
<p>  非Spring接管下的三层项目构建:<br>  实体类<br>  com.bjpowernode.pojo  Users<br>  数据访问层<br>  com.bjpowernode.dao   UsersMapper.java(接口)<br>                          UsersMapperImpl.java(实现类)<br>  业务逻辑层<br>  com.bjpowernode.service   UsersService.java(接口)<br>                              UsersServiceImpl.java(实现类 )<br>  界面层<br>  com.bjpowernode.controller  UsersController.java</p>
<h2 id="6-基于注解的IOC"><a href="#6-基于注解的IOC" class="headerlink" title="6.基于注解的IOC"></a>6.基于注解的IOC</h2><p>  也称为DI(Dependency Injection),它是IOC的具体实现的技术.</p>
<p>  基于注解的IOC,必须要在Spring的核心配置文件中添加包扫描.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.s01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  药:  创建对象并依赖注入<br>  汤:   xml    注解annotation<br>  1)创建对象的注解<br>    @Component:可以创建任意对象.创建的对象的默认名称是类名的驼峰命名法.也可以指定对象的名称@Component(“指定名称”).<br>    @Controller:专门用来创建控制器的对象(Servlet),这种对象可以接收用户的请求,可以返回处理结果给客户端.<br>    @Service:专门用来创建业务逻辑层的对象,负责向下访问数据访问层,处理完毕后的结果返回给界面层.<br>    @Repository:专门用来创建数据访问层的对象,负责数据库中的增删改查所有操作.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">案例:</span><br><span class="line"><span class="meta">@Component(&quot;stu&quot;)</span>  <span class="comment">//交给Spring去创建对象,就是在容器启动时创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span>  ===&gt;简单类型的值注入</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;22&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    ...&#125;</span><br></pre></td></tr></table></figure>

<p>  2)依赖注入的注解<br>    简单类型(8种基本类型+String)的注入<br>    @Value:用来给简单类型注入值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">引用类型的注入</span><br><span class="line">A.@Autowired:使用类型注入值,从整个Bean工厂中搜索同源类型的对象进行注入.</span><br><span class="line">同源类型也可注入.</span><br><span class="line">什么是同源类型:</span><br><span class="line">  a.被注入的类型(Student中的school)与注入的类型是完全相同的类型</span><br><span class="line">  b.被注入的类型(Student中的school父)与注入的类型(子)是父子类</span><br><span class="line">  c.被注入的类型(Student中的school接口)与注入的类型(实现类)是接口和实现类的类型</span><br><span class="line"></span><br><span class="line">注意:在有父子类的情况下,使用按类型注入,就意味着有多个可注入的对象.此时按照名称进行二次筛选,选中与被注入对象相同名称的对象进行注入.</span><br><span class="line">  </span><br><span class="line">B.@Autowired</span><br><span class="line">  @Qualifier(&quot;名称&quot;):使用名称注入值,从整个Bean工厂中搜索相同名称的对象进行注入.</span><br><span class="line"></span><br><span class="line">注意:如果有父子类的情况下,直接按名称进行注入值.</span><br></pre></td></tr></table></figure>

<h2 id="7-添加包扫描的方式"><a href="#7-添加包扫描的方式" class="headerlink" title="7.添加包扫描的方式"></a>7.添加包扫描的方式</h2><p>  1)单个包扫描(推荐使用)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.service.impl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>  2)多个包扫描,多个包之间以逗号或空格或分号分隔</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.controller com.bjpowernode.service ,com.bjpowernode.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>  3)扫描根包(不推荐)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    会降低容器启动的速度,导致多做无用功.</span><br></pre></td></tr></table></figure>

<h2 id="8-为应用指定多个-Spring-配置文件"><a href="#8-为应用指定多个-Spring-配置文件" class="headerlink" title="8.为应用指定多个 Spring 配置文件"></a>8.为应用指定多个 Spring 配置文件</h2><p>  当项目越来越大,需要多人合作开发,一个配置就存在很大隐患.<br>  1)拆分配置文件的策略<br>    A.按层拆</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">applicationContext_controller.xml        </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersController&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookController&quot;</span>&gt;</span></span><br><span class="line">   applicationContext_service.xml        </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersService&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookService&quot;</span>&gt;</span></span><br><span class="line">   applicationContext_mapper.xml        </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   B.按功能拆</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">applicationContext_users.xml        </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersController&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;uMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">applicationContext_book.xml      </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookController&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.controller.BookMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-spring配置文件的整合"><a href="#9-spring配置文件的整合" class="headerlink" title="9.spring配置文件的整合"></a>9.spring配置文件的整合</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1)单个文件导入 </span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicatoinContext_mapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicatoinContext_service.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicatoinContext_controller.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">2)批量导入</span><br><span class="line">  <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicatoinContext_*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-面向切面编程AOP"><a href="#10-面向切面编程AOP" class="headerlink" title="10.面向切面编程AOP"></a>10.面向切面编程AOP</h2><p>  AOP（Aspect Orient Programming），面向切面编程。<br>  切面:公共的,通用的,重复的功能称为切面,面向切面编程就是将切面提取出来,单独开发,在需要调用的方法中通过动态代理的方式进行织入.</p>
<h2 id="11-手写AOP框架"><a href="#11-手写AOP框架" class="headerlink" title="11.手写AOP框架"></a>11.手写AOP框架</h2><p>  业务:图书购买业务<br>  切面:事务<br>  1)第一个版本:业务和切面紧耦合在一起,没有拆分.<br>  2)第二个版本:使用子类代理的方式拆分业务和切面.<br>  3)第三个版本:使用静态代理拆分业务和切面.业务和业务接口已拆分.此时切面紧耦合在业务中.<br>  4)第四个版本:使用静态代理拆分业务和业务接口,切面和切面接口.</p>
<img src="/2022/09/08/Spring/Spring%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/2---%E7%AC%AC%E5%9B%9B%E4%B8%AA%E7%89%88%E6%9C%AC%E5%88%86%E6%9E%90.png" class="" title="2---第四个版本分析">

<p>  5)第五个版本:使用动态代理完成第四个版本的优化.</p>
<h2 id="12-Spring支持的AOP的实现"><a href="#12-Spring支持的AOP的实现" class="headerlink" title="12.Spring支持的AOP的实现"></a>12.Spring支持的AOP的实现</h2><p>  Spring支持AOP的编程，常用的有以下几种：<br>  1)Before通知：在目标方法被调用前调用，涉及接口org.springframework.aop.MethodBeforeAdvice;<br>  2)After通知：在目标方法被调用后调用，涉及接口为org.springframework.aop.AfterReturningAdvice;<br>  3)Throws通知：目标方法抛出异常时调用，涉及接口org.springframework.aop.ThrowsAdvice;<br>  4)Around通知：拦截对目标对象方法调用，涉及接口为org.aopalliance.intercept.MethodInterceptor。</p>
<h2 id="13-AOP常用的术语"><a href="#13-AOP常用的术语" class="headerlink" title="13.AOP常用的术语"></a>13.AOP常用的术语</h2><p>  1)切面:就是那些重复的,公共的,通用的功能称为切面,例如:日志,事务,权限.<br>  2)连接点:就是目标方法.因为在目标方法中要实现目标方法的功能和切面功能.<br>  3)切入点(Pointcut):指定切入的位置,多个连接点构成切入点.切入点可以是一个目标方法,可以是一个类中的所有方法,可以是某个包下的所有类中的方法.<br>  4)目标对象:操作谁,谁就是目标对象.<br>  5)通知(Advice):来指定切入的时机.是在目标方法执行前还是执行后还是出错时,还是环绕目标方法切入切面功能.</p>
<h2 id="14-什么是AspectJ框架"><a href="#14-什么是AspectJ框架" class="headerlink" title="14.什么是AspectJ框架"></a>14.什么是AspectJ框架</h2><p>  AspectJ 是一个优秀面向切面的框架，它扩展了 Java 语言，提供了强大的切面实现。它因为是基于java语言开发的,所以无缝扩展.easy to learn and use（易学易用）.</p>
<h2 id="15-AspectJ常见通知类型"><a href="#15-AspectJ常见通知类型" class="headerlink" title="15.AspectJ常见通知类型"></a>15.AspectJ常见通知类型</h2><p>  AspectJ 中常用的通知有四种类型：<br>  1)前置通知@Before<br>  2)后置通知@AfterReturning<br>  3)环绕通知@Around<br>  4)最终通知@After<br>  5)定义切入点@Pointcut(了解)</p>
<h2 id="16-AspectJ-的切入点表达式-掌握"><a href="#16-AspectJ-的切入点表达式-掌握" class="headerlink" title="16.AspectJ 的切入点表达式(掌握)"></a>16.AspectJ 的切入点表达式(掌握)</h2><p>  规范的公式:<br>  execution(访问权限 方法返回值 方法声明(参数) 异常类型)<br>  简化后的公式:<br>  execution( 方法返回值 方法声明(参数) )</p>
<p>  用到的符号:</p>
<ul>
<li>代码任意个任意的字符(通配符)<br>..  如果出现在方法的参数中,则代表任意参数<br>  如果出现在路径中,则代表本路径及其所有的子路径</li>
</ul>
<p>  示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">execution(public * *(..)) :任意的公共方法</span><br><span class="line">execution(* set*(..)):任何一个以“set”开始的方法</span><br><span class="line">execution(* com.xyz.service.impl.*.*(..)):任意的返回值类型,在com.xyz.service.impl包下的任意类的任意方法的任意参数</span><br><span class="line">execution(* com.xyz.service..*.*(..)):任意的返回值类型 ,在com.xyz.service及其子包下的任意类的任意方法的任意参数  </span><br><span class="line"> 										com.xyz.service.a.b.*.*(..)  com.xyz.service.*.*(..)</span><br><span class="line">execution(* *..service.*.*(..)):service之前可以有任意的子包</span><br><span class="line">execution(* *.service.*.*(..)):service之前只有一个包</span><br></pre></td></tr></table></figure>

<h2 id="17-AspectJ的前置通知-Before"><a href="#17-AspectJ的前置通知-Before" class="headerlink" title="17.AspectJ的前置通知@Before"></a>17.AspectJ的前置通知@Before</h2><p>  在目标方法执行前切入切面功能.在切面方法中不可以获得目标方法的返回值,只能得到目标方法的签名.</p>
<p>  实现的步骤:<br>  添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">1)创建业务接口</span><br><span class="line">2)创建业务实现</span><br><span class="line">3)创建切面类,实现切面方法</span><br><span class="line">4)在applicationContext.xml文件中进行切面绑定</span><br></pre></td></tr></table></figure>

<p>  项目案例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//交给AspectJ的框架去识别切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 所有切面的功能都是由切面方法来实现的</span></span><br><span class="line"><span class="comment">可以将各种切面都在此类中进行开发</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 前置通知的切面方法的规范</span></span><br><span class="line"><span class="comment">1)访问权限是public</span></span><br><span class="line"><span class="comment">* 2)方法的返回值是void</span></span><br><span class="line"><span class="comment">3)方法名称自定义</span></span><br><span class="line"><span class="comment">* 4)方法没有参数,如果有也只能是JoinPoint类型</span></span><br><span class="line"><span class="comment">5)必须使用<span class="doctag">@Before</span>注解来声明切入的时机是前切功能和切入点</span></span><br><span class="line"><span class="comment">*   参数:value  指定切入点表达式</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 业务方法</span></span><br><span class="line"><span class="comment">public String doSome(String name, int age)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="meta">@Before(value = &quot;execution(public String com.bjpowernode.s01.SomeServiceImpl.*(String,int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public * com.bjpowernode.s01.SomeServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution( * com.bjpowernode.s01.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法的签名:&quot;</span>+jp.getSignature());</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法的参数:&quot;</span>+ Arrays.toString(jp.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution( * com.bjpowernode.s01..*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution( * *(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切面方法中的前置通知功能实现............&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-AspectJ框架切换JDK动态代理和CGLib动态代理"><a href="#18-AspectJ框架切换JDK动态代理和CGLib动态代理" class="headerlink" title="18.AspectJ框架切换JDK动态代理和CGLib动态代理"></a>18.AspectJ框架切换JDK动态代理和CGLib动态代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy &gt;&lt;/aop:aspectj-autoproxy&gt;  ===&gt;默认是JDK动态代理,取时必须使用接口类型</span><br><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;&gt;&lt;/aop:aspectj-autoproxy&gt;  ==&gt;设置为CGLib子类代理,可以使用接口和实现类接</span><br><span class="line">记住:使用接口来接,永远不出错.</span><br></pre></td></tr></table></figure>

<h2 id="19-AfterReturning后置通知"><a href="#19-AfterReturning后置通知" class="headerlink" title="19.@AfterReturning后置通知"></a>19.@AfterReturning后置通知</h2><p><strong>后置通知是在目标方法执行后切入切面功能,可以得到目标方法的返回值.</strong></p>
<p><strong>如果目标方法的返回值是简单类型(8种基本类型+String)则不可改变.</strong></p>
<p><strong>如果目标方法的返回值是引用类型则可以改变.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 后置通知的方法的规范</span></span><br><span class="line"><span class="comment">     1)访问权限是public</span></span><br><span class="line"><span class="comment">   * 2)方法没有返回值void</span></span><br><span class="line"><span class="comment">   * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">   * 4)方法有参数(也可以没有参数,如果目标方法没有返回值,则可以写无参的方法,但一般会写有参,这样可以处理无参可以处理有参),这个切面方法的参数就是目标方法的返回值</span></span><br><span class="line"><span class="comment">   * 5)使用<span class="doctag">@AfterReturning</span>注解表明是后置通知</span></span><br><span class="line"><span class="comment">   * 参数:</span></span><br><span class="line"><span class="comment">   *value:指定切入点表达式</span></span><br><span class="line"><span class="comment">   *returning:指定目标方法的返回值的名称,则名称必须与切面方法的参数名称一致.</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">        <span class="meta">@AfterReturning(value = &quot;execution(* com.bjpowernode.s02.*.*(..))&quot;,returning = &quot;obj&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知功能实现..............&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(obj != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    obj = obj.toString().toUpperCase();</span><br><span class="line">                    System.out.println(<span class="string">&quot;在切面方法中目标方法的返回值:&quot;</span>+obj);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">                    Student stu = (Student) obj;</span><br><span class="line">                    stu.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;在切面方法中目标方法的返回值:&quot;</span>+stu);</span><br><span class="line">                &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="20-环绕通知-Around"><a href="#20-环绕通知-Around" class="headerlink" title="20.环绕通知@Around"></a>20.环绕通知@Around</h2><p>  它是通过拦截目标方法的方式 ,在目标方法前后增强功能的通知.它是功能最强大的通知,一般事务使用此通知.它可以轻易的改变目标方法的返回值.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 环绕通知方法的规范</span></span><br><span class="line"><span class="comment">     * 1)访问权限是public</span></span><br><span class="line"><span class="comment">     * 2)切面方法有返回值,此返回值就是目标方法的返回值</span></span><br><span class="line"><span class="comment">     * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">     * 4)方法有参数,此参数就是目标方法</span></span><br><span class="line"><span class="comment">     * 5)回避异常Throwable</span></span><br><span class="line"><span class="comment">     * 6)使用<span class="doctag">@Around</span>注解声明是环绕通知</span></span><br><span class="line"><span class="comment">     *   参数:</span></span><br><span class="line"><span class="comment">           *value:指定切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.bjpowernode.s03.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//前切功能实现</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕通知中的前置功能实现............&quot;</span>);</span><br><span class="line">    <span class="comment">//目标方法调用</span></span><br><span class="line">    Object obj = pjp.proceed(pjp.getArgs());</span><br><span class="line">    <span class="comment">//后切功能实现</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕通知中的后置功能实现............&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj.toString().toUpperCase();  <span class="comment">//改变了目标方法的返回值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="21-最终通知-After"><a href="#21-最终通知-After" class="headerlink" title="21.最终通知@After"></a>21.最终通知@After</h2><p>  无论目标方法是否正常执行,最终通知的代码都会被执行.</p>
<h2 id="22-给切入点表达式起别名-Pointcut"><a href="#22-给切入点表达式起别名-Pointcut" class="headerlink" title="22.给切入点表达式起别名@Pointcut"></a>22.给切入点表达式起别名@Pointcut</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  如果多个切面切入到同一个切入点,可以使用别名简化开发.</span><br><span class="line">  使用<span class="meta">@Pointcut</span>注解,创建一个空方法,此方法的名称就是别名.</span><br><span class="line">    <span class="meta">@Aspect</span></span><br><span class="line">	<span class="meta">@Component</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	     * 最终通知方法的规范</span></span><br><span class="line"><span class="comment">	     * 1)访问权限是public</span></span><br><span class="line"><span class="comment">	     * 2)方法没有返回值</span></span><br><span class="line"><span class="comment">	     * 3)方法名称自定义</span></span><br><span class="line"><span class="comment">	     * 4)方法没有参数,如果有也只能是JoinPoint</span></span><br><span class="line"><span class="comment">	     * 5)使用<span class="doctag">@After</span>注解表明是最终通知</span></span><br><span class="line"><span class="comment">	     *   参数:</span></span><br><span class="line"><span class="comment">	     *     value:指定切入点表达式</span></span><br><span class="line"><span class="comment">	     */</span></span><br><span class="line">    <span class="meta">@After(value = &quot;mycut()&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">	        System.out.println(<span class="string">&quot;最终通知的功能........&quot;</span>);</span><br><span class="line">	 &#125;</span><br><span class="line">    <span class="meta">@Before(value = &quot;mycut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知的功能........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mycut()&quot;,returning = &quot;obj&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterReturning</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知的功能........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(value = &quot;mycut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知中的前置通知的功能........&quot;</span>);</span><br><span class="line">        Object obj = pjp.proceed(pjp.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知中的后置通知的功能........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.bjpowernode.s04.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mycut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="23-SM整合的步骤"><a href="#23-SM整合的步骤" class="headerlink" title="23.SM整合的步骤"></a>23.SM整合的步骤</h2><p>  1)建表<br>  2)新建项目,选择quickstart模板<br>  3)修改目录<br>  4)修改pom.xml文件,添加相关的依赖(使用老师提供)<br>  5)添加MyBatis相应的模板(SqlMapConfig.xml和XXXMapper.xml文件)<br>  6)添加SqlMapConfig.xml文件(MyBatis核心配置文件),并拷贝jdbc.propertiest属性文件到resources目录下<br>  7)添加applicationContext_mapper.xml<br>  8)添加applicationContext_service.xml<br>  9)添加Users实体类,Accounts实体类<br>  10)添加mapper包,添加UsersMapper接口和UsersMapper.xml文件并开发<br>  11)添加service包,添加UsersService接口和UsersServiceImpl实现类<br>  12)添加测试类进行功能测试</p>
<h2 id="24-基于注解的事务添加步骤"><a href="#24-基于注解的事务添加步骤" class="headerlink" title="24.基于注解的事务添加步骤"></a>24.基于注解的事务添加步骤</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1)在applicationContext_service.xml文件中添加事务管理器</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--因为事务必须关联数据库处理,所以要配置数据源--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2)在applicationContext_service.xml文件中添加事务的注解驱动</span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line">3)在业务逻辑的实现类上添加注解@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">  REQUIRED表示增删改操作时必须添加的事务传播特性</span><br></pre></td></tr></table></figure>

<h2 id="25-Transactional注解参数详解"><a href="#25-Transactional注解参数详解" class="headerlink" title="25.@Transactional注解参数详解"></a>25.@Transactional注解参数详解</h2><p>​    @Transactional(propagation = Propagation.REQUIRED,//事务的传播特性<br>​            noRollbackForClassName = “ArithmeticException”, //指定发生什么异常不回滚,使用的是异常的名称<br>​            noRollbackFor = ArithmeticException.class,//指定发生什么异常不回滚,使用的是异常的类型<br>​            rollbackForClassName = “”,//指定发生什么异常必须回滚<br>​            rollbackFor = ArithmeticException.class,//指定发生什么异常必须回滚<br>​            timeout = -1, //连接超时设置,默认值是-1,表示永不超时<br>​            readOnly = false, //默认是false,如果是查询操作,必须设置为true.<br>​            isolation = Isolation.DEFAULT//使用数据库自已的隔离级别<br>​    )</p>
<h2 id="26-Spring的两种事务处理方式"><a href="#26-Spring的两种事务处理方式" class="headerlink" title="26.Spring的两种事务处理方式"></a>26.Spring的两种事务处理方式</h2><p>  1)注解式的事务<br>    使用@Transactional注解完成事务控制,此注解可添加到类上,则对类中所有方法执行事务的设定.此注解可添加到方法上,只是对此方法执行事务的处理.</p>
<p>  2)声明式事务(必须掌握),在配置文件中添加一次,整个项目遵循事务的设定.</p>
<h2 id="27-Spring中事务的五大隔离级别"><a href="#27-Spring中事务的五大隔离级别" class="headerlink" title="27.Spring中事务的五大隔离级别"></a>27.Spring中事务的五大隔离级别</h2><p>  1).未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据<br>  2).提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)<br>  3).可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读，但是innoDB解决了幻读<br>  4).串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞<br>  5).使用数据库默认的隔离级别isolation = Isolation.DEFAULT<br>    MySQL：mysql默认的事务处理级别是’REPEATABLE-READ’,也就是可重复读<br>    Oracle：oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别。默认系统事务隔离级别是READ COMMITTED,也就是读已提交</p>
<h2 id="28-为什么添加事务管理器"><a href="#28-为什么添加事务管理器" class="headerlink" title="28.为什么添加事务管理器"></a>28.为什么添加事务管理器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">JDBC:  Connection   con.commit();   con.rollback();</span><br><span class="line">MyBatis:  SqlSession   sqlSession.commit();  sqlSession.rollback();</span><br><span class="line">Hibernate:  Session    session.commit();   session.rollback();</span><br><span class="line"></span><br><span class="line">事务管理器用来生成相应技术的连接+执行语句的对象.</span><br><span class="line">如果使用MyBatis框架,必须使用DataSourceTransactionManager类完成处理</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--因为事务必须关联数据库处理,所以要配置数据源--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">项目中的所有事务,必须添加到业务逻辑层上.</span><br></pre></td></tr></table></figure>

<h2 id="29-Spring事务的传播特性"><a href="#29-Spring事务的传播特性" class="headerlink" title="29.Spring事务的传播特性"></a>29.Spring事务的传播特性</h2><p>  多个事务之间的合并,互斥等都可以通过设置事务的传播特性来解决.<br>  常用<br>  PROPAGATION_REQUIRED：必被包含事务(增删改必用)<br>  PROPAGATION_REQUIRES_NEW：自己新开事务，不管之前是否有事务<br>  PROPAGATION_SUPPORTS：支持事务，如果加入的方法有事务，则支持事务，如果没有，不单开事务<br>  PROPAGATION_NEVER：不能运行中事务中，如果包在事务中，抛异常<br>  PROPAGATION_NOT_SUPPORTED：不支持事务，运行在非事务的环境<br>  不常用<br>  PROPAGATION_MANDATORY：必须包在事务中，没有事务则抛异常<br>  PROPAGATION_NESTED：嵌套事务</p>
<h2 id="30-为了测试传播特性改造项目"><a href="#30-为了测试传播特性改造项目" class="headerlink" title="30.为了测试传播特性改造项目"></a>30.为了测试传播特性改造项目</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="meta">@Service</span>  <span class="comment">//交给Spring去创建对象</span></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;    </span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        UsersMapper usersMapper;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        AccountsService accountsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = usersMapper.insert(users);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户增加成功!num=&quot;</span>+num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用帐户的增加操作,调用的帐户的业务逻辑层的功能</span></span><br><span class="line">        num = accountsService.save(<span class="keyword">new</span> Accounts(<span class="number">300</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;帐户好的呢!&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="31-声明式事务"><a href="#31-声明式事务" class="headerlink" title="31.声明式事务"></a>31.声明式事务</h2><p>  Spring非常有名的事务处理方式.声明式事务.<br>  要求项目中的方法命名有规范<br>  1)完成增加操作包含    add  save  insert  set<br>  2)更新操作包含   update   change  modify<br>  3)删除操作包含   delete   drop    remove  clear<br>  4)查询操作包含   select   find    search  get </p>
<p>  配置事务切面时可以使用通配符*来匹配所有方法<br>  <!--添加事务管理器--><br>    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"><br>        <property name="dataSource" ref="dataSource"></property><br>    </bean></p>
<pre><code>&lt;!--配置事务切面--&gt;
&lt;tx:advice id=&quot;myadvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;
    &lt;tx:attributes&gt;
        &lt;tx:method name=&quot;*select*&quot; read-only=&quot;true&quot;/&gt;
        &lt;tx:method name=&quot;*find*&quot; read-only=&quot;true&quot;/&gt;
        &lt;tx:method name=&quot;*search*&quot; read-only=&quot;true&quot;/&gt;
        &lt;tx:method name=&quot;*get*&quot; read-only=&quot;true&quot;/&gt;
        &lt;tx:method name=&quot;*insert*&quot; propagation=&quot;REQUIRED&quot; no-rollback-for=&quot;ArithmeticException&quot;/&gt;
        &lt;tx:method name=&quot;*add*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*save*&quot; propagation=&quot;REQUIRED&quot; no-rollback-for=&quot;ArithmeticException&quot;/&gt;
        &lt;tx:method name=&quot;*set*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*update*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*change*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*modify*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*remove*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*drop*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*clear*&quot; propagation=&quot;REQUIRED&quot;/&gt;
        &lt;tx:method name=&quot;*&quot; propagation=&quot;SUPPORTS&quot;/&gt;
    &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;
&lt;!--绑定切面和切入点--&gt;
&lt;aop:config&gt;
    &lt;aop:pointcut id=&quot;mycut&quot; expression=&quot;execution(* com.bjpowernode.service.impl.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;
    &lt;aop:advisor  advice-ref=&quot;myadvice&quot; pointcut-ref=&quot;mycut&quot;&gt;&lt;/aop:advisor&gt;
&lt;/aop:config&gt;
</code></pre>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><img src="/2022/09/08/Spring/Spring%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/Spring.png" class="" title="Spring">









<p>​    </p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ol>
<li><p>为什么要使用 Spring Boot</p>
<p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p>
<p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p>
<p>需要了解其他框架配置规则。</p>
</li>
<li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p>
<p>拿来就可以使用了。</p>
</li>
<li><p>SpringBoot开发效率高，使用方便多了</p>
</li>
</ol>
<h2 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h2><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p>
<p>使用两个注解：</p>
<p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p>
<p>2）@Bean：声明对象，把对象注入到容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="keyword">package</span> com.bjpowernode.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.vo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的</span></span><br><span class="line"><span class="comment"> *       位置：在类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  SpringConfig这个类就相当于beans.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建方法，方法的返回值是对象。 在方法的上面加入<span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">     * 方法的返回值对象就注入到容器中。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>: 把对象注入到spring容器中。 作用相当于&lt;bean&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *     位置：方法的上面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *     说明：<span class="doctag">@Bean</span>,不指定对象的名称，默认是方法名是 id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">createStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student s1  = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">26</span>);</span><br><span class="line">        s1.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 指定对象在容器中的名称（指定&lt;bean&gt;的id属性）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>的name属性，指定对象的名称（id）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;lisiStudent&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">makeStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student s2  = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s2.setAge(<span class="number">22</span>);</span><br><span class="line">        s2.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-2-ImporResource"><a href="#1-2-ImporResource" class="headerlink" title="1.2 @ImporResource"></a>1.2 @ImporResource</h2><p>@ImportResource 作用导入其他的xml配置文件， 等于在xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resources</span>=<span class="string">&quot;其他配置文件&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(value =&#123; &quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h2><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p>
<p>在程序代码之外提供数据。</p>
<p>步骤：</p>
<ol>
<li>在resources目录下，创建properties文件， 使用k=v的格式提供数据</li>
<li>在PropertyResource 指定properties文件的位置</li>
<li>使用@Value（value=”${key}”）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(value =&#123; &quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:config.properties&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.bjpowernode.vo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第二-章-Spring-Boot"><a href="#第二-章-Spring-Boot" class="headerlink" title="第二 章 Spring Boot"></a>第二 章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p>
<p>特点：</p>
<p>Create stand-alone Spring applications</p>
<p>创建spring应用</p>
<p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p>
<p>内嵌的tomcat， jetty ， Undertow </p>
<p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p>
<p>提供了starter起步依赖，简化应用的配置。   </p>
<p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p>
<p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p>
<p>Automatically configure Spring and 3rd party libraries whenever possible</p>
<p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p>
<p>Provide production-ready features such as metrics, health checks, and externalized configuration</p>
<p>提供了健康检查， 统计，外部化配置</p>
<p>Absolutely no code generation and no requirement for XML configuration</p>
<p>不用生成代码， 不用使用xml，做配置</p>
<h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p>
<p>SpringBoot项目的结构：</p>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20210115152427829.png" class="" title="image-20210115152427829">





<h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20210115155556662.png" class="" title="image-20210115155556662">





<h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">复合注解：由</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line"><span class="number">1.</span><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">说明：使用了<span class="meta">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，</span><br><span class="line">    可以使用Bean声明对象，注入到容器</span><br></pre></td></tr></table></figure>

<p>2.@EnableAutoConfiguration</p>
<p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p>
<p>3.@ComponentScan</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。</span><br><span class="line">默认扫描的包： <span class="meta">@ComponentScan</span>所在的类所在的包和子包。</span><br></pre></td></tr></table></figure>



<h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p>
<p>扩展名有： properties( k=v) ;  yml ( k: v)</p>
<p>使用application.properties,   application.yml</p>
<p>例1：application.properties设置 端口和上下文</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment">#设置访问应用上下文路径， contextpath</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/myboot</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例2： application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/myboot2</span></span><br></pre></td></tr></table></figure>



<h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p>
<p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p>
<p>使用多环境配置文件，可以方便的切换不同的配置。</p>
<p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p>
<p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p>
<p>创建测试者使用的配置： application-test.properties</p>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20220924135210436.png" class="" title="image-20220924135210436">

<p>使用哪个配置文件就在application.properties文件中设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>



<h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p>
<p>属性：prefix 配置文件中的某些key的开头的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;school&quot;)</span></span><br><span class="line"><span class="comment">//意思是去找配置文件，以school为开头的后边属性名字如果和成员变量一样，就将值注入到成员变量中。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWebsite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWebsite</span><span class="params">(String website)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SchoolInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, website=&#x27;&quot;</span> + website + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置端口号</span><br><span class="line">server.port=8082</span><br><span class="line">#context-path</span><br><span class="line">server.servlet.context-path=/myboot</span><br><span class="line"></span><br><span class="line">#自定义key=value</span><br><span class="line">school.name=动力节点</span><br><span class="line">school.website=www.bjpowernode.com</span><br><span class="line">school.address=北京的大兴区</span><br><span class="line"></span><br><span class="line">site=www.bjpowernode.com</span><br></pre></td></tr></table></figure>





<h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p>
<p>使用jsp需要配置：</p>
<p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>如果需要使用servlet， jsp，jstl的功能</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>创建一个存放jsp的目录，一般叫做webapp</li>
</ol>
<p>​    index.jsp</p>
<ol start="4">
<li>需要在pom.xml指定jsp文件编译后的存放目录。</li>
</ol>
<p>  META-INF/resources</p>
<p>5）创建Controller， 访问jsp</p>
<p>6）在application.propertis文件中配置视图解析器</p>
<h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p>
<p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> run(<span class="keyword">new</span> Class[]&#123;primarySource&#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigurableApplicationContext : 接口，是ApplicationContext的子接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span></span></span><br></pre></td></tr></table></figure>

<p>手工获取容器对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//获取容器对象</span></span><br><span class="line"><span class="comment">//ConfigurableApplicationContext ctx  = SpringApplication.run(Application.class, args);</span></span><br><span class="line">ApplicationContext ctx  = SpringApplication.run(Application.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器者获取对象</span></span><br><span class="line">UserService userService = (UserService) ctx.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">userService.sayHello(<span class="string">&quot;李四&quot;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p>
<p>可以完成自定义的在容器对象创建好的一些操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p>
<h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p>
<p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p>
<p>实现自定义拦截器：</p>
<ol>
<li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>2.需在SpringMVC的配置文件中，声明拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    	&lt;mvc:path=&quot;url&quot; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;拦截器类全限定名称&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>SpringBoot中注册拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器对象， 注入到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        HandlerInterceptor interceptor = <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定拦截的请求uri地址</span></span><br><span class="line">        String path []= &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//指定不拦截的地址</span></span><br><span class="line">        String excludePath  [] = &#123;<span class="string">&quot;/user/login&quot;</span>&#125;;</span><br><span class="line">        registry.addInterceptor(interceptor)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Configuration+WebMvcConfigurer接口的配置类其实是<code>Spring</code>内部的一种配置方式，可以自定义一些Handler，Interceptor，ViewResolver，MessageConverter等等的东西对springmvc框架进行配置</p>
<h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p>
<p>使用步骤：</p>
<ol>
<li>创建Servlet类。 创建类继承HttpServlet</li>
<li>注册Servlet ，让框架能找到Servlet</li>
</ol>
<p> 例子：</p>
<p>1.创建自定义Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//使用HttpServletResponse输出数据，应答结果</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out  = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;===执行的是Servlet==&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册Servlet</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplictionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法， 注册Servlet对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class="line">        <span class="comment">//第一个参数是 Servlet对象， 第二个是url地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ServletRegistrationBean bean =</span></span><br><span class="line">                <span class="comment">//new ServletRegistrationBean( new MyServlet(),&quot;/myservlet&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">        bean.setServlet( <span class="keyword">new</span> MyServlet());</span><br><span class="line">        bean.addUrlMappings(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/test&quot;</span>); <span class="comment">// &lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p>
<p>在框架中使用过滤器：</p>
<ol>
<li>创建自定义过滤器类</li>
<li>注册Filter过滤器对象</li>
</ol>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了MyFilter，doFilter &quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplicationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean  = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter( <span class="keyword">new</span> MyFilter());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p>
<p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p>
<p>第一种方式：</p>
<p>使用步骤：</p>
<ol>
<li><p>配置字符集过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSystemConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        ServletRegistrationBean reg = <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/myservlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> reg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册Filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean reg = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用框架中的过滤器类</span></span><br><span class="line">        CharacterEncodingFilter filter  = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        <span class="comment">//指定使用的编码方式</span></span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//指定request ， response都使用encoding的值</span></span><br><span class="line">        filter.setForceEncoding(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        reg.setFilter(filter);</span><br><span class="line">        <span class="comment">//指定 过滤的url地址</span></span><br><span class="line">        reg.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改application.properties文件， 让自定义的过滤器起作用</p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span></span><br><span class="line"><span class="comment">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span></span><br><span class="line"><span class="meta">server.servlet.encoding.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>



<p>第二种方式</p>
<p>修改application.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9001</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/myboot</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#让系统的CharacterEncdoingFilter生效</span></span><br><span class="line"><span class="meta">server.servlet.encoding.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定使用的编码方式</span></span><br><span class="line"><span class="meta">server.servlet.encoding.charset</span>=<span class="string">utf-8</span></span><br><span class="line"><span class="comment">#强制request，response都使用charset属性的值</span></span><br><span class="line"><span class="meta">server.servlet.encoding.force</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p>
<p>使用步骤： </p>
<ol>
<li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p>
</li>
<li><p>pom.xml 指定把src/main/java目录中的xml文件包含到classpath中</p>
</li>
<li><p>创建实体类Student</p>
</li>
<li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p>
</li>
<li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p>
</li>
<li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p>
</li>
<li><p>创建Controller对象，访问Service。</p>
</li>
<li><p>写application.properties文件</p>
<p>配置数据库的连接信息。</p>
</li>
</ol>
<h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>：告诉MyBatis这是dao接口，创建此接口的代理对象。</span></span><br><span class="line"><span class="comment"> *     位置：在类的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">selectById</span><span class="params">(<span class="meta">@Param(&quot;stuId&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@MapperScan</span>: 找到Dao接口和Mapper文件</span></span><br><span class="line"><span class="comment"> *     basePackages：Dao接口所在的包名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.dao&quot;,&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20220925091004909.png" class="" title="image-20220925091004909">





<h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p>
<p>1）在resources目录中创建子目录 （自定义的）， 例如mapper</p>
<p>2）把mapper文件放到 mapper目录中</p>
<p>3）在application.properties文件中，指定mapper文件的目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定mapper文件的位置	</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#指定mybatis的日志</span></span><br><span class="line"><span class="meta">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--resources插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p>
<p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p>
<p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p>
<p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p>
<p>​     控制事务： 隔离级别，传播行为， 超时时间</p>
<p>3）事务处理方式：</p>
<p>​      1） Spring框架中的@Transactional</p>
<p>​      2)    aspectj框架可以在xml配置文件中，声明事务控制的内容</p>
<p>SpringBoot中使用事务： 上面的两种方式都可以。</p>
<p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p>
<p>2）明确的在主启动类的上面 ，加入@EnableTransactionManager</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Transactional</span>: 表示方法的有事务支持</span></span><br><span class="line"><span class="comment"> *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1</span></span><br><span class="line"><span class="comment"> *       抛出运行时异常，回滚事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;业务方法addStudent&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> rows  =  studentDao.insert(student);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行sql语句&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出一个运行时异常， 目的是回滚事务</span></span><br><span class="line">    <span class="comment">//int m   = 10 / 0 ;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五章-接口架构风格—RESTful"><a href="#第五章-接口架构风格—RESTful" class="headerlink" title="第五章 接口架构风格—RESTful"></a>第五章 接口架构风格—RESTful</h1><p>接口（API）： 可以指访问servlet， controller的url，调用其他程序的函数</p>
<p>​    </p>
<p>架构风格： api组织方式（样子）</p>
<p>就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p>
<p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p>
<h2 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h2><p>RESTful架构风格</p>
<p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p>
<p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p>
<p>   优点： 更简洁，更有层次</p>
<p>表现层状态转移: </p>
<p>表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p>
<p>状态： 资源变化</p>
<p>转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p>
<p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p>
<p>2）REST中的要素：</p>
<p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p>
<p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p>
<p>   资源是用名词表示。</p>
<p>  对资源： </p>
<p>​        查询资源： 看，通过url找到资源。 </p>
<p>​        创建资源： 添加资源</p>
<p>​        更新资源：更新资源 ，编辑</p>
<p>​        删除资源： 去除</p>
<p>​       </p>
<p> 资源使用url表示，通过名词表示资源。</p>
<p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ / “ 分隔对资源的信息</p>
<p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p>
<p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p>
<p>   GET:  查询资源  –  sql select</p>
<p>​                 处理单个资源： 用他的单数方式</p>
<p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p>
<p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p>
<p>​                处理多个资源：使用复数形式</p>
<p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p>
<p>​                </p>
<p>   POST: 创建资源  – sql insert</p>
<p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p>
<p>​                在post请求中传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/myboot/student&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>   PUT： 更新资源  –  sql  update</p>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/myboot/student/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>   DELETE: 删除资源  – sql delete</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/myboot/student/1&quot;</span>&gt;</span>删除1的数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p>
<p> <a href="http://localhost:8080/myboot/students?page=1&amp;pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p>
<p>3） 一句话说明REST： </p>
<p>​    使用url表示资源 ，使用http动作操作资源。</p>
<ol start="4">
<li>注解</li>
</ol>
<p>  @PathVariable :  从url中获取数据</p>
<p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method=RequestMethod.GET)</p>
<p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method=RequestMethod.POST)</p>
<p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method=RequestMethod.PUT)</p>
<p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method=RequestMethod.DELETE)</p>
<p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p>
<p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p>
<ol start="5">
<li><p>Postman : 测试工具</p>
<p>使用Postman : 可以测试 get ，post ， put ，delete 等请求</p>
</li>
</ol>
<h2 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h2><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p>
<p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p>
<p>作用： 把请求中的post请求转为 put ， delete</p>
<p>实现步骤：</p>
<ol>
<li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li>
<li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li>
</ol>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20220925161052094.png" class="" title="image-20220925161052094">

<h1 id="第六章-Redis"><a href="#第六章-Redis" class="headerlink" title="第六章 Redis"></a>第六章 Redis</h1><p>Redis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）</p>
<p>Redis的数据类型： string  ,  hash  ,set  ,zset , list</p>
<p>Redis是一个中间件： 是一个独立的服务器。</p>
<p>java中著名的客户端： Jedis ，  lettuce ， Redisson</p>
<p>Spring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  </p>
<h2 id="6-1-配置Windows版本的redis"><a href="#6-1-配置Windows版本的redis" class="headerlink" title="6.1  配置Windows版本的redis"></a>6.1  配置Windows版本的redis</h2><p>Redis-x64-3.2.100.rar 解压缩到一个 非中文 的目录</p>
<p>redis-server.exe：服务端， 启动后，不要关闭</p>
<p>redis-cli.exe：客户端， 访问redis中的数据</p>
<p>redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端</p>
<p>执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jar</p>
<p>RedisTemplate 使用的  lettuce 客户端库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">data-redis使用的   lettuce 客户端库</span><br><span class="line"></span><br><span class="line">在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p>
<p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p>
<p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p>
<p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p>
<p>反序列化：把字节序列还原为对象的过程称为反序列化。</p>
<p>为什么需要序列化</p>
<p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p>
<p>什么情况下需要序列化</p>
<p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p>
<p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p>
<p>序列化的方式</p>
<p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p>
<p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p>
<p>Student( name=zs, age=20)   —-  { “name”:”zs”, “age”:20 }</p>
<p>java的序列化： 把java对象转为byte[], 二进制数据</p>
<p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)    </p>
<p>序列化</p>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20220929111454700.png" class="" title="image-20220929111454700">

<p>反序列化</p>
<img src="/2022/09/22/SpringBoot/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%AC%94%E8%AE%B0/image-20220929111853856.png" class="" title="image-20220929111853856">





<p>设置key或者value的序列化方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用RedisTemplate ，在存取值之前，设置序列化</span></span><br><span class="line"><span class="comment">// 设置 key 使用String的序列化</span></span><br><span class="line">redisTemplate.setKeySerializer( <span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 value 的序列化</span></span><br><span class="line">redisTemplate.setValueSerializer( <span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForValue().set(k,v);</span><br></pre></td></tr></table></figure>





<h1 id="第七章-SpringBoot集成Dubbo"><a href="#第七章-SpringBoot集成Dubbo" class="headerlink" title="第七章 SpringBoot集成Dubbo"></a>第七章 SpringBoot集成Dubbo</h1><h2 id="7-1-看-SpringBoot继承Dubbo的文档"><a href="#7-1-看-SpringBoot继承Dubbo的文档" class="headerlink" title="7.1  看 SpringBoot继承Dubbo的文档"></a>7.1  看 SpringBoot继承Dubbo的文档</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md</span><br></pre></td></tr></table></figure>

<h2 id="7-2-公共项目"><a href="#7-2-公共项目" class="headerlink" title="7.2  公共项目"></a>7.2  公共项目</h2><p>独立的maven项目： 定义了接口和数据类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1901229007746699151L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Student <span class="title">queryStudent</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="7-3-提供者"><a href="#7-3-提供者" class="headerlink" title="7.3  提供者"></a>7.3  提供者</h2><p>创建SpringBoot项目</p>
<p>1） pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--加入公共项目的gav--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>022-interface-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 排除log4j依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用dubbo中的注解暴露服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 可以不用加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DubboService(interfaceClass = StudentService.class,version = &quot;1.0&quot;,timeout = 5000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudent</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        Student student  = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">if</span>( <span class="number">1001</span> == id)&#123;</span><br><span class="line">            student.setId(<span class="number">1001</span>);</span><br><span class="line">            student.setName(<span class="string">&quot;------1001-张三&quot;</span>);</span><br><span class="line">            student.setAge(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1002</span>  == id)&#123;</span><br><span class="line">            student.setId(<span class="number">1002</span>);</span><br><span class="line">            student.setName(<span class="string">&quot;#######1002-李四&quot;</span>);</span><br><span class="line">            student.setAge(<span class="number">22</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3）application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置服务名称 dubbo:application name=&quot;名称&quot;</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">studentservice-provider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置扫描的包， 扫描的@DubboService</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">com.bjpowernode.service</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置dubbo协议</span></span><br><span class="line"><span class="comment">#dubbo.protocol.name=dubbo</span></span><br><span class="line"><span class="comment">#dubbo.protocol.port=20881</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>



<p>4)在启动类的上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-4消费者"><a href="#7-4消费者" class="headerlink" title="7.4消费者"></a>7.4消费者</h2><p>创建SpringBoot项目</p>
<p>1） pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--加入公共项目的gav--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>022-interface-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 排除log4j依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 创建了Controller 或者 Service都可以</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用远程服务， 把创建好的代理对象，注入给studentService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@DubboReference(interfaceClass = StudentService.class,version = &quot;1.0&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有使用interfaceClass，默认的就是 引用类型的 数据类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@DubboReference(version = &quot;1.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryStudent</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        Student student   = studentService.queryStudent(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用远程接口，获取对象：&quot;</span>+student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3）application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定服务名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consumer-application</span></span><br><span class="line"><span class="comment">#指定注册中心</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>





<h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>使用的技术： SpringBoot ,Dubbo, Redis, MyBatis</p>
<p>Student表：</p>
<p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(255) COLLATE utf8_bin DEFAULT NULL,<br>  <code>phone</code> varchar(11) COLLATE utf8_bin DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</p>
<ol>
<li>注册学生</li>
</ol>
<p>​     phone必须唯一， 如果已经存在了手机号， 注册失败的。 </p>
<p>​                 int addStudent(Student student);</p>
<p>​                返回值：int</p>
<p>​                 1： 注册成功</p>
<p>​                 2 ： 手机号已经存在  </p>
<p>​                                    </p>
<p>​      name至少两个字符，</p>
<p>​      age 必须 大于 0 </p>
<p>2） 查询学生，根据id查询，此学生。 </p>
<p>​        先到redis查询学生， 如果redis没有此学生，从数据库查询， 把查询到的学生放入到redis。</p>
<p>​      后面再次查询这个学生应该从redis就能获取到。</p>
<p>​        Student  queryStudent(Integer id);</p>
<ol start="3">
<li>使用Dubbo框架，    addStudent, queryStudent 是有服务提供者实现的。</li>
</ol>
<p>​    消费者可以是一个Controller ， 调用提供者的两个方法。  实现注册和查询。</p>
<p>4）页面使用html和ajax，jquery。</p>
<p>​       在html页面中提供 form 注册学生， 提供文本框输入id，进行查询。</p>
<p>​      注册和查询都使用ajax技术。</p>
<p>​    html，jquery.js都放到resources/static目录中</p>
<h1 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p>
<p>2.修改pom.xml</p>
<p> 1)指定打包后的文件名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--打包后的文件名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>myboot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2)指定jsp编译目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--resources插件， 把jsp编译到指定的目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3）执行打包是war</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4）主启动类继承SpringBootServletInitializer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspApplication</span>  <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(JspApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> builder.sources(JspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5）部署war</p>
<p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat/webapps目录。</p>
<h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p>
<p>2.修改pom.xml</p>
<p>​     1) 指定打包后的文件名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--打包后的文件名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>myboot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>指定springboot-maven-plugin版本</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3）最后执行 maven clean package</p>
<p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p>
<p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p>
<h1 id="第九章-Thymeleaf-模板引擎"><a href="#第九章-Thymeleaf-模板引擎" class="headerlink" title="第九章 Thymeleaf 模板引擎"></a>第九章 Thymeleaf 模板引擎</h1><p>Thymeleaf： 是使用java开发的模板技术， 在服务器端运行。 把处理后的数据发送给浏览器。</p>
<p>​         模板是作视图层工作的。  显示数据的。  Thymeleaf是基于Html语言。 Thymleaf语法是应用在</p>
<p>​        html标签中 。 SpringBoot框架集成Thymealeaf,  使用Thymeleaf代替jsp。</p>
<p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p>
<h2 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h2><ol>
<li><p>标准变量表达式 </p>
<p>语法：  ${key} </p>
<p>作用： 获取key对于的文本数据，  key 是request作用域中的key ， 使用request.setAttribute(), model.addAttribute()</p>
<p>在页面中的 html标签中， 使用 th:text=”${key}” </p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标准变量表达式:  $&#123;key&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;site&#125;&quot;</span>&gt;</span>key不存在<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取SysUser对象 属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.id&#125;&quot;</span>&gt;</span>id<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.name&#125;&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.sex&#125;&quot;</span>&gt;</span>姓名：m男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.age&#125;&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.getName()&#125;&quot;</span>&gt;</span>获取姓名使用getXXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>选择变量表达式（ 星号变量表达式）</p>
<p>语法：  *{key}</p>
<p>作用： 获取这个key对应的数据，   *{key}需要和th:object 这个属性一起使用。</p>
<p>目的是简单获取对象的属性值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用 *&#123;&#125; 获取SysUser的属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;myuser&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用*&#123;&#125;完成的表示 对象的属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;myuser.name&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>链接表达式</p>
<p>语法： @{url}</p>
<p>作用： 表示链接， 可以</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span><span class="handlebars"><span class="xml"> , <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;..&quot;</span>&gt;</span> ,<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;...&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="9-2-Thymeleaf属性"><a href="#9-2-Thymeleaf属性" class="headerlink" title="9.2  Thymeleaf属性"></a>9.2  Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。  属性的作用不变。    加入上th， 属性的值由模板引擎处理了。  在属性可以使用变量表达式</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/loginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;/loginServlet&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;$&#123;methodAttr&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="9-3-each"><a href="#9-3-each" class="headerlink" title="9.3 each"></a>9.3 each</h2><p>each循环， 可以循环List，Array</p>
<p>语法：</p>
<p>在一个html标签中，使用th:each</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;集合循环成员,循环的状态变量:$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是&quot;集合循环成员Stat&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>each循环Map</p>
<p>在一个html标签中，使用th:each</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;集合循环成员,循环的状态变量:$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员.key&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员.value&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是&quot;集合循环成员Stat&quot;</span><br><span class="line"></span><br><span class="line">key:map集合中的key</span><br><span class="line">value：map集合key对应的value值</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="9-4-th-if"><a href="#9-4-th-if" class="headerlink" title="9.4 th:if"></a>9.4 th:if</h2><p>“th:if”  : 判断语句， 当条件为true， 显示html标签体内， 反之不显示 没有else语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot; 10 &gt; 0 &quot;</span>&gt;</span> 显示文本内容 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>还有一个 th:unless  和 th:if相反的行为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot; 10 &lt; 0 &quot;</span>&gt;</span> 当条件为false显示标签体内容 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：if</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span> if 使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;sex==&#x27;m&#x27;&#125;&quot;</span>&gt;</span>性别是男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isLogin&#125;&quot;</span>&gt;</span>已经登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;age &gt; 20&#125;&quot;</span>&gt;</span>年龄大于20<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&quot;&quot;空字符是true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span>name是“”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--null是false--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isOld&#125;&quot;</span>&gt;</span> isOld是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>例子： unless</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>unless: 判断条件为false，显示标签体内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;sex==&#x27;f&#x27;&#125;&quot;</span>&gt;</span>性别是男的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;isLogin&#125;&quot;</span>&gt;</span>登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;isOld&#125;&quot;</span>&gt;</span> isOld是null <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="9-5-th-switch"><a href="#9-5-th-switch" class="headerlink" title="9.5  th:switch"></a>9.5  th:switch</h2><p>th:switch 和 java中的swith一样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;要比对的值&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;值1&quot;</span>&gt;</span></span><br><span class="line">        结果1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;值2&quot;</span>&gt;</span></span><br><span class="line">        结果2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span><br><span class="line">        默认结果</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    以上的case只有一个语句执行</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="9-6-th-inline"><a href="#9-6-th-inline" class="headerlink" title="9.6 th:inline"></a>9.6 th:inline</h2><ol>
<li><p>内联text：  在html标签外，获取表达式的值</p>
<p>语法： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名是：[[$&#123;key&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联 text, 使用内联表达式显示变量的值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]]，年龄是[[$&#123;age&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            我是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,年龄是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用内联text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]],性别是[[$&#123;sex&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>内联javascript</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> myname = [[$&#123;name&#125;]];</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> myage = [[$&#123;age&#125;]];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="comment">//alert(&quot;获取的模板中数据 &quot;+ myname + &quot;,&quot;+myage)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;单击事件，获取数据 &quot;</span>+ myname + <span class="string">&quot;,&quot;</span>+ [[$&#123;sex&#125;]])</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="9-7-字面量"><a href="#9-7-字面量" class="headerlink" title="9.7  字面量"></a>9.7  字面量</h2><p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本字面量: 使用单引号括起来的字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>数字字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;20&gt;5&#125;&quot;</span>&gt;</span> 20大于 5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>boolean字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isLogin == true&#125;&quot;</span>&gt;</span>用户已经登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>null字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser != null&#125;&quot;</span>&gt;</span>有myuser数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="9-8-字符串连接"><a href="#9-8-字符串连接" class="headerlink" title="9.8  字符串连接"></a>9.8  字符串连接</h2><p>连接字符串有两种语法</p>
<p>1） 语法使用 单引号括起来字符串  ， 使用 + 连接其他的 字符串或者表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）语法：使用双竖线， |字符串和表达式|</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|我是$&#123;name&#125;,我所在城市$&#123;city|&quot;</span>&gt;</span></span><br><span class="line">    显示数据</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>字符串连接方式1：使用单引号括起来的字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>字符串连接方式2：|字符串和表达式|<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|我是$&#123;name&#125;,所在城市$&#123;city&#125;,其他人$&#123;myuser.name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="9-9-运算符"><a href="#9-9-运算符" class="headerlink" title="9.9 运算符"></a>9.9 运算符</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">算术运 算： + , - - , * , / , %</span><br><span class="line">关系比较 : &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">相等判断： == , != ( eq , ne )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用运算符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age &gt; 10&#125;&quot;</span>&gt;</span>年龄大于 10 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123; 20 + 30 &#125;&quot;</span>&gt;</span>显示运算结果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser == null&#125;&quot;</span>&gt;</span>myuser是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser eq null&#125;&quot;</span>&gt;</span>myuser是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser ne null&#125;&quot;</span>&gt;</span>myuser不是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;isLogin == true ? &#x27;用户已经登录&#x27; : &#x27;用户需要登录&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;isLogin == true ? ( age &gt; 10 ? &#x27;用户是大于10的&#x27; : &#x27;用户年龄比较小&#x27;) : &#x27;用户需要登录&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">三元运算符：</span><br><span class="line"> 表达式  ？ true的结果 : false的结果</span><br><span class="line"></span><br><span class="line">三元运算符可以嵌套</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="9-10-内置对象"><a href="#9-10-内置对象" class="headerlink" title="9.10 内置对象"></a>9.10 内置对象</h2><p>文档地址：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc</a>.</p>
<p>#request 表示 HttpServletRequest</p>
<p>#session 表示 HttpSession对象</p>
<p>session 表示Map对象的， 是#session的简单表示方式， 用来获取session中指定的key的值</p>
<p>​               #session.getAttribute(“loginname”) == session.loginname</p>
<p>这些是内置对象，可以在模板文件中直接使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 350px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置对象#request,#session，session的使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取作用域中的数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getAttribute(&#x27;requestData&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;sessionData&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginname&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用内置对象的方法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        getRequestURL=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getRequestURL()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getRequestURI=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getRequestURI()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getQueryString=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getQueryString()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getContextPath=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getContextPath()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getServerName=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getServerName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getServerPort=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getServerPort()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="9-11-内置工具类"><a href="#9-11-内置工具类" class="headerlink" title="9.11 内置工具类"></a>9.11 内置工具类</h2><p>内置工具类型： Thymeleaf自己的一些类，提供对string， date ，集合的一些处理方法</p>
<p>#dates: 处理日器的工具类</p>
<p>#numbers:处理数字的</p>
<p>#lists: 处理list集合的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 350px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>日期类对象 #dates<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate )&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.year(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.month(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.monthName(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createNow()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#numbers，操作数字的<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatCurrency(mynum)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(mynum,5,2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#strings,操作字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toUpperCase(mystr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.indexOf(mystr,&#x27;power&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(mystr,2,5)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(mystr,2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.concat(mystr,&#x27;---java开发的黄埔军校---&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.length(mystr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.length(&#x27;hello&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#strings.isEmpty(mystr)&#125;&quot;</span>&gt;</span> mystring 不是 空字符串  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#lists,操作list集合<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.size(mylist)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.contains(mylist,&#x27;a&#x27;)&#125;&quot;</span>&gt;</span>有成员a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;!$&#123;#lists.isEmpty(mylist)&#125;&quot;</span>&gt;</span> list 集合有多个成员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>处理null<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;zoo?.dog?.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="9-12-自定义模板"><a href="#9-12-自定义模板" class="headerlink" title="9.12 自定义模板"></a>9.12 自定义模板</h2><p>模板是内容复用， 定义一次，在其他的模板文件中多次使用。</p>
<p>模板使用：</p>
<p>1.定义模板</p>
<p>2.使用模板</p>
<p>模板定义语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:fragment=&quot;模板自定义名称&quot;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        动力节点-java开发</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        www.bjpowernode.com</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>引用模板语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1) ~&#123;templatename :: selector&#125;</span><br><span class="line">   templatename:  文件名称</span><br><span class="line">   selector： 自定义模板名称</span><br><span class="line">2）templatename :: selector</span><br><span class="line">   templatename:  文件名称</span><br><span class="line">   selector： 自定义模板名称</span><br><span class="line"></span><br><span class="line">对于使用模板：有包含模板（th:include）， 插入模板(th:insert)</span><br></pre></td></tr></table></figure>



<h1 id="第十章-总结"><a href="#第十章-总结" class="headerlink" title="第十章 总结"></a>第十章 总结</h1><h2 id="10-1-注解"><a href="#10-1-注解" class="headerlink" title="10.1 注解"></a>10.1 注解</h2><p>Spring + SpringMVC + SpringBoot </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建对象的：</span><br><span class="line"><span class="meta">@Controller</span>: 放在类的上面，创建控制器对象，注入到容器中</span><br><span class="line"><span class="meta">@RestController</span>: 放在类的上面，创建控制器对象，注入到容器中。</span><br><span class="line">             作用：复合注解是<span class="meta">@Controller</span> , <span class="meta">@ResponseBody</span>, 使用这个注解类的，里面的控制器方法的返回值                   都是数据</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器</span><br><span class="line"><span class="meta">@Repository</span> : 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用MyBatis框               架，  dao对象是MyBatis通过代理生成的。 不需要使用<span class="meta">@Repository</span>、 所以没有使用。</span><br><span class="line"><span class="meta">@Component</span>:  放在类的上面，创建此类的对象，放入到容器中。 </span><br><span class="line"></span><br><span class="line">赋值的：</span><br><span class="line"><span class="meta">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="meta">@Value(&quot;李四&quot;)</span> <span class="keyword">private</span> String name</span><br><span class="line">          还可以使用<span class="meta">@Value</span>,获取配置文件者的数据（properties或yml）。 </span><br><span class="line">          <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span> <span class="keyword">private</span> Integer port</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>: 引用类型赋值自动注入的，支持byName, byType. 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面</span><br><span class="line"><span class="meta">@Qualifer</span>:  给引用类型赋值，使用byName方式。   </span><br><span class="line">            <span class="meta">@Autowird</span>, <span class="meta">@Qualifer</span>都是Spring框架提供的。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span> ： 来自jdk中的定义， javax.annotation。 实现引用类型的自动注入， 支持byName, byType.</span><br><span class="line">             默认是byName, 如果byName失败， 再使用byType注入。 在属性上面使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line"><span class="meta">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span> ： 读取其他的properties属性配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span>: 放在方法的上面，表示方法的返回值是数据， 不是视图</span><br><span class="line"><span class="meta">@RequestBody</span> : 把请求体中的数据，读取出来， 转为java对象使用。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>:  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span> : 处理异常的，放在方法的上面</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transcational</span> :  处理事务的， 放在service实现类的<span class="keyword">public</span>方法上面， 表示此方法有事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SpringBoot中使用的注解</span><br><span class="line">    </span><br><span class="line"><span class="meta">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="meta">@SpringBootConfiguration</span></span><br><span class="line">                          <span class="meta">@EnableAutoConfiguration</span>， <span class="meta">@ComponentScan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">MyBatis相关的注解</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> ： 放在类的上面 ， 让MyBatis找到接口， 创建他的代理对象    </span><br><span class="line"><span class="meta">@MapperScan</span> :放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中</span><br><span class="line"><span class="meta">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。</span><br><span class="line">    </span><br><span class="line">Dubbo注解</span><br><span class="line"><span class="meta">@DubboService</span>: 在提供者端使用的，暴露服务的， 放在接口的实现类上面</span><br><span class="line"><span class="meta">@DubboReference</span>:  在消费者端使用的， 引用远程服务， 放在属性上面使用。</span><br><span class="line"><span class="meta">@EnableDubbo</span> : 放在主类上面， 表示当前引用启用Dubbo功能。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC工具类封装</title>
    <url>/2022/04/27/Mysql/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85/JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<ol>
<li>   工具类中的构造方法都是私有的</li>
<li>  工具类中的方法都是静态的，直接采用类名调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块再类加载时执行，并且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/2023/02/12/SSM%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC 是目前主流的实现 MVC 设计模式的企业级开发框架，Spring 框架的一个子模块，无需整合，开发起来更加便捷。</p>
<h4 id="什么是-MVC-设计模式？"><a href="#什么是-MVC-设计模式？" class="headerlink" title="什么是 MVC 设计模式？"></a>什么是 MVC 设计模式？</h4><p>将应用程序分为 Controller、Model、View 三层，Controller 接收客户端请求，调用 Model 生成业务数据，传递给 View。</p>
<p>Spring MVC 就是对这套流程的封装，屏蔽了很多底层代码，开放出接口，让开发者可以更加轻松、便捷地完成基于 MVC 模式的 Web 开发。</p>
<h4 id="Spring-MVC-的核心组件"><a href="#Spring-MVC-的核心组件" class="headerlink" title="Spring MVC 的核心组件"></a>Spring MVC 的核心组件</h4><ul>
<li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li>
<li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li>
<li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li>
<li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li>
<li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li>
<li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li>
<li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li>
<li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li>
</ul>
<h4 id="Spring-MVC-的工作流程"><a href="#Spring-MVC-的工作流程" class="headerlink" title="Spring MVC 的工作流程"></a>Spring MVC 的工作流程</h4><ul>
<li>客户端请求被 DisptacherServlet 接收。</li>
<li>根据 HandlerMapping 映射到 Handler。</li>
<li>生成 Handler 和 HandlerInterceptor。</li>
<li>Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet。</li>
<li>DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理。</li>
<li>Handler 返回一个 ModelAndView 给 DispatcherServlet。</li>
<li>DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View。</li>
<li>ViewResovler 返回一个 View 给 DispatcherServlet。</li>
<li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li>
<li>DispatcherServlet 将渲染后的结果响应给客户端。</li>
</ul>
<img src="/2023/02/12/SSM%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/image-20230212161405071.png" class="" title="image-20230212161405071">

<p>Spring MVC 流程非常复杂，实际开发中很简单，因为大部分的组件不需要开发者创建、管理，只需要通过配置文件的方式完成配置即可，真正需要开发者进行处理的只有 Handler 、View。 </p>
<h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><ul>
<li>创建 Maven 工程，pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 web.xml 中配置 DispatcherServlet。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建 Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h3><ul>
<li>@RequestMapping </li>
</ul>
<p>Spring MVC 通过 @RequestMapping 注解将 URL 请求与业务方法进行映射，在 Handler 的类定义处以及方法定义处都可以添加 @RequestMapping ，在类定义处添加，相当于客户端多了一层访问路径。</p>
<ul>
<li>@Controller</li>
</ul>
<p>@Controller 在类定义处添加，将该类交个 IoC 容器来管理（结合 springmvc.xml 的自动扫描配置使用），同时使其成为一个控制器，可以接收客户端请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@RequestMapping 相关参数</li>
</ul>
<p>1、value：指定 URL 请求的实际地址，是 @RequestMapping 的默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、method：指定请求的 method 类型，GET、POST、PUT、DELET。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表示 index 方法只能接收 GET 请求。</p>
<p>3、params：指定请求中必须包含某些参数，否则无法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表示请求中必须包含 name 和 id 两个参数，同时 id 的值必须是 10。</p>
<p>关于参数绑定，在形参列表中通过添加 @RequestParam 注解完成 HTTP 请求参数与业务方法形参的映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String str,<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了index...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表示将请求的参数 name 和 id 分别赋给了形参 str 和 age ，同时自动完成了数据类型转换，将 “10” 转为了 int 类型的 10，再赋给 age，这些工作都是由 HandlerAdapter 来完成的。</p>
<p>Spring MVC 也支持 RESTful 风格的 URL。</p>
<p>传统类型：<a href="http://localhost:8080/hello/index?name=zhangsan&amp;id=10">http://localhost:8080/hello/index?name=zhangsan&amp;id=10</a></p>
<p>REST：<a href="http://localhost:8080/hello/index/zhangsan/10">http://localhost:8080/hello/index/zhangsan/10</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/rest/&#123;name&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">rest</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name,<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 @PathVariable 注解完成请求参数与形参的映射。</p>
<ul>
<li>映射 Cookie</li>
</ul>
<p>Spring MVC 通过映射可以直接在业务方法中获取 Cookie 的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/cookie&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String sessionId)</span></span>&#123;</span><br><span class="line">    System.out.println(sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 JavaBean 绑定参数</li>
</ul>
<p>Spring MVC 会根据请求参数名和 JavaBean 属性名进行自动匹配，自动为对象填充属性值，同时支持及联属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">13</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">33</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/hello/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户id：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户地址：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;address.value&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果出现中文乱码问题，只需在 web.xml 添加 Spring MVC 自带的过滤器即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JSP 页面的转发和重定向：</li>
</ul>
<p>Spring MVC 默认是以转发的形式响应 JSP。</p>
<p>1、转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/forward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    <span class="comment">//        return &quot;index&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-数据绑定"><a href="#Spring-MVC-数据绑定" class="headerlink" title="Spring MVC 数据绑定"></a>Spring MVC 数据绑定</h3><p>数据绑定：在后端的业务方法中直接获取客户端 HTTP 请求中的参数，将请求参数映射到业务方法的形参中，Spring MVC 中数据绑定的工作是由 HandlerAdapter 来完成的。</p>
<ul>
<li>基本数据类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/baseType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">baseType</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端，如果不加 @ResponseBody 注解，Spring MVC 会将业务方法的放回值传递给 DispatcherServlet，再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析，映射到一个 JSP 资源。</p>
<ul>
<li>包装类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/packageType&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">packageType</span><span class="params">(<span class="meta">@RequestParam(value = &quot;num&quot;,required = false,defaultValue = &quot;0&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包装类可以接收 null，当 HTTP 请求没有参数时，使用包装类定义形参的数据类型，程序不会抛出异常。</p>
<p>@RequestParam</p>
<p>value = “num”：将 HTTP 请求中名为 num 的参数赋给形参 id。</p>
<p>requried：设置 num 是否为必填项，true 表示必填，false 表示非必填，可省略。</p>
<p>defaultValue = “0”：如果 HTTP 请求中没有 num 参数，默认值为0.</p>
<ul>
<li>数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@RestController 表示该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析。</p>
<p>@Controller 表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析，如果只需要将数据响应给客户端，而不需要进行视图解析，则需要在对应的业务方法定义处添加 @ResponseBody。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>List</li>
</ul>
<p>Spring MVC 不支持 List 类型的直接转换，需要对 List 集合进行包装。</p>
<p>集合封装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: 09:<span class="number">12</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/data/list&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[0].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[1].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[2].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>业务方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(UserList userList)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理 @ResponseBody 中文乱码，在 springmvc.xml 中配置消息转换器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">在springmvc.xml文件中添加注解驱动<span class="tag">&lt;<span class="name">mvc:annotationdriven</span>/&gt;</span>,它用来解析@ResponseBody注解</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>Map</li>
</ul>
<p>自定义封装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(UserMap userMap)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(String key:userMap.getUsers().keySet())&#123;</span><br><span class="line">        User user = userMap.getUsers().get(key);</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: 09:<span class="number">12</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/data/map&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;a&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;b&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;users[&#x27;c&#x27;].name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>JSON</li>
</ul>
<p>客户端发生 JSON 格式的数据，直接通过 Spring MVC 绑定到业务方法的形参中。</p>
<p>处理 Spring MVC 无法加载静态资源，在 web.xml 中添加配置即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">35</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">           <span class="keyword">var</span> user = &#123;</span><br><span class="line">               <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">&quot;/data/json&quot;</span>,</span><br><span class="line">               data:JSON.stringify(user),</span><br><span class="line">               type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">               contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">               dataType:<span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alert(data.id+<span class="string">&quot;---&quot;</span>+data.name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>业务方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="comment">//@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)，一般都用POST方式进行提交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">json</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring MVC 中的 JSON 和 JavaBean 的转换需要借助于 fastjson，pom.xml 引入相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springmvc.xml 添加 fastjson 配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-模型数据解析"><a href="#Spring-MVC-模型数据解析" class="headerlink" title="Spring MVC 模型数据解析"></a>Spring MVC 模型数据解析</h3><p>JSP 四大作用域对应的内置对象：pageContext、request、session、application。</p>
<p>模型数据的绑定是由 ViewResolver 来完成的，实际开发中，我们需要先添加模型数据，再交给 ViewResolver 来绑定。</p>
<p>Spring MVC 提供了以下几种方式添加模型数据：</p>
<ul>
<li>Map</li>
<li>Model</li>
<li>ModelAndView</li>
<li>@SessionAttribute</li>
<li>@ModelAttribute</li>
</ul>
<blockquote>
<p>将模式数据绑定到 request 对象。</p>
</blockquote>
<p>1、Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"><span class="comment">//&lt;%@ page isELIgnored=&quot;false&quot;%&gt;的作用：</span></span><br><span class="line">在每个JSP中可以指定该JSP是否使用EL。在page directive中的isELIgnored属性用来指定是否忽略。格式为：</span><br><span class="line"></span><br><span class="line">＜%@ page isELIgnored＝<span class="string">&quot;true|false&quot;</span>%＞</span><br><span class="line"></span><br><span class="line">如果设定为<span class="keyword">true</span>，也就是EL被忽略，那么JSP中的表达式被当成字符串处理。</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;requestScope.user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>2、Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/model&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">model</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、ModelAndView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    modelAndView.setView(view);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView7&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;view&quot;</span>,<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/modelAndView8&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">&quot;/view.jsp&quot;</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、HttpServletRequest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/request&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">request</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、@ModelAttribute</p>
<ul>
<li>定义一个方法，该方法专门用来返回要填充到模型数据中的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="comment">//@ModelAttribute注解在方法上。@ModelAttribute注解的方法会在Controller每个方法执行前被调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务方法中无需再处理模型数据，只需返回视图即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/modelAttribute&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modelAttribute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将模型数据绑定到 session 对象</p>
</blockquote>
<p>1、直接使用原生的 Servlet API。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/session&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/session2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session2</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、@SessionAttribute</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;user&quot;,&quot;address&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了 key = “user”、key = “address” 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(types = &#123;User.class,Address.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了数据类型是 User 、Address 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p>
<blockquote>
<p>将模型数据绑定到 application 对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/application&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">application</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    ServletContext application = request.getServletContext();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-自定义数据转换器"><a href="#Spring-MVC-自定义数据转换器" class="headerlink" title="Spring MVC 自定义数据转换器"></a>Spring MVC 自定义数据转换器</h3><p>数据转换器是指将客户端 HTTP 请求中的参数转换为业务方法中定义的形参，自定义表示开发者可以自主设计转换的方式，HandlerApdter 已经提供了通用的转换，String 转 int，String 转 double，表单数据的封装等，但是在特殊的业务场景下，HandlerAdapter 无法进行转换，就需要开发者自定义转换器。</p>
<p>客户端输入 String 类型的数据 “2019-03-03”，自定义转换器将该数据转为 Date 类型的对象。</p>
<ul>
<li>创建 DateConverter 转换器，实现 Conveter 接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateConverter</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="keyword">this</span>.pattern);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml 配置转换器。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/converter/date&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        请输入日期:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;date&quot;</span>/&gt;(yyyy-MM-dd)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/converter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/date&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>String 转 Student</p>
<p>StudentConverter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String[] args = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(Long.parseLong(args[<span class="number">0</span>]));</span><br><span class="line">        student.setName(args[<span class="number">1</span>]);</span><br><span class="line">        student.setAge(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.DateConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.converter.StudentConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">14</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">23</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/converter/student&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        请输入学生信息：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;student&quot;</span>/&gt;(id-name-age)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-REST"><a href="#Spring-MVC-REST" class="headerlink" title="Spring MVC REST"></a>Spring MVC REST</h3><p>REST：Representational State Transfer，资源表现层状态转换，是目前比较主流的一种互联网软件架构，它结构清晰、标准规范、易于理解、便于扩展。</p>
<ul>
<li>资源（Resource）</li>
</ul>
<p>网络上的一个实体，或者说网络中存在的一个具体信息，一段文本、一张图片、一首歌曲、一段视频等等，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每个资源都有对应的一个特定的 URI，要获取该资源时，只需要访问对应的 URI 即可。</p>
<ul>
<li>表现层（Representation）</li>
</ul>
<p>资源具体呈现出来的形式，比如文本可以用 txt 格式表示，也可以用 HTML、XML、JSON等格式来表示。</p>
<ul>
<li>状态转换（State Transfer）</li>
</ul>
<p>客户端如果希望操作服务器中的某个资源，就需要通过某种方式让服务端发生状态转换，而这种转换是建立在表现层之上的，所有叫做”表现层状态转换”。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>URL 更加简洁。</li>
<li>有利于不同系统之间的资源共享，只需要遵守一定的规范，不需要进行其他配置即可实现资源共享。</li>
</ul>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>REST 具体操作就是 HTTP 协议中四个表示操作方式的动词分别对应 CRUD 基本操作。</p>
<p>GET 用来表示获取资源。</p>
<p>POST 用来表示新建资源。</p>
<p>PUT 用来表示修改资源。</p>
<p>DELETE 用来表示删除资源。</p>
<p>Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTHandeler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentRepository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentRepositoryImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        studentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMap.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-文件上传下载"><a href="#Spring-MVC-文件上传下载" class="headerlink" title="Spring MVC 文件上传下载"></a>Spring MVC 文件上传下载</h3><blockquote>
<p>单文件上传</p>
</blockquote>
<p>底层是使用 Apache fileupload 组件完成上传，Spring MVC 对这种方式进行了封装。</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: 09:09</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/file/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;img&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>1、input 的 type 设置为 file。</p>
<p>2、form 的 method 设置为 post（get 请求只能将文件名传给服务器）</p>
<p>3、from 的 enctype 设置为 multipart-form-data（如果不设置只能将文件名传给服务器）</p>
<ul>
<li>Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;path&quot;</span>,<span class="string">&quot;/file/&quot;</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置上传组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>web.xml 添加如下配置，否则客户端无法访问 png</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多文件上传</p>
</blockquote>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: 09:<span class="number">32</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/file/uploads&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        file1:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file2:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file3:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;imgs&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;files&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span> &gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;$&#123;file&#125;&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploads&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploads</span><span class="params">(MultipartFile[] imgs,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile img:imgs)&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                files.add(<span class="string">&quot;/file/&quot;</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;files&quot;</span>,files);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;uploads&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>下载</p>
</blockquote>
<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/file/download/1&quot;</span>&gt;<span class="number">1.</span>png&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/file/download/2&quot;</span>&gt;<span class="number">2.</span>png&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/file/download/3&quot;</span>&gt;<span class="number">3.</span>png&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">        name += <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/forc-download&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = response.getOutputStream();</span><br><span class="line">                outputStream.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC-表单标签库"><a href="#Spring-MVC-表单标签库" class="headerlink" title="Spring MVC 表单标签库"></a>Spring MVC 表单标签库</h3><ul>
<li>Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;tag&quot;</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">15</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        学生ID：&lt;form:input path=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生年龄：&lt;form:input path=<span class="string">&quot;age&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>1、JSP 页面导入 Spring MVC 表单标签库，与导入 JSTL 标签库的语法非常相似，前缀 prefix 可以自定义，通常定义为 from。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>2、将 form 表单与模型数据进行绑定，通过 modelAttribute 属性完成绑定，将 modelAttribute 的值设置为模型数据对应的 key 值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Handeler:modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line">JSP:&lt;form:form modelAttribute=<span class="string">&quot;student&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>3、form 表单完成绑定之后，将模型数据的值取出绑定到不同的标签中，通过设置标签的 path 属性完成，将 path 属性的值设置为模型数据对应的属性名即可。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">学生ID：&lt;form:input path=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生年龄：&lt;form:input path=<span class="string">&quot;age&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用的表单标签"><a href="#常用的表单标签" class="headerlink" title="常用的表单标签"></a>常用的表单标签</h4><ul>
<li>from</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:from modelAttribute=<span class="string">&quot;student&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的<code>&lt;form&gt;&lt;/from&gt;</code>，通过 modelAttribute 属性绑定具体的模型数据。</p>
<ul>
<li>input</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的 <code>&lt;input type=&quot;text&quot;/&gt;</code>，from 标签绑定的是模型数据，input 标签绑定的是模型数据中的属性值，通过 path 属性可以与模型数据中的属性名对应，并且支持及联操作。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;from:input path=<span class="string">&quot;address.name&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>password</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:password path=<span class="string">&quot;password&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的 <code>&lt;input type=&quot;password&quot;/&gt;</code>，通过 path 属性与模型数据的属性值进行绑定，password 标签的值不会在页面显示。</p>
<ul>
<li>checkbox</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;读书&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setFlag(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">checkbox：&lt;form:checkbox path=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;flag&quot;</span>&gt;&lt;/form:checkbox&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，通过 path 与模型数据的属性值进行绑定，可以绑定 boolean、数组和集合。</p>
<p>如果绑定 boolean 值，若该变量的值为 true，则表示该复选框选中，否则表示不选中。</p>
<p>如果绑定数组或者集合，数组/集合中的元素等于 checkbox 的 value 值，则选中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">爱好：&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;摄影&quot;</span>&gt;&lt;/form:checkbox&gt;摄影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;读书&quot;</span>&gt;&lt;/form:checkbox&gt;读书&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;听音乐&quot;</span>&gt;&lt;/form:checkbox&gt;听音乐&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;看电影&quot;</span>&gt;&lt;/form:checkbox&gt;看电影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;旅游&quot;</span>&gt;&lt;/form:checkbox&gt;旅游&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;玩游戏&quot;</span>&gt;&lt;/form:checkbox&gt;玩游戏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>checkboxes</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:checkboxes items=$&#123;student.hobby&#125; path=<span class="string">&quot;selecHobby&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，是对 <code>&lt;form:checkbox/&gt;</code> 的一种简化，需要结合 items 和 path 属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的集合或数组，可以这样理解，items 为全部可选集合，path 为默认的选中集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>,<span class="string">&quot;看电影&quot;</span>,<span class="string">&quot;旅游&quot;</span>,<span class="string">&quot;玩游戏&quot;</span>));</span><br><span class="line">student.setSelectHobby(Arrays.asList(<span class="string">&quot;摄影&quot;</span>,<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;听音乐&quot;</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">爱好：&lt;form:checkboxes path=<span class="string">&quot;selectHobby&quot;</span> items=<span class="string">&quot;$&#123;student.hobby&#125;&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<p>需要注意的是 path 可以直接绑定模型数据的属性值，items 则需要通过 EL 表达式的形式从域对象中获取数据，不能直接写属性名。</p>
<ul>
<li>rabiobutton</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;from:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;0&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的一个 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，绑定的数据与标签的 value 值相等则为选中，否则不选中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setRadioId(<span class="number">1</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">radiobutton:&lt;form:radiobutton path=<span class="string">&quot;radioId&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;radiobutton&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>radiobuttons</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:radiobuttons itmes=<span class="string">&quot;$&#123;student.grade&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，这里需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，items 为全部的可选类型，path 为默认选中的选项，用法与 <code>&lt;form:checkboxes/&gt;</code> 一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; gradeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">gradeMap.put(<span class="number">1</span>,<span class="string">&quot;一年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">2</span>,<span class="string">&quot;二年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">3</span>,<span class="string">&quot;三年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">4</span>,<span class="string">&quot;四年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">5</span>,<span class="string">&quot;五年级&quot;</span>);</span><br><span class="line">gradeMap.put(<span class="number">6</span>,<span class="string">&quot;六年级&quot;</span>);</span><br><span class="line">student.setGradeMap(gradeMap);</span><br><span class="line">student.setSelectGrade(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">学生年级：&lt;form:radiobuttons items=<span class="string">&quot;$&#123;student.gradeMap&#125;&quot;</span> path=<span class="string">&quot;selectGrade&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>select</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form:select items=<span class="string">&quot;$&#123;student.citys&#125;&quot;</span> path=<span class="string">&quot;selectCity&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>渲染的是 HTML 中的一个 <code>&lt;select/&gt;</code> 标签，需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，用法与 <code>&lt;from:radiobuttons/&gt;</code>一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; cityMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">cityMap.put(<span class="number">1</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">2</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">3</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">cityMap.put(<span class="number">4</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">student.setCityMap(cityMap);</span><br><span class="line">student.setSelectCity(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">所在城市：&lt;form:select items=<span class="string">&quot;$&#123;student.cityMap&#125;&quot;</span> path=<span class="string">&quot;selectCity&quot;</span>&gt;&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>options</li>
</ul>
<p><code>form:select</code> 结合 <code>form:options</code> 的使用，<code>from:select</code> 只定义 path 属性，在 <code>form:select</code> 标签内部添加一个子标签 <code>form:options</code> ，设置 items 属性，获取被遍历的集合。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">  				&lt;form:options items=<span class="string">&quot;$&#123;student.cityMap&#125;&quot;</span>&gt;&lt;/form:options&gt;</span><br><span class="line">				&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>option</p>
<p><code>form:select</code> 结合 <code>form:option</code> 的使用，<code>from:select</code> 定义 path 属性，给每一个 <code>form:option</code> 设置 value 值，path 的值与哪个 value 值相等，该项默认选中。</p>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">&quot;selectCity&quot;</span>&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;1&quot;</span>&gt;杭州&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;2&quot;</span>&gt;成都&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value=<span class="string">&quot;3&quot;</span>&gt;西安&lt;/form:option&gt;</span><br><span class="line">        &lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>textarea</li>
</ul>
<p>渲染的是 HTML 中的一个 <code>&lt;textarea/&gt;</code> ，path 绑定模型数据的属性值，作为文本输入域的默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">student.setIntroduce(<span class="string">&quot;你好，我是...&quot;</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">&quot;student&quot;</span>,student);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">信息：&lt;form:textarea path=<span class="string">&quot;introduce&quot;</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>errors</li>
</ul>
<p>处理错误信息，一般用在数据校验，该标签需要结合 Spring MVC 的验证器结合起来使用。</p>
<h3 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h3><p>Spring MVC 提供了两种数据校验的方式：1、基于 Validator 接口。2、使用 Annotation JSR - 303 标准进行校验。</p>
<p>基于 Validator 接口的方式需要自定义 Validator 验证器，每一条数据的验证规则需要开发者手动完成，使用 Annotation JSR - 303 标准则不需要自定义验证器，通过注解的方式可以直接在实体类中添加每个属性的验证规则，这种方式更加方便，实际开发中推荐使用。</p>
<blockquote>
<p>基于 Validator 接口</p>
</blockquote>
<ul>
<li>实体类 Account</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义验证器 AccountValidator，实现 Validator 接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Account.class.equals(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;name&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>控制器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/validator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;account&quot;</span>,<span class="keyword">new</span> Account());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@Validated</span> Account account, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml 配置验证器。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountValidator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.validator.AccountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;accountValidator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">18</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">31</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;from&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;account&quot;</span> action=<span class="string">&quot;/validator/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名：&lt;form:input path=<span class="string">&quot;name&quot;</span>/&gt;&lt;from:errors path=<span class="string">&quot;name&quot;</span>&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:input path=<span class="string">&quot;password&quot;</span>/&gt;&lt;from:errors path=<span class="string">&quot;password&quot;</span>&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Annotation JSR - 303 标准</p>
</blockquote>
<p>使用 Annotation JSR - 303 标准进行验证，需要导入支持这种标准的依赖 jar 文件，这里我们使用 Hibernate Validator。</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR-303 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过注解的方式直接在实体类中添加相关的验证规则。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Size(min = 6,max = 12,message = &quot;密码6-12位&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email(regexp = &quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;,message = &quot;请输入正确的邮箱格式&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$&quot;,message = &quot;请输入正确的电话&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ValidatorHandler</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;person&quot;</span>,<span class="keyword">new</span> Person());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> Person person, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JSP</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: southwind</span><br><span class="line">  Date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">18</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">29</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">&quot;person&quot;</span> action=<span class="string">&quot;/validator/register2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;form:input path=<span class="string">&quot;username&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:password path=<span class="string">&quot;password&quot;</span>&gt;&lt;/form:password&gt;&lt;form:errors path=<span class="string">&quot;password&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        邮箱：&lt;form:input path=<span class="string">&quot;email&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;email&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        电话：&lt;form:input path=<span class="string">&quot;phone&quot;</span>&gt;&lt;/form:input&gt;&lt;form:errors path=<span class="string">&quot;phone&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>校验规则详解：</p>
<p>@Null                    被注解的元素必须为null</p>
<p>@NotNull                  被注解的元素不能为null</p>
<p>@Min(value)                 被注解的元素必须是一个数字，其值必须大于等于指定的最小值</p>
<p>@Max(value)                被注解的元素必须是一个数字，其值必须小于于等于指定的最大值    </p>
<p>@Email                     被注解的元素必须是电子邮箱地址</p>
<p>@Pattern                  被注解的元素必须符合对应的正则表达式</p>
<p>@Length                   被注解的元素的大小必须在指定的范围内</p>
<p>@NotEmpty                  被注解的字符串的值必须非空</p>
<p>Null 和 Empty 是不同的结果，String str = null，str 是 null，String</p>
]]></content>
      <categories>
        <category>SSM笔记</category>
      </categories>
  </entry>
  <entry>
    <title>回顾JDBC</title>
    <url>/2022/04/21/Mysql/%E5%9B%9E%E9%A1%BEJDBC/%E5%9B%9E%E9%A1%BEJDBC/</url>
    <content><![CDATA[<p>JDBC是接口，数据库厂家实现JDBC接口得jar包，故使用Mysql要导入Mysql的jar包</p>
<p>JDBC.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">user=root</span><br><span class="line">password=123</span><br></pre></td></tr></table></figure>

<p>增删改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest4zsg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定属性配置文件</span></span><br><span class="line">        ResourceBundle resourceBundle=ResourceBundle.getBundle(<span class="string">&quot;JDBC&quot;</span>);</span><br><span class="line">        String driver= resourceBundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        String url= resourceBundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String user=resourceBundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password= resourceBundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2.获取链接</span></span><br><span class="line">            conn= DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3.获取操作数据库对象</span></span><br><span class="line">            st=conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;Update dept set dname=&#x27;销售部2&#x27;,loc=&#x27;天津2&#x27; where deptno=20&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> Count =st.executeUpdate(sql);</span><br><span class="line">            System.out.println(Count==<span class="number">1</span>?<span class="string">&quot;修改成功&quot;</span>:<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(st!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    st.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理查询结果集流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定属性配置文件</span></span><br><span class="line">        ResourceBundle resourceBundle=ResourceBundle.getBundle(<span class="string">&quot;JDBC&quot;</span>);</span><br><span class="line">        String driver= resourceBundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        String url= resourceBundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String user=resourceBundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password= resourceBundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//2.获取链接</span></span><br><span class="line">            conn= DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//3.获取操作数据库对象</span></span><br><span class="line">            st=conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;select empno,ename,sal from emp&quot;</span>;</span><br><span class="line">            rs=st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                String empno=rs.getString(<span class="number">1</span>);</span><br><span class="line">                String ename= rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                Double sal=rs.getDouble(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">                System.out.println(empno+<span class="string">&quot;,&quot;</span>+ename+<span class="string">&quot;,&quot;</span>+sal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    st.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记</title>
    <url>/2023/02/10/SSM%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Spring-框架两大核心机制（IoC、AOP）"><a href="#Spring-框架两大核心机制（IoC、AOP）" class="headerlink" title="Spring 框架两大核心机制（IoC、AOP）"></a>Spring 框架两大核心机制（IoC、AOP）</h3><ul>
<li>IoC（控制反转）/ DI（依赖注入）</li>
<li>AOP（面向切面编程）</li>
</ul>
<p>Spring 是一个企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层，开发者可以自主选择组件。</p>
<p>MVC：Struts2、Spring MVC</p>
<p>ORMapping：Hibernate、MyBatis、Spring Data</p>
<h3 id="如何使用-IoC"><a href="#如何使用-IoC" class="headerlink" title="如何使用 IoC"></a>如何使用 IoC</h3><ul>
<li>创建 Maven 工程，pom.xml 添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.southwind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aispringioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建实体类 Student</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>传统的开发方式，手动 new Student</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1L</span>);</span><br><span class="line">student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">22</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 IoC 创建对象，在配置文件中添加需要管理的对象，XML 格式的配置文件，文件名可以自定义。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从 IoC 中获取对象，通过 id 获取。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p>通过配置 <code>bean</code> 标签来完成对象的管理。</p>
<ul>
<li><p><code>id</code>：对象名。</p>
</li>
<li><p><code>class</code>：对象的模版类（所有交给 IoC 容器来管理的类必须有无参构造函数，因为 Spring 底层是通过反射机制来创建对象，调用的是无参构造）</p>
</li>
</ul>
</li>
<li><p>对象的成员变量通过 <code>property</code> 标签完成赋值。</p>
<ul>
<li><code>name</code>：成员变量名。</li>
<li><code>value</code>：成员变量值（基本数据类型，String 可以直接赋值，如果是其他引用类型，不能通过 value 赋值）</li>
<li><code>ref</code>：将 IoC 中的另外一个 bean 赋给当前的成员变量（DI）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="IoC-底层原理"><a href="#IoC-底层原理" class="headerlink" title="IoC 底层原理"></a>IoC 底层原理</h3><ul>
<li>读取配置文件，解析 XML。</li>
<li>通过反射机制实例化配置文件中所配置所有的 bean。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(<span class="string">&quot;./src/main/resources/&quot;</span>+path);</span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                Element element = iterator.next();</span><br><span class="line">                String id = element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">//通过反射机制创建对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">//获取无参构造函数，创建目标对象</span></span><br><span class="line">                Constructor constructor = clazz.getConstructor();</span><br><span class="line">                Object object = constructor.newInstance();</span><br><span class="line">                <span class="comment">//给目标对象赋值</span></span><br><span class="line">                Iterator&lt;Element&gt; beanIter = element.elementIterator();</span><br><span class="line">                <span class="keyword">while</span>(beanIter.hasNext())&#123;</span><br><span class="line">                    Element property = beanIter.next();</span><br><span class="line">                    String name = property.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    String valueStr = property.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    String ref = property.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(ref == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        String methodName = <span class="string">&quot;set&quot;</span>+name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>);</span><br><span class="line">                        Field field = clazz.getDeclaredField(name);</span><br><span class="line">                        Method method = clazz.getDeclaredMethod(methodName,field.getType());</span><br><span class="line">                        <span class="comment">//根据成员变量的数据类型将 value 进行转换</span></span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;long&quot;</span>)&#123;</span><br><span class="line">                            value = Long.parseLong(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;java.lang.String&quot;</span>)&#123;</span><br><span class="line">                            value = valueStr;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;int&quot;</span>)&#123;</span><br><span class="line">                            value = Integer.parseInt(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        method.invoke(object,value);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//...同理省略</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(id,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="通过运行时类获取-bean"><a href="#通过运行时类获取-bean" class="headerlink" title="通过运行时类获取 bean"></a>通过运行时类获取 bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(Student.class);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<p>这种方式存在一个问题，配置文件中一个数据类型的对象只能有一个实例，否则会抛出异常，因为没有唯一的 bean。</p>
<h3 id="通过有参构造创建-bean"><a href="#通过有参构造创建-bean" class="headerlink" title="通过有参构造创建 bean"></a>通过有参构造创建 bean</h3><ul>
<li><p>在实体类中创建对应的有参构造函数。</p>
<p>@NoArgsConstructor：生成无参的构造方法。<br>@AllArgsConstructor：生成该类下全部属性的构造方法。</p>
</li>
<li><p>配置文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="给-bean-注入集合"><a href="#给-bean-注入集合" class="headerlink" title="给 bean 注入集合"></a>给 bean 注入集合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h3><img src="/2023/02/10/SSM%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/Spring%E7%AC%94%E8%AE%B0/image-20230210205738712.png" class="" title="image-20230210205738712">

<p>Spring 管理的 bean 是根据 scope 来生成的，表示 bean 的作用域，共4种，默认值是 singleton。</p>
<ul>
<li>singleton：单例，表示通过 IoC 容器获取的 bean 是唯一的。</li>
<li>prototype：原型，表示通过 IoC 容器获取的 bean 是不同的。</li>
<li>request：请求，表示在一次 HTTP 请求内有效。</li>
<li>session：回话，表示在一个用户会话内有效。</li>
</ul>
<p>request 和 session 只适用于 Web 项目，大多数情况下，使用单例和原型较多。</p>
<p>prototype 模式当业务代码获取 IoC 容器中的 bean 时，Spring 才去调用无参构造创建对应的 bean。</p>
<p>singleton 模式无论业务代码是否获取 IoC 容器中的 bean，Spring 在加载 spring.xml 时就会创建 bean。</p>
<h3 id="Spring-的继承"><a href="#Spring-的继承" class="headerlink" title="Spring 的继承"></a>Spring 的继承</h3><p>与 Java 的继承不同，Java 是类层面的继承，子类可以继承父类的内部结构信息；Spring 是对象层面的继承，子对象可以继承父对象的属性值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;student2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring 的继承关注点在于具体的对象，而不在于类，即不同的两个类的实例化对象可以完成继承，前提是子对象必须包含父对象的所有属性，同时可以在此基础上添加其他的属性。</p>
<h3 id="Spring-的依赖"><a href="#Spring-的依赖" class="headerlink" title="Spring 的依赖"></a>Spring 的依赖</h3><p>与继承类似，依赖也是描述 bean 和 bean 之间的一种关系，配置依赖之后，被依赖的 bean 一定先创建，再创建依赖的 bean，A 依赖于 B，先创建 B，再创建 A。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-的-p-命名空间"><a href="#Spring-的-p-命名空间" class="headerlink" title="Spring 的 p 命名空间"></a>Spring 的 p 命名空间</h3><p>p 命名空间是对 IoC / DI 的简化操作，使用 p 命名空间可以更加方便的完成 bean 的配置以及 bean 之间的依赖注入。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">p:address-ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-的工厂方法"><a href="#Spring-的工厂方法" class="headerlink" title="Spring 的工厂方法"></a>Spring 的工厂方法</h3><p><strong>工厂模式主要是将创建对象的过程交给工厂进行处理，通过工厂提供给我们需要创建的对象，而不用自己直接去进行对象的创建</strong></p>
<p>IoC 通过工厂模式创建 bean 的方式有两种：</p>
<ul>
<li>静态工厂方法</li>
<li>实例工厂方法</li>
</ul>
<blockquote>
<p>静态工厂方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置静态工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.StaticCarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例工厂方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.InstanceCarFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 赔偿实例工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="IoC-自动装载（Autowire）"><a href="#IoC-自动装载（Autowire）" class="headerlink" title="IoC 自动装载（Autowire）"></a>IoC 自动装载（Autowire）</h3><p>IoC 负责创建对象，DI 负责完成对象的依赖注入，通过配置 property 标签的 ref 属性来完成，同时 Spring 提供了另外一种更加简便的依赖注入方式：自动装载，不需要手动配置 property，IoC 容器会自动选择 bean 完成注入。</p>
<p>自动装载有两种方式：</p>
<ul>
<li>byName：通过属性名自动装载</li>
<li>byType：通过属性的数据类型自动装载</li>
</ul>
<blockquote>
<p>byName</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宝马&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>byType</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;奔驰&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>byType 需要注意，如果同时存在两个及以上的符合条件的 bean 时，自动装载会抛出异常。</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP：Aspect Oriented Programming 面向切面编程。</p>
<p>AOP 的优点：</p>
<ul>
<li>降低模块之间的耦合度。</li>
<li>使系统更容易扩展。</li>
<li>更好的代码复用。</li>
<li>非业务代码更加集中，不分散，便于统一管理。</li>
<li>业务代码更加简洁存粹，不参杂其他代码的影响。</li>
</ul>
<p>AOP 是对面向对象编程的一个补充，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面编程。将不同方法的同一个位置抽象成一个切面对象，对该切面对象进行编程就是 AOP。</p>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul>
<li>创建 Maven 工程，pom.xml 添加</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个计算器接口 Cal，定义4个方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建接口的实现类 CalImpl。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上述代码中，日志信息和业务逻辑的耦合性很高，不利于系统的维护，使用 AOP 可以进行优化，如何来实现 AOP？使用动态代理的方式来实现。</p>
<p>给业务代码找一个代理，打印日志信息的工作交个代理来做，这样的话业务代码就只需要关注自身的业务即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收委托对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;方法的参数是：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        Object result = method.invoke(<span class="keyword">this</span>.object,args);</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是通过动态代理实现 AOP 的过程，比较复杂，不好理解，Spring 框架对 AOP 进行了封装，使用 Spring 框架可以用面向对象的思想来实现 AOP。</p>
<p>Spring 框架中不需要创建 InvocationHandler，只需要创建一个切面对象，将所有的非业务代码在切面对象中完成即可，Spring 框架底层会自动根据切面类以及目标类生成一个代理对象。</p>
<p>LoggerAspect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String args = Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的参数是：&quot;</span>+ args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">     * 属性<span class="number">1.</span> value切入点位置</span><br><span class="line">     *     <span class="number">2.</span> returning 自定义的变量，标识目标方法的返回值</span><br><span class="line">     *     自定义变量名必须和通知方法的形参一样</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的结果是&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法抛出异常：&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerAspect 类定义处添加的两个注解：</p>
<ul>
<li><code>@Aspect</code>：表示该类是切面类。</li>
<li><code>@Component</code>：将该类的对象注入到 IoC 容器。</li>
</ul>
<p>具体方法处添加的注解：</p>
<p><code>@Before</code>：表示方法执行的具体位置和时机。</p>
<p>CalImpl 也需要添加 <code>@Component</code>，交给 IoC 容器来管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring.xml 中配置 AOP。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是Aspect注解生效，为目标类自动生成代理对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>context:component-scan</code> 将 <code>com.southwind</code> 包中的所有类进行扫描，如果该类同时添加了 <code>@Component</code>，则将该类扫描到 IoC 容器中，即 IoC 管理它的对象。 </p>
<p><code>aop:aspectj-autoproxy</code> 让 Spring 框架结合切面类和目标类自动生成动态代理对象。</p>
<ul>
<li>切面：横切关注点被模块化的抽象对象。</li>
<li>通知：切面对象完成的工作。</li>
<li>目标：被通知的对象，即被横切的对象。</li>
<li>代理：切面、通知、目标混合之后的对象。</li>
<li>连接点：通知要插入业务代码的具体位置。</li>
<li>切点：AOP 通过切点定位到连接点。</li>
</ul>
]]></content>
      <categories>
        <category>SSM笔记</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql34道练习题</title>
    <url>/2022/04/22/Mysql/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p>   部门表dept</p>
<p><img src="/2022/04/22/Mysql/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/image-20220422082353066.png"></p>
<p>人员表emp</p>
<p><img src="/2022/04/22/Mysql/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/image-20220422082508655.png"></p>
<p>薪资表salgrade</p>
<p><img src="/2022/04/22/Mysql/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/Mysql34%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/image-20220422082541862.png"></p>
<p>//1.取得每个部门最高薪水的人员名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) maxsal,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno) t</span><br><span class="line"><span class="keyword">ON</span> e.sal <span class="operator">=</span>t.maxsal <span class="keyword">AND</span> e.deptno <span class="operator">=</span>t.deptno;</span><br></pre></td></tr></table></figure>

<p>//2.哪些人的薪水在部门的平均薪水之上</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename,e.deptno,e.sal</span><br><span class="line"><span class="keyword">FROM</span>  emp e</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> deptno ,<span class="built_in">AVG</span>(sal) avgsal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno) t</span><br><span class="line"><span class="keyword">ON</span> e.sal<span class="operator">&gt;</span>avgsal <span class="keyword">AND</span> e.`DEPTNO` <span class="operator">=</span>t.deptno;</span><br></pre></td></tr></table></figure>

<p>//3取得部门中平均的薪水等级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.deptno,<span class="built_in">AVG</span>(s.grade)</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> salgrade s</span><br><span class="line"><span class="keyword">ON</span> e.sal <span class="keyword">BETWEEN</span> losal <span class="keyword">AND</span> hisal </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptno;</span><br></pre></td></tr></table></figure>

<p>//4不准用max函数取得最高薪水</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">SELECT</span> ename ,sal <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>自连接</span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.sal <span class="keyword">FROM</span> emp a <span class="keyword">JOIN</span> emp b <span class="keyword">ON</span> a.sal<span class="operator">&lt;</span>b.sal);</span><br></pre></td></tr></table></figure>

<p>//5取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>MAX</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal) avgsal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> avgsal<span class="operator">=</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(t.avgsal) maxavgsal <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) avgsal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno) t );</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>降序选第一个</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal) avgsal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> avgsal <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>//6取得平均薪水最高的部门名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>按照部门编号分</span><br><span class="line"><span class="keyword">SELECT</span> e.deptno,<span class="built_in">AVG</span>(e.sal) avgsal <span class="keyword">FROM</span> emp e <span class="keyword">JOIN</span> dept t <span class="keyword">ON</span> e.deptno <span class="operator">=</span>t.deptno <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> avgsal <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>按照部门名字分</span><br><span class="line"><span class="keyword">SELECT</span> t.dname,<span class="built_in">AVG</span>(e.sal) avgsal <span class="keyword">FROM</span> emp e <span class="keyword">JOIN</span> dept t <span class="keyword">ON</span> e.deptno<span class="operator">=</span>t.deptno <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.dname <span class="keyword">ORDER</span> <span class="keyword">BY</span> avgsal <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>//7求平均薪水等级最低的部门的部门名称1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.dname,<span class="built_in">AVG</span>(e.sal) avgsal <span class="keyword">FROM</span> emp e <span class="keyword">JOIN</span> dept t <span class="keyword">ON</span> e.deptno<span class="operator">=</span>t.deptno <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.dname ;</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno ;</span><br></pre></td></tr></table></figure>

<p>//8取得比普通员工（员工代码没有在mgr字段上出现的）的最高薪水还要高的领导人姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">NOT</span> <span class="keyword">IN</span> 语句在使用的时候记得要排除掉后边条件里的<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> mgr <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>取得普通人中的最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> mgr <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> mgr <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>));</span><br></pre></td></tr></table></figure>

<p>//9取得薪水最高的前五名员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME,SAL <span class="keyword">FROM</span> EMP <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>  LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>//10取得薪水最高的第6到第10名员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span> LIMIT <span class="number">5</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>//11取得最后入职的5名员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,HIREDATE <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> HIREDATE <span class="keyword">DESC</span> LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>//12取得每个薪水等级有多少员工 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>先找出每个员工的薪水等级</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在根据等级分组统计每个等级中员工的数量</span><br><span class="line"><span class="keyword">SELECT</span> s.grade,<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> emp e </span><br><span class="line"><span class="keyword">JOIN</span> salgrade s </span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">e.sal <span class="keyword">BETWEEN</span> s.losal <span class="keyword">AND</span> s.hisal</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.grade </span><br></pre></td></tr></table></figure>

<p>//14列出所有员工及领导的姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.ename <span class="string">&#x27;员工&#x27;</span>,b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> emp a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp b</span><br><span class="line"><span class="keyword">ON</span> a.mgr<span class="operator">=</span>b.empno;</span><br></pre></td></tr></table></figure>

<p>//15列出受雇日期遭遇其直接上级的所有员工的编号，姓名，部门名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.ename <span class="string">&#x27;员工&#x27;</span> ,a.hiredate,b.ename <span class="string">&#x27;领导&#x27;</span>,b.hiredate,d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp a</span><br><span class="line"><span class="keyword">JOIN</span> emp b</span><br><span class="line"><span class="keyword">ON</span> a.mgr<span class="operator">=</span>b.empno</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> a.deptno <span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">WHERE</span> a.hiredate<span class="operator">&lt;</span>b.hiredate;</span><br></pre></td></tr></table></figure>

<p>//16列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span>,d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>

<p>//17列出至少有5个员工的所有部门<br>//分组函数不能在where子句中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> deptno</span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>//18列出薪资比“SMITH”多的员工的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;SMITH&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>//19列出所有”CLERK“（办事员）的姓名及其部门名称，部门的人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename,e.job,d.dname,d.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno<span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">WHERE</span> job <span class="operator">=</span><span class="string">&#x27;ClERK&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>每个部门的人数</span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> deptcount <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 	t1.<span class="operator">*</span>,t2.deptcount</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> e.ename,e.job,d.dname,d.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno<span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">WHERE</span> job <span class="operator">=</span><span class="string">&#x27;ClERK&#x27;</span>)t1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> deptno,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> deptcount <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno)t2</span><br><span class="line"><span class="keyword">ON</span> t1.deptno<span class="operator">=</span>t2.deptno;</span><br></pre></td></tr></table></figure>

<p>//20列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job <span class="keyword">HAVING</span> <span class="built_in">MIN</span>(sal) <span class="operator">&gt;</span><span class="number">1500</span>;</span><br></pre></td></tr></table></figure>

<p>//21列出在部门”SALES“&lt;销售部&gt;工作的员工的姓名，假定不知道销售部的部门编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp  <span class="keyword">WHERE</span> deptno <span class="operator">=</span>(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname<span class="operator">=</span><span class="string">&#x27;SALES&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>//22列出薪资高于公司平均薪资的所以员工，所在部门，上级领导，雇员的工资等级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename <span class="string">&#x27;员工&#x27;</span>,d.dname,l.ename <span class="string">&#x27;领导&#x27;</span>,s.grade</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp l</span><br><span class="line"><span class="keyword">ON</span> e.mgr<span class="operator">=</span>l.deptno</span><br><span class="line"><span class="keyword">JOIN</span> salgrade s</span><br><span class="line"><span class="keyword">ON</span> e.sal <span class="keyword">BETWEEN</span> s.losal <span class="keyword">AND</span> s.hisal</span><br><span class="line"><span class="keyword">WHERE</span> e.sal<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类实现模糊查询</title>
    <url>/2022/04/27/Mysql/%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Utils.DBUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaTest11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn= DBUtil.getConnection();</span><br><span class="line">            <span class="comment">//错误写法</span></span><br><span class="line"><span class="comment">//            String sql=&quot;select ename from emp where ename like &#x27;_?%&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//            ps=conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//            ps.setString(1,&quot;A&quot;);</span></span><br><span class="line"></span><br><span class="line">            String sql=<span class="string">&quot;select ename from emp where ename like ?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;_A%&quot;</span>);</span><br><span class="line">            rs= ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            DBUtil.close(conn,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>初始化用户界面和登陆方法实现</title>
    <url>/2022/04/26/Mysql/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化一个界面</span></span><br><span class="line">        Map&lt;String,String&gt; userLoginInfo=initUI();</span><br><span class="line">        <span class="comment">//验证用户名和密码</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess=login (userLoginInfo);</span><br><span class="line">        <span class="comment">//最后输出结果</span></span><br><span class="line">        System.out.println(loginSuccess?<span class="string">&quot;登录成功&quot;</span>:<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户登陆信息</span></span><br><span class="line"><span class="comment">     * 传入用户信息判断是否登陆成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false表示失败，true表示成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要有打标记的意识</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        String loginName=userLoginInfo.get(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">        String loginPwd=userLoginInfo.get(<span class="string">&quot;loginPwd&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDBC代码</span></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.取得连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            <span class="comment">//3获取数据库操作对象</span></span><br><span class="line">            st= conn.createStatement();</span><br><span class="line">            <span class="comment">//4执行sql</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from t_user where loginName=&#x27;&quot;</span>+loginName+<span class="string">&quot;&#x27;and loginPwd=&#x27;&quot;</span>+loginPwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            rs=st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//登陆成功</span></span><br><span class="line"></span><br><span class="line">                loginSuccess =<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(st!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    st.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *初始化用户界面</span></span><br><span class="line"><span class="comment">    * return 用户输入的用户名和密码等登录信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">initUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">        String loginName = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        String loginPwd=s.nextLine();</span><br><span class="line">        Map&lt;String,String&gt;userLoginInfo=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;loginName&quot;</span>,loginName);</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;loginPwd&quot;</span>,loginPwd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2022/04/26/Mysql/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/image-20220426203347997.png"></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>账户转账演示事务</title>
    <url>/2022/04/27/Mysql/%E8%B4%A6%E6%88%B7%E8%BD%AC%E8%B4%A6%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1/%E8%B4%A6%E6%88%B7%E8%BD%AC%E8%B4%A6%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sql脚本：</span></span><br><span class="line"><span class="comment"> * drop table if exists t_act;</span></span><br><span class="line"><span class="comment"> * create table t_act(</span></span><br><span class="line"><span class="comment"> *          actno int,</span></span><br><span class="line"><span class="comment"> *          balance double(7,2) //注意：7表示有效数字的个数，2表示小数位的个数</span></span><br><span class="line"><span class="comment"> * );</span></span><br><span class="line"><span class="comment"> *  insert  into t_act values(111,20000);</span></span><br><span class="line"><span class="comment"> *  insert  into t_act values(222,0);</span></span><br><span class="line"><span class="comment"> *  commit;</span></span><br><span class="line"><span class="comment"> *  select * from t_act;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaTest10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            <span class="comment">//将自动提交改为手动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql=<span class="string">&quot;Update t_act set balance=? where actno=?&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给？传值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;20000&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">2</span>,<span class="number">111</span>);</span><br><span class="line">            <span class="keyword">int</span> count =ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;20000&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">2</span>,<span class="number">222</span>);</span><br><span class="line">            count+=ps.executeUpdate();</span><br><span class="line">            System.out.println(count==<span class="number">2</span>?<span class="string">&quot;转账成功&quot;</span>:<span class="string">&quot;转账失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//程序能走到这里说明以上程序无异常，事务结束，手动提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/27/Mysql/%E8%B4%A6%E6%88%B7%E8%BD%AC%E8%B4%A6%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1/%E8%B4%A6%E6%88%B7%E8%BD%AC%E8%B4%A6%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1/image-20220427175705328.png"></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一句</title>
    <url>/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="D19"><a href="#D19" class="headerlink" title="D19"></a>D19</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230630105821422.png" class="" title="image-20230630105821422">

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>✅ <strong>通过谓语动词的数量判断简单句：</strong></p>
<p>本句中只有一个谓语has been，所以是简单句（一件事），不需要在断开。</p>
<p>✅ <strong>去修饰找核心：</strong></p>
<p>介词短语和非谓语动词都是句中的非核心，可以先去掉不看。</p>
<h2 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h2><p>Philharmonic n. 爱乐乐团    phil-,爱    harmonic *adj.*和声的 *n.*泛音；和声</p>
<p>music director 音乐总监</p>
<h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>纽约爱乐乐团决定去聘请Alan Gilbert作为它下一任的音乐总监，这项任命自从2009年突然宣布起就一直是古典音乐界谈论的话题。</p>
<h2 id="语法重点"><a href="#语法重点" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>通过谓语动词的数量判断简单句：</strong></p>
<p>本句中只有一个谓语has been，所以是简单句（一件事），不需要在断开。</p>
<p>✅ <strong>去修饰找核心：</strong></p>
<p>介词短语和非谓语动词都是句中的非核心，可以先去掉不看。</p>
<h1 id="D20"><a href="#D20" class="headerlink" title="D20"></a>D20</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230701154535168.png" class="" title="image-20230701154535168">

<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>reply/are/are</p>
</li>
<li><p><strong>断开：</strong>通过连接词who/that断开</p>
</li>
<li><p><strong>简化：</strong></p>
<p>Devoted concertgoers… are missing the point.</p>
</li>
</ul>
<h2 id="生词-1"><a href="#生词-1" class="headerlink" title="生词"></a>生词</h2><p>✅ devoted adj. 非常热诚的，非常热衷的；专心的；献身的</p>
<p>✅ concertgoer n. 音乐会听众，现场听众        -goer（常去……的人)</p>
<p>✅ recording n. 录音；录像<br>✅ substitute  n. 代替，替代；替代品 v. 代替，替代</p>
<p>✅ live performance n. 现场表演</p>
<h2 id="翻译-1"><a href="#翻译-1" class="headerlink" title="翻译"></a>翻译</h2><p>那些回应称“音乐录音无法替代现场演出”的音乐会忠实听众没有真正抓住核心问题。</p>
<h2 id="语法重点-1"><a href="#语法重点-1" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过连接词who和that找到了从句的开始，从句结束于第二个谓语动词are missing之前。</p>
<hr>
<p>✅<strong>嵌套结构</strong></p>
<p>who引导的定语从句中嵌套了that引导的宾语从句。</p>
<h1 id="D21"><a href="#D21" class="headerlink" title="D21"></a>D21</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230702154725983.png" class="" title="image-20230702154725983">

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>must compete</p>
</li>
<li><p><strong>断开：</strong>通过谓语动词的数量判断简单句</p>
</li>
<li><p>简化：</p>
<p>…instrumentalists must compete…</p>
</li>
</ul>
<h2 id="生词-2"><a href="#生词-2" class="headerlink" title="生词"></a>生词</h2><p>✅ classical instrumentalist 古典音乐演奏家<br>✅ compete v. 比赛，竞赛<br>✅ compete…with… 与……比赛（竞赛）<br>✅ opera house 歌剧院<br>✅ dance troupe 舞团<br>✅ recorded performance 表演的录音（录像）<br>✅ classical musician 古典音乐家</p>
<h2 id="翻译-2"><a href="#翻译-2" class="headerlink" title="翻译"></a>翻译</h2><p>为了获得艺术爱好者的时间、关注和金钱，古典音乐演奏家们不仅要和歌剧院、舞团、剧团和博物馆竞争，而且还必须和20世纪伟大的古典音乐家的演奏录音展开竞争。</p>
<h2 id="语法重点-2"><a href="#语法重点-2" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>通过谓语动词数量判断简单句：</strong></p>
<p>本句中只有一个谓语must compete，所以是简单句（一件事儿），不需要再断开。</p>
<p>✅ <strong>去修饰找核心</strong><br>介词短语是句子的非核心，可以先去掉不看</p>
<p>✅ <strong>平行结构</strong><br>准确找到句子中的三个平行机构：</p>
<ol>
<li><p>For the time, attention, and money</p>
</li>
<li><p>not only with…but also with…</p>
</li>
<li><p>opera houses, dance troupes, theater companies, and museums</p>
</li>
</ol>
<h1 id="D22"><a href="#D22" class="headerlink" title="D22"></a>D22</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230703152940017.png" class="" title="image-20230703152940017">

<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p><strong>找谓语动词：</strong>has made</p>
<h2 id="生词-3"><a href="#生词-3" class="headerlink" title="生词"></a>生词</h2><p>无</p>
<h2 id="翻译-3"><a href="#翻译-3" class="headerlink" title="翻译"></a>翻译</h2><p>金融危机已经使得暂时赋闲在家（待业）以及辞掉不好的工作变得更容易接受。</p>
<h2 id="语法重点-3"><a href="#语法重点-3" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>形式宾语：</strong></p>
<p>it在本句中是形式宾语。考研真题中常出现it作形式主语，但形式宾语较少出现，所以提示大家要注意。</p>
<p>✅ <strong>平行结构：</strong></p>
<p>真正的宾语是to be between jobs or to leave a bad one，并列连词or连接了两个to do词组，组成平行结构。</p>
<h1 id="D23"><a href="#D23" class="headerlink" title="D23"></a>D23</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230704153104094.png" class="" title="image-20230704153104094">

<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>approach/means/stems</p>
</li>
<li><p><strong>断开：</strong>通过连接词that断开</p>
</li>
<li><p>简化：The way…means that…</p>
</li>
</ul>
<h2 id="生词-4"><a href="#生词-4" class="headerlink" title="生词"></a>生词</h2><p>✅ consumer n. 消费者，顾客；用户</p>
<p>✅ approach v. 着手处理；靠近，接近 </p>
<p>✅ purchase n. 购买 v. 购买 </p>
<p>✅ stem from 来源于……, 来自于……</p>
<p>✅ conventional adj. 传统的；常规的；普通的</p>
<h2 id="翻译-4"><a href="#翻译-4" class="headerlink" title="翻译"></a>翻译</h2><p>现在消费者做出购买决策的方式表明，营销的影响来自于超越传统付费媒介的众多因素。</p>
<h2 id="语法重点-4"><a href="#语法重点-4" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句：</strong></p>
<ol>
<li>通过连接词that，找到宾语从句。</li>
<li>通过分析主谓，找到省略了关系词的定语从句，修饰先行词the way。</li>
</ol>
<h1 id="D24"><a href="#D24" class="headerlink" title="D24"></a>D24</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230705153716504.png" class="" title="image-20230705153716504">

<h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>define/is/place</p>
</li>
<li><p><strong>断开：</strong>通过连接词whose/that断开</p>
</li>
</ul>
<h2 id="生词-5"><a href="#生词-5" class="headerlink" title="生词"></a>生词</h2><p>✅ define… as… 把……定义为……</p>
<p>✅ sold media  出售的媒体</p>
<p>✅ owned media  自有媒体</p>
<p>✅ traffic n. 流量；交通</p>
<p>✅ organization n. 组织，机构</p>
<p>✅ content n. 内容</p>
<p>✅ e-commerce engine 电子商务引擎</p>
<p>✅ environment n. 环境</p>
<p>✅ place v. 放在某地 n. 地方；场所</p>
<h2 id="翻译-5"><a href="#翻译-5" class="headerlink" title="翻译"></a>翻译</h2><p>我们把这样的出售媒介定义为“访问量如此之大，以至于其他机构也将广告内容或电子商务引擎放置在它的网络环境中”的自有媒体。</p>
<h2 id="语法重点-5"><a href="#语法重点-5" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>嵌套结构</strong></p>
<p>通过连接词whose和第一个that就找到了从句。</p>
<p>whose引导的定语从句，修饰先行词owned media；</p>
<p>whose定语从句中又嵌套了so… that… 引导的结果状语从句。</p>
<h1 id="D25"><a href="#D25" class="headerlink" title="D25"></a>D25</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230706150043280.png" class="" title="image-20230706150043280">

<h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>alleviate/include</p>
</li>
<li><p><strong>断开：</strong>通过连接词which断开</p>
</li>
</ul>
<h2 id="生词-6"><a href="#生词-6" class="headerlink" title="生词"></a>生词</h2><p>✅ Toyota Motor 丰田汽车公司</p>
<p>✅ alleviate v. 减轻；缓和，缓解</p>
<p>✅ recall crisis 召回的危机</p>
<p>✅ relatively adv. 相对地</p>
<p>✅ well-orchestrated adj. 精心策划的</p>
<p>✅ social-media n. 社交媒体</p>
<p>✅ campaign n. 活动；竞选活动 </p>
<p>✅ engage with sb. 与……接洽；与……交流</p>
<h2 id="翻译-6"><a href="#翻译-6" class="headerlink" title="翻译"></a>翻译</h2><p>例如，丰田汽车公司通过发动相对迅速、协调有致的社交媒介回应活动，包括在微博Twitter和社会新闻网Digg等网站上与消费者直接互动，缓解了今年早些时候的召回危机所造成的部分损害。</p>
<h2 id="语法重点-6"><a href="#语法重点-6" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>去修饰找核心</strong>:</p>
<p>插入语和多个介词短语是句子的非核心成分，可以先不看，尤其注意非常长的with介词短语。</p>
<p>主句的核心：Toyota Motor … alleviated some of the damage …</p>
<h1 id="D26"><a href="#D26" class="headerlink" title="D26"></a>D26</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230707153210399.png" class="" title="image-20230707153210399">

<h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>can be / writes / dampen / can be </p>
</li>
<li><p><strong>断开：</strong>通过连接词that断开</p>
</li>
</ul>
<h2 id="生词-7"><a href="#生词-7" class="headerlink" title="生词"></a>生词</h2><p>✅ day-to-day adj. 日复一日的</p>
<p>✅ raising kids 养育孩子</p>
<p>✅ soul-crushingly 摧毁灵魂般地</p>
<p>✅ in the moment 在此刻；当下</p>
<p>✅ dampen one’s moods 使某人心情沮丧</p>
<p>✅ intense  adj. 强烈的，极度的；非常的</p>
<p>✅ gratification n. 满足</p>
<p>✅ very adj.恰好的，正是的</p>
<h2 id="翻译-7"><a href="#翻译-7" class="headerlink" title="翻译"></a>翻译</h2><p>尽管日复一日的育儿经历艰难到摧残灵魂的地步，但“恰恰是当下打击我们情绪的事情日后会成为我们极度满足和快乐的源泉”，西尼尔写道</p>
<h2 id="语法重点-7"><a href="#语法重点-7" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过逗号、连接词even though、两个that可以把长难句断开。</p>
<ul>
<li>Even Though引导让步状语从句。</li>
<li>第一个that引导宾语从句。</li>
<li>第二个that引导定语从句，修饰先行词the very things。</li>
</ul>
<p>✅ <strong>嵌套结构:</strong></p>
<p>主句中嵌套了that宾语从句，而宾语从句中又嵌套了that定语从句。</p>
<h1 id="D27"><a href="#D27" class="headerlink" title="D27"></a>D27</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230708145647619.png" class="" title="image-20230708145647619">

<h2 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>are provoked/shouldn’t have had/are bothered/are/must be</p>
</li>
<li><p><strong>断开：</strong>通过标点符号和连接词that断开</p>
</li>
</ul>
<h2 id="生词-8"><a href="#生词-8" class="headerlink" title="生词"></a>生词</h2><p>✅ provoke v. 激怒，惹怒；刺激；煽动</p>
<p>✅ wonder v. 想知道</p>
<p>✅ be bothered with… 被……所困扰</p>
<p>✅ misery n. 悲惨</p>
<p>✅ gape v. 裂开，张开</p>
<p>✅ gaping adj. 裂开的，或开的</p>
<h2 id="翻译-8"><a href="#翻译-8" class="headerlink" title="翻译"></a>翻译</h2><p>不幸福的父母很少被激起对“自己是否本不该要孩子”的思考；但不幸福的无子女者会不断被“孩子是世界上唯一最重要的事情”这一信息所烦扰：显然他们的痛苦必定是他们生活中那些豁开的、孩子大小的窟窿所带来的直接后果。</p>
<h2 id="语法重点-8"><a href="#语法重点-8" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过第一个逗号、冒号以及连接词if、but和that断开长难句。</p>
<ul>
<li>连接词if表示“是否”，引导宾语从句，跟在及物动词wonder后。</li>
<li>逗号和连接词but前后连接两句话，构成并列句。</li>
<li>连接词that引导同位语从句，解释说明前面的抽象名词the message。</li>
<li>冒号后引出的句子是对前面的内容进一步解释说明。</li>
</ul>
<h1 id="D28"><a href="#D28" class="headerlink" title="D28"></a>D28</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230709145943702.png" class="" title="image-20230709145943702">

<h2 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>found/will have to/increases</p>
</li>
<li><p><strong>断开：</strong>通过2个连接词that断开</p>
</li>
</ul>
<h2 id="生词-9"><a href="#生词-9" class="headerlink" title="生词"></a>生词</h2><p>✅ departure n.离开<br>✅ depart v. 离开<br>✅ probability  n. 可能性；可能<br>✅ probably adv. 可能地<br>✅ probable adj. 可能的<br>✅ subsequently  adv. 接下来地；随后地；接着地<br>✅ subsequent adj. 随后的，接着的<br>✅ consequently adv. 所以地<br>✅ restate  v. 重申；重新申报<br>✅ increases v. 增加</p>
<h2 id="翻译-9"><a href="#翻译-9" class="headerlink" title="翻译"></a>翻译</h2><p>他们发现，（董事）突然离职后，其所在公司随后需要重申盈利的可能性增加了近20%。</p>
<h2 id="语法重点-9"><a href="#语法重点-9" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>本句话中标点符号不能用来断开长难句，可以通过2个连接词that进行断开。</p>
<p>✅ <strong>嵌套结构</strong></p>
<h1 id="D29"><a href="#D29" class="headerlink" title="D29"></a>D29</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230710150337181.png" class="" title="image-20230710150337181">

<h2 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>believe / have / leave / breaks / shows / were / occurred</li>
<li><strong>断开：</strong>通过标点逗号、连接词或词组that/if/before/even if/at the time、以及分析主谓来断开句子</li>
</ul>
<h2 id="生词-10"><a href="#生词-10" class="headerlink" title="生词"></a>生词</h2><p>✅ reputation n. 名声；声誉 </p>
<p>✅ a blow to reputations 对声誉的打击</p>
<p>✅ review n. 检查；审查；回顾</p>
<p>✅ a review of history 历史记录</p>
<p>✅ board n. 董事会；板子，纸板，木板，黑板</p>
<p>✅ be on the board 在董事会上；在板子上；在飞机上，在车上，在轮船（甲板）上</p>
<p>✅ wrongdoing n. 错事；坏事</p>
<p>✅ occur v. 发生</p>
<h2 id="翻译-10"><a href="#翻译-10" class="headerlink" title="翻译"></a>翻译</h2><p>但研究者认为，如果外部董事在坏消息爆发前就已离开公司，那么他们会更容易避免声誉受损——即便历史记录显示“错误行为形成时，董事们尚在其职”（依然如此）。</p>
<h2 id="语法难点"><a href="#语法难点" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过逗号和连接词（或词组）but、that、if、before、even if、at the time以及分析主谓，来断开长难句，如下：</p>
<ul>
<li>But the researchers believe 主句（But在句首，表示与上一句是转折关系）</li>
<li>that outside directors have an easier time of avoiding a blow to their reputations 宾语从句</li>
<li>if they leave a firm 条件状语从句</li>
<li>before bad news breaks, 时间状语从句</li>
<li>even if a review of history shows 让步状语从句</li>
<li>they were on the board 省略了连接词的宾语从句</li>
<li>at the time any wrongdoing occurred. 时间状语从句</li>
</ul>
<h1 id="D30"><a href="#D30" class="headerlink" title="D30"></a>D30</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230711112347308.png" class="" title="image-20230711112347308">

<h2 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>swept/ harmed/has been concentrated / are</li>
<li><strong>断开：</strong>通过连接词that/where断开</li>
</ul>
<h2 id="生词-11"><a href="#生词-11" class="headerlink" title="生词"></a>生词</h2><p>✅ whirlwind n. 旋风 </p>
<p>✅ sweep  v. 扫；刮 （过去式swept，过去分词swept）</p>
<p>✅ sweep through…  （一阵风）扫过/刮过……</p>
<p>✅ concentrate v. 集中</p>
<p>✅ distinctive adj. 有特色的；与众不同的</p>
<p>✅ least distinctive 最没有特色的</p>
<h2 id="翻译-11"><a href="#翻译-11" class="headerlink" title="翻译"></a>翻译</h2><p>这场席卷整个新闻编辑部的旋风伤及每个人，但大部分损失集中于报纸内容最缺乏特色的部门。</p>
<h2 id="语法难点-1"><a href="#语法难点-1" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅ <strong>断开长难句</strong></p>
<p>连接词that、where和逗号是断开句子的标志。</p>
<ol>
<li><p>连接词that引导定语从句，结束于第二个谓语动词harmed之前，修饰先行词the whirlwind。</p>
</li>
<li><p>连接词where引导定语从句，结束于句尾，修饰先行词areas。</p>
</li>
</ol>
<h1 id="D31"><a href="#D31" class="headerlink" title="D31"></a>D31</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230712150512026.png" class="" title="image-20230712150512026">

<h2 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>tend </li>
<li><strong>简化</strong>：We tend to think of the decades… as a time… </li>
</ul>
<h2 id="生词-12"><a href="#生词-12" class="headerlink" title="生词"></a>生词</h2><p>✅ tend to do sth. 倾向于做某事；往往……</p>
<p>✅ think of A as B  把A认作为B</p>
<p>✅ prosperity  n. 繁荣</p>
<p>✅ G. I. Bill 《退伍军人权利法案》</p>
<p>✅ bill  n. 法案；账单；钞票</p>
<p>✅ line up 排队</p>
<p>✅ bureau n. 局；处</p>
<p>✅ marriage bureau 婚姻登记处</p>
<h2 id="翻译-12"><a href="#翻译-12" class="headerlink" title="翻译"></a>翻译</h2><p>我们往往将二战结束后的几十年看作一个繁荣与增长的时代，数以百万计的士兵们返回家乡；他们在《退伍军人权利法案》的帮助下去上大学；在婚姻登记处排队登记结婚。</p>
<h2 id="语法难点-2"><a href="#语法难点-2" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅ <strong>去修饰找核心</strong>：</p>
<p>句中非谓语动词词组immediately following World War II和介词短语of prosperity and growth，分别修饰前面的名词decades和time，可以先去掉不看。</p>
<p><strong>✅</strong> <strong>伴随结构</strong>+<strong>平行结构:</strong></p>
<ul>
<li>with+名词+非谓语动词，作伴随结构，表示“伴随着有……”。（其实就是独立主格，但术语～你懂的～不重要～）</li>
<li>三个doing词组returning…, going … and lining …平行并列，一起补充soldiers（主动）做什么。</li>
</ul>
<h1 id="D32"><a href="#D32" class="headerlink" title="D32"></a>D32</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230713113117187.png" class="" title="image-20230713113117187">

<h2 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>was/emigrated/took</li>
<li><strong>断开：</strong>通过连接词who断开</li>
</ul>
<h2 id="生词-13"><a href="#生词-13" class="headerlink" title="生词"></a>生词</h2><p>✅ phrase n. 短语，词组；简短的句子；说法</p>
<p>✅ popularize v. 使……受欢迎；普及，推广</p>
<p>✅ architect n. 建筑学家</p>
<p>✅ architecture n. 建筑学；建筑风格</p>
<p>✅ architecture schools  建筑学校</p>
<p>✅ associated with… 与……有联系；与……相关联</p>
<p>✅ emigrate v. 移出（从本国移出到其他国家）</p>
<p>✅ immigrate  v. 移入（从其他国家移入）</p>
<p>✅ take up posts 就职</p>
<h2 id="翻译-13"><a href="#翻译-13" class="headerlink" title="翻译"></a>翻译</h2><p>“少即是多”这句话实际上是首先由一位名叫路德维希•密斯•凡德罗的德国建筑家推广开来的，像其他与包豪斯建筑学院相关的设计师一样，他在二战之前移民到美国，并曾在美国多个建筑学院任职。</p>
<h2 id="语法难点-3"><a href="#语法难点-3" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅分裂结构</p>
<p>✅断开长难句</p>
<p>找到断开位置标志和找从句结束位置，理清整体句子结构</p>
<h1 id="D33"><a href="#D33" class="headerlink" title="D33"></a>D33</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230715151737721.png" class="" title="image-20230715151737721">

<h2 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>may have mispredicted/would impact/acquired/got/was/was </li>
<li><strong>断开：</strong>通过连接词how/that/though断开</li>
</ul>
<h2 id="生词-14"><a href="#生词-14" class="headerlink" title="生词"></a>生词</h2><p>✅ mispredict v. 错误的预测；错误的预估</p>
<p>✅ mechanical revolution 机械革命</p>
<p>✅ acquire v. 需要；需求</p>
<p>✅ helicopter n. 直升飞机   helico-,螺旋，-pter,翅膀</p>
<p>✅ clothes dryer 干衣机，烘干机</p>
<p>✅ belief n. 信念，信仰</p>
<p>✅ self-sufficiency n. 自给自足，自我满足</p>
<p>✅ desirable adj. 令人满意的，值得拥有的</p>
<p>✅ inevitable adj. 不可避免的；必然会发生的</p>
<h2 id="翻译-14"><a href="#翻译-14" class="headerlink" title="翻译"></a>翻译</h2><p>在罗夫•雷普森的案例研究住宅中，他可能错误预测了机械革命对日常生活可能产生的影响——尽管大多数美国家庭都拥有了干衣机，但很少有能拥有直升机的——但他认为自给自足既是理想的，也是必然的，这一信念却得到了广泛传播。</p>
<h2 id="语法难点-4"><a href="#语法难点-4" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅ <strong>找从句</strong>:</p>
<ul>
<li>连接词how引导宾语从句，跟在及物动词mispredicted后。</li>
<li>连接词that引导的同位语从句，解释说明抽象名词his belief。</li>
<li>连接词though引导让步状语从句。</li>
</ul>
<h1 id="D34"><a href="#D34" class="headerlink" title="D34"></a>D34</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230715153608056.png" class="" title="image-20230715153608056">

<h2 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>have lost/will converge/denies</li>
<li><strong>断开：</strong>通过连接词that/which断开</li>
</ul>
<h2 id="生词-15"><a href="#生词-15" class="headerlink" title="生词"></a>生词</h2><p>✅ faith n. 信任；信念；信仰</p>
<p>✅ lose faith 失去信心</p>
<p>✅ euro zone 欧元区</p>
<p>✅ converge v. (线条、运动的物体等)汇于一点, 向一点会合；使聚集</p>
<p>✅ thanks to 由于，多亏了</p>
<p>✅ discipline n. 纪律，原则；学科；训练；处罚</p>
<p>✅ currency n. 货币</p>
<p>✅ deny v. 否认，拒绝</p>
<p>✅ uncompetitive adj. 无竞争力的，缺乏竞争力的</p>
<p>✅ quick fix 应急措施，权宜之计</p>
<p>✅ devaluation n. （货币）贬值</p>
<h2 id="翻译-15"><a href="#翻译-15" class="headerlink" title="翻译"></a>翻译</h2><p>欧元区国家，无论强弱，会由于共有单一货币这一原则——这让缺乏竞争力的成员国无法采取货币贬值这一权宜之计——而走向联合，对此，市场已然失去信心。</p>
<h2 id="语法重点-10"><a href="#语法重点-10" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过连接词that和which断开句子。</p>
<ul>
<li>连接词that引导同位语从句，解释说明抽象名词faith。</li>
<li>连接词which引导定语从句，修饰the discipline of sharing a single currency。</li>
<li>主句：Markets have lost faith …</li>
</ul>
<h1 id="D35"><a href="#D35" class="headerlink" title="D35"></a>D35</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230716151541571.png" class="" title="image-20230716151541571">

<h2 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>insists/should involve/is/fears/favour</li>
<li><strong>断开：</strong>通过连接词that/whom断开</li>
</ul>
<h2 id="生词-16"><a href="#生词-16" class="headerlink" title="生词"></a>生词</h2><p>✅ insist v. 坚持，坚持认为；强调</p>
<p>✅ co-ordination n. 协作；协调，和谐</p>
<p>✅ EU = European Union 欧盟</p>
<p>✅ a small majority 微弱多数</p>
<p>✅ liberalism n. 自由主义</p>
<p>✅ rigour n. 严格，严苛</p>
<p>✅ favour v. 赞成；喜爱；有助于</p>
<p>✅ favourite adj. 特别受喜爱的  n. 特别喜爱的人(或物)</p>
<p>✅ favourable adj. 赞许的, 赞同的；有利的, 顺利的</p>
<p>✅ interference n. 干涉, 介入；阻碍, 干扰</p>
<h2 id="翻译-16"><a href="#翻译-16" class="headerlink" title="翻译"></a>翻译</h2><p>它（德国）坚持认为经济协作应该包含欧盟俱乐部的所有27国成员，在它们当中，支持自由市场自由主义和从严的经济政策占微弱多数；（不过）单从内部核心来看，德国担心，微弱多数会支持法国的干涉。</p>
<h2 id="语法重点-11"><a href="#语法重点-11" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<ul>
<li>连接词that引导宾语从句，跟在及物动词insists后面。</li>
<li>whom引导的定语从句，注意介词among被提前。</li>
<li>省略了连接词that的宾语从句，跟在及物动词fears后面。</li>
</ul>
<p><strong>✅</strong> <strong>准确找到定语从句的先行词：</strong></p>
<p>among whom 是介词提前的定语从句，修饰的先行词不是距离最近的EU club，而是修饰先行词all 27 members。</p>
<p><strong>✅</strong> <strong>for的熟词僻义</strong></p>
<p>介词for常用的意思有2个，一个表示目的“为了……”，另一个表示针对的对象“对于……”，但在本句中考察熟词僻义，意思为“支持”。</p>
<h1 id="D36"><a href="#D36" class="headerlink" title="D36"></a>D36</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230717112252972.png" class="" title="image-20230717112252972">

<h2 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>contends / can be / calls / use</li>
<li><strong>断开：</strong>通过标点逗号和连接词that/what/(in) which断开</li>
</ul>
<h2 id="生词-17"><a href="#生词-17" class="headerlink" title="生词"></a>生词</h2><p>✅ contend v. 主张；坚决认为，坚持认为</p>
<p>✅ peer pressure  同侪压力</p>
<p>✅ social cure  社会治疗</p>
<p>✅ organization  n. 机构；组织</p>
<p>✅ official  n. 官员</p>
<p>✅ group dynamics  群体的力量；群体的互动</p>
<p>✅ individual  n. 个人，个体</p>
<h2 id="翻译-17"><a href="#翻译-17" class="headerlink" title="翻译"></a>翻译</h2><p>但Tina Rosenberg在其新作《加入俱乐部》中声称，通过她所谓的“社会治疗”，同侪压力也可以成为一种积极的力量。在“社会治疗”中，组织机构和官员们利用群体互动的力量来帮助个人改善生活，甚至可能改进整个世界。</p>
<h2 id="语法重点-12"><a href="#语法重点-12" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>找到从句，并判断从句的种类：</strong></p>
<ul>
<li><p>that引导宾语从句，跟在及物动词contends后面。</p>
</li>
<li><p>what引导的宾语从句，跟在介词through后面。</p>
</li>
<li><p>in which介词提前的定语从句，修饰先行词social cure。</p>
</li>
</ul>
<p>✅ 注意从句2和从句3介词所属：</p>
<p>   2个句子均为介词+从句的结构，但是：</p>
<ul>
<li>从句2的介词不属于从句（介词+what宾语从句）</li>
<li>从句3的介词属于从句（in which介词提前的定语从句）</li>
</ul>
<p>⚠️ 如何判断呢？最简单的办法是看连接词。</p>
<ul>
<li>如果连接词是which或者是whom，有可能是介词提前的定语从句；</li>
<li>如果是其他连接词，则介词不属于从句。</li>
</ul>
<h1 id="D37"><a href="#D37" class="headerlink" title="D37"></a>D37</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230718150531475.png" class="" title="image-20230718150531475">

<h2 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>raised / made</li>
<li><strong>断开：</strong>通过标点破折号和连接词after断开</li>
</ul>
<h2 id="生词-18"><a href="#生词-18" class="headerlink" title="生词"></a>生词</h2><p>✅ a string of accidents 一系列的事故；一连串的事故</p>
<p>✅ partial  adj. 局部的</p>
<p>✅ collapse  n./v. 坍塌</p>
<p>✅ discovery  n. 发现</p>
<p>✅ underground  adj. 地下的</p>
<p>✅ leakage  n. 泄露</p>
<p>✅ raise  v. 举起，抬起；升起</p>
<p>✅ question  n. 疑问；问题</p>
<p>✅ raise question 引起质疑，引发质疑</p>
<p>✅ misleading  adj. 误导的</p>
<h2 id="翻译-18"><a href="#翻译-18" class="headerlink" title="翻译"></a>翻译</h2><p>一系列的事故，包括2007年冷却塔局部倒塌以及地下管道系统泄露为人所知，使得人们既对Vermont Yankee核电厂的安全也对Entergy公司的管理提出了严重质疑。尤其是在该公司对（问题）管道做出了误导性陈述之后更是如此。</p>
<h2 id="语法重点-13"><a href="#语法重点-13" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过破折号和后面的连接词after断开，其后的句子为after时间状语从句，前半句为主句。</p>
<p><strong>✅</strong> <strong>去修饰找核心：</strong></p>
<p>插入语、形容词以及介词短语是句子的非核心，可以先去掉不看</p>
<ul>
<li>主句的核心：<strong>A</strong> <strong>string of accidents…raised…questions…</strong></li>
<li>从句的核心：<strong>…after the company made…statements…</strong></li>
</ul>
<h1 id="D38"><a href="#D38" class="headerlink" title="D38"></a>D38</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230719111803983.png" class="" title="image-20230719111803983">

<h2 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>are/has ruled/do have/say/will offer/extend</li>
<li><strong>断开：</strong>通过通过标点、连接词whereas/that/how和分析主谓断开</li>
</ul>
<h2 id="生词-19"><a href="#生词-19" class="headerlink" title="生词"></a>生词</h2><p>✅ obscure adj. 模糊不清的；晦涩难懂的，费解的</p>
<p>✅ whereas  conj. 然而，但是；虽然，尽管</p>
<p>✅ Supreme Court  最高法院</p>
<p>✅ regulatory authority  管理权，管辖权</p>
<p>✅ nuclear power  核能</p>
<p>✅ precedent-setting  adj. 开创先例的，开创先河的</p>
<h2 id="翻译-19"><a href="#翻译-19" class="headerlink" title="翻译"></a>翻译</h2><p>此案件中的法律问题模糊不清：虽然最高法院已经判定各州对核能确实具有某些管理权，但法律学者说，Vermont州案件将会对检验“州政府的权利究竟有多大”提供一个先例。</p>
<h2 id="语法重点-14"><a href="#语法重点-14" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>判断长难句中包含了几件事：</strong></p>
<p>根据谓语动词的数量（are, has ruled, do have, say, will offer, extend共 6个谓语动词），可以判断出长难句中包含了6件事，可以断成6段。</p>
<p><strong>✅</strong> <strong>断开长难句：</strong></p>
<p>通过标点、连接词和分析主谓3种办法断开长难句。</p>
<h1 id="D39"><a href="#D39" class="headerlink" title="D39"></a>D39</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230724145121567.png" class="" title="image-20230724145121567">

<h2 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h2><p>​    标点、连接词、分析主谓</p>
<ul>
<li><strong>找谓语动词：</strong>is done / are waiting / use</li>
<li><strong>断开：</strong>通过通过标点、连接词that/who断开</li>
</ul>
<h2 id="生词-20"><a href="#生词-20" class="headerlink" title="生词"></a>生词</h2><p>✅ idealize v. 理想化</p>
<p>✅ idealized version 理想化的版本   </p>
<p>✅ observe  v. 观察；观测 </p>
<p>✅ collect  v. 收集</p>
<p>✅ objective researcher  客观的研究人员/研究者 </p>
<p>✅ carry out one’s work  开展/进行某人的工作</p>
<h2 id="翻译-20"><a href="#翻译-20" class="headerlink" title="翻译"></a>翻译</h2><p>在理想化的科学研究中，有关这个世界的真相，正在等待着运用科学方法开展研究的研究者们，来观察和收集。</p>
<h2 id="语法重点-15"><a href="#语法重点-15" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ 断开+<strong>判断长难句：</strong></p>
<p>通过逗号和连接词how、who断开长难句。<br>\1. how引导的从句跟在介词后面，因此是宾语从句。<br>\2. who引导定语从句，修饰先行词researchers。    </p>
<p>⚠️ </p>
<p>“名词+从句”有2种可能性：定语从句或同位语从句。</p>
<p>今天的句子中researchers+who从句，其中名词researchers表示“研究人员”，不需要进一步解释说明（既不需要同位语从句），因此本句话为定语从句。</p>
<p>但如果从句前的名词是事实fact、理论theory、消息information这类抽象名词，需要进一步解释说明，则后面有可能接同位语从句。</p>
<h1 id="D40"><a href="#D40" class="headerlink" title="D40"></a>D40</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230724150133163.png" class="" title="image-20230724150133163">

<h2 id="分析-21"><a href="#分析-21" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong> works / transforms</li>
<li><strong>断开：</strong>通过标点和连接词as断开长难句。</li>
</ul>
<h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>✅ a discovery claim 发现声明</p>
<p>✅ works one’s way through… 排除困难通过……</p>
<p>✅ community n. 社会，社区，社团（文中指科学界）</p>
<p>✅ interaction n. 相互作用，相互影响，互动</p>
<p>✅ confrontation n. 对抗, 对抗的事物</p>
<p>✅ science and technology 科学与技术，科技</p>
<p>✅ transform… into… 把……转变成……</p>
<h2 id="翻译-21"><a href="#翻译-21" class="headerlink" title="翻译"></a>翻译</h2><p>在发现声明通过科学界的逐级审查之时，与该科技相容或相抗的理念间的相互作用、相互对抗，把个人的研究发现转变成科学界的可信发现。</p>
<h2 id="语法重点-16"><a href="#语法重点-16" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>动词</strong>-ed/ing<strong>转变为形容词来使用：</strong></p>
<ul>
<li>shared and competing beliefs </li>
<li>the science and the technology involved</li>
</ul>
<p><strong>✅</strong> <strong>断开长难句</strong>+去修饰找核心</p>
<p>通过标点和连接词as断开长难句。</p>
<p>介词短语是句子的非核心，可以先去掉不看。</p>
<p>从句的核心：As a discovery claim works its way…主句的核心：the interaction and confrontation… transforms an individual’s discovery claim into the community’s credible discovery.</p>
<h1 id="D41"><a href="#D41" class="headerlink" title="D41"></a>D41</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230724151053616.png" class="" title="image-20230724151053616">

<h2 id="分析-22"><a href="#分析-22" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong> is / is / have fought</li>
<li><strong>断开：</strong>根据标点逗号和连接词Even though/that来断开句子</li>
</ul>
<h2 id="生词-21"><a href="#生词-21" class="headerlink" title="生词"></a>生词</h2><p>✅ variable n. 变量，可变因素</p>
<p>✅ teachers’ union  教师工会</p>
<p>✅ fight v. 吵架，打架；战斗，斗争 （过去式/过去分词fought）</p>
<p>✅ fight against… 与……打架</p>
<p>✅ get rid of… 除掉, 去掉；摆脱</p>
<p>✅ promote  v. 推动，促进；提拔；促销</p>
<h2 id="翻译-22"><a href="#翻译-22" class="headerlink" title="翻译"></a>翻译</h2><p>尽管众多证据表明，教师素质是（影响教育水平的）最重要可变因素，但教师工会还是一直抗议对教师行业进行优胜劣汰。</p>
<h2 id="语法重点-17"><a href="#语法重点-17" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>嵌套结构：</strong></p>
<p>even though让步状语从句中嵌套了that同位语从句。 </p>
<p><strong>✅ 平行结构：</strong><br>getting rid of bad ones 与 promoting good ones两个doing平行并列，跟在介词against作宾语</p>
<h1 id="D42"><a href="#D42" class="headerlink" title="D42"></a>D42</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230724152045333.png" class="" title="image-20230724152045333">

<h2 id="分析-23"><a href="#分析-23" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong> is giving / do not do / is going / need</p>
</li>
<li><p><strong>断开：</strong>通过标点和连接词if、who、that断开长难句</p>
</li>
</ul>
<h2 id="生词-22"><a href="#生词-22" class="headerlink" title="生词"></a>生词</h2><p>✅ essentially adv. 本质上的，根本上的<br>✅ give a pass to… 对……给予通行证<br>✅ complicated adj.复杂的；棘手的，难以对付的；难懂的<br>✅ go close to… 走近/接近/靠近……<br>✅ implication n. 含义；暗示</p>
<h2 id="翻译-23"><a href="#翻译-23" class="headerlink" title="翻译"></a>翻译</h2><p>但如果地区（学区）本质上是在给那些因家庭复杂而不做作业的学生以通行证，则近于冒险暗示应降低对贫困孩子的标准</p>
<h2 id="语法重点-18"><a href="#语法重点-18" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过标点和连接词if、who、that断开长难句。</p>
<ol>
<li>if引导条件状语从句；</li>
<li>who引导定语从句，修饰先行词students；</li>
<li>that引导同位语从句，解释说明抽象名词implication。 </li>
</ol>
<p><strong>✅</strong> <strong>应用拓展</strong>：</p>
<ol>
<li><p>如果句首出现并列连词and、but、or通常是不能用来断开长难句的，但可以帮助大家知道这句话与上一句话之间的关系。比如今天句子中的but就表示本句话和上一句话是转折的关系。</p>
</li>
<li><p>如果是because单独出现，后面是可以接句子的；但是because of这个词组出现，后面只能接词或词组，不能接句子。</p>
</li>
</ol>
<h1 id="D43"><a href="#D43" class="headerlink" title="D43"></a>D43</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230724153205414.png" class="" title="image-20230724153205414">

<h2 id="分析-24"><a href="#分析-24" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong> is not / is / is / may celebrate / fuses</p>
</li>
<li><p><strong>断开：</strong>通过标点和连接词断开长难句</p>
</li>
</ul>
<h2 id="生词-23"><a href="#生词-23" class="headerlink" title="生词"></a>生词</h2><p>✅ intrinsically adv. 从本质上来说；跟本地</p>
<p>✅ a tiny slice of…  ……中的一小片；……当中的一小部分</p>
<p>✅ celebrate  v. 庆祝；颂扬，赞美，歌颂</p>
<p>✅ in one way  在某一个方面，从某一部分/某一个方面来说</p>
<p>✅ repeatedly  adv. 重复地；再三地</p>
<p>✅ firmly  adv. 坚定地；坚决地；坚固地；强有力地</p>
<p>✅ fuse  v. 熔化 n. 保险丝</p>
<p>✅ fuse A to B  把A和B熔合在一起</p>
<p>✅ identity  n. 身份；特性</p>
<p>✅ appearance  n. 出现，露面；外貌，外表</p>
<h2 id="翻译-24"><a href="#翻译-24" class="headerlink" title="翻译"></a>翻译</h2><p>并不是粉色本身不好，而是它只是七色彩虹中那么一丝而已。虽说粉色在某种程度上能为少女时代添色，但它一而再地，强有力地将女孩儿特质与其外表相熔合。</p>
<h2 id="语法重点-19"><a href="#语法重点-19" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong>：</p>
<p>通过标点和连接词断开长难句。整个句子通过but、and并列了3件事，并且句子中插入了though引出的让步状语从句。</p>
<p><strong>✅</strong> <strong>准确判断四个it分别指代什么</strong>：</p>
<p>第一个it是构成强调句的搭配it is…that…，无指代；余下三个it均指代前半句中提到的单数名词pink。</p>
<h1 id="D44"><a href="#D44" class="headerlink" title="D44"></a>D44</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230727113925962.png" class="" title="image-20230727113925962">

<h2 id="分析-25"><a href="#分析-25" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong> was / became / came / began / defined</p>
</li>
<li><p><strong>断开：</strong>通过标点逗号和连接词when/when/what来断开句子。</p>
</li>
</ul>
<p> ⚠️（注意这里面有强调句It was… that不断开）</p>
<h2 id="生词-24"><a href="#生词-24" class="headerlink" title="生词"></a>生词</h2><p>✅ not until… 直到……才</p>
<p>✅ amplify v. 扩大，增强</p>
<p>✅ dominant adj. 首要的；支配的，统治的；占优势的；显性的</p>
<p>✅ marketing strategy 市场策略</p>
<p>✅ come into its own 显示出用处</p>
<p>✅ inherently adv. 天性地，固有地</p>
<p>✅ critical adj. 关键的，决定性的；评论的，批评的</p>
<h2 id="翻译-25"><a href="#翻译-25" class="headerlink" title="翻译"></a>翻译</h2><p>直到20世纪80年代中期，随着强化年龄和性别差异成为儿童市场主要营销策略时，当粉色开始显示出对女孩儿天然的吸引力时，才开始充分发挥其将女孩儿定义为女性的作用，至少在最初关键的几年里是如此。</p>
<h2 id="语法重点-20"><a href="#语法重点-20" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>分裂结构：</strong></p>
<p>两个when从句分别作了插入语，插入到句子的中间，造成句子分裂。</p>
<p><strong>✅</strong> <strong>准确判断2个when从句的作用：</strong></p>
<ol>
<li><p>第一个when引导非限定性定语从句，补充说明mid-1980s；</p>
</li>
<li><p>第二个when引导时间状语从句。</p>
</li>
</ol>
<p><strong>✅</strong> <strong>准确判断it  was…that…是强调句：</strong><br>在考研真题中，如果遇到it is…that或it was…that要提高警惕，很有可能会是强调句。如果把it is/was…that去掉，剩下的部分能构成一个完整的句子，那么就是强调句，例如本句。</p>
<p><strong>✅</strong> <strong>准确理解词句及特殊成分：</strong></p>
<ol>
<li><p>not until的含义“直到……才”；</p>
</li>
<li><p>amplifying age and sex differences是doing的词组作主语；</p>
</li>
<li><p>part of what… 介词后接的是宾语从句。</p>
<pre><code>                                            ⚠️
</code></pre>
</li>
</ol>
<p>not until意为“直到……才”，很多同学会好奇not表示否定，但是翻译成中文却没有“不”的意思，为什么？</p>
<p>例：I did not sleep until 9:00.<br>我没睡的状态持续到九点钟，换句话说就是“直到九点钟我才睡”。</p>
<p>再比如本句中：<br>It was not until the mid-1980s that pink fully came into its own.<br>直到20世纪80年代中期，……才开始充分发挥其将女孩儿定义为女性的作用。</p>
<h1 id="D45"><a href="#D45" class="headerlink" title="D45"></a>D45</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230801112519140.png" class="" title="image-20230801112519140">

<h2 id="分析-26"><a href="#分析-26" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>make / is / may not be patented / suppress / restrict</p>
</li>
<li><p><strong>断开：</strong>通过标点冒号/分号和连接词so/and断开长难句</p>
</li>
</ul>
<h2 id="生词-25"><a href="#生词-25" class="headerlink" title="生词"></a>生词</h2><p>✅ critic n. 批评者，评论家</p>
<p>✅ argument n. 争吵；论据，论证</p>
<p>✅ make arguments against… 提出反对……的理由</p>
<p>✅ gene n. 基因</p>
<p>✅ genetic adj. 基因的；遗传的</p>
<p>✅ patent n. 专利权；专利品 v. 取得…的专利权；授予专利</p>
<p>✅ a product of nature 自然的产物</p>
<p>✅ suppress v. 抑制；压制，镇压</p>
<p>✅ suppress innovation 抑制创新</p>
<p>✅ reward v. 奖赏，奖励；酬谢</p>
<p>✅ monopoly n. 垄断；垄断者</p>
<p>✅ restrict access to… 限制对……使用      </p>
<h2 id="翻译-26"><a href="#翻译-26" class="headerlink" title="翻译"></a>翻译</h2><p>批评者主要提出了三条反对基因专利的理由：基因是自然的产物，所以不可申请专利；基因专利抑制了创新而非给创新以奖励；专利垄断限制了人们对基因测试的使用，如对Myriad基因测试的使用。</p>
<h2 id="语法重点-21"><a href="#语法重点-21" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>标点：</strong></p>
<p>通过冒号，逗号和分号断开长难句。</p>
<p>⚠️注意：标点不仅可以用来断开长难句，不同的标点还可以帮助理解句意。</p>
<ol>
<li><p>冒号：表示进一步的解释说明，考研真题中往往出现总分结构，冒号前总说，冒号后进一步的解释说明；</p>
</li>
<li><p>分号：表示并列，本句中2个分号并列3个内容；</p>
</li>
<li><p>逗号：普通的停顿。</p>
</li>
</ol>
<h1 id="D46"><a href="#D46" class="headerlink" title="D46"></a>D46</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230801113928220.png" class="" title="image-20230801113928220">

<h2 id="分析-27"><a href="#分析-27" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>suggests / see / catch / would have been / had graduated / is / are left</p>
</li>
<li><p><strong>断开：</strong>通过标点冒号/分号和连接词that/where/if可以断开长难句</p>
</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/eO88dzLS64Faz2FPkgvicia3oEIpEibIdsRGA41LoVpXBwWkunFfrohLzue1E0hPKAULDM8uv6lEZK9euQhDuxHZg/640?wx_fmt=png" alt="img"></p>
<h2 id="生词-26"><a href="#生词-26" class="headerlink" title="生词"></a>生词</h2><p>✅ graduate v. (从…)大学毕业, 获得(学士)学位</p>
<p>✅ recession n. 经济衰退; 不景气</p>
<p>✅ dim v. (使)变暗淡, (使)变模糊</p>
<p>✅ catch up to… 赶上</p>
<p>✅ be left behind 被落下，被落在后面      </p>
<h2 id="翻译-27"><a href="#翻译-27" class="headerlink" title="翻译"></a>翻译</h2><p>哥伦比亚大学经济学家Till Von Wachter在报告中指出，不是所有坠入衰退时期的人都认为人生机会渺茫：那些毕业于名牌大学的人会相当快地到达其繁荣时期毕业时本该置身其中的位置，落后的是那些不如他们的普通大众。</p>
<h2 id="语法重点-22"><a href="#语法重点-22" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>通过标点判断句子之间的关系：</strong></p>
<p>冒号前是总说；冒号后是分说，进一步的解释说明。</p>
<p>分号表示并列。</p>
<p><strong>✅</strong> <strong>通过连接词及从句位置判断从句：</strong></p>
<ol>
<li><p>第一个that引导宾语从句，跟在及物动词suggests后面;</p>
</li>
<li><p>where引导宾语从句，跟在介词to后面；</p>
</li>
<li><p>if引导条件状语从句。</p>
</li>
</ol>
<p><strong>✅</strong> <strong>理解强调和虚拟两种特殊句式：</strong></p>
<ol>
<li><p>If引导虚拟条件句，假设过去；</p>
</li>
<li><p>It is… that… 构成强调句，强调the masses beneath them。</p>
</li>
</ol>
<p><strong>✅</strong> 强调句和it形式主语的区分</p>
<p>判断是不是强调句的标准是去掉“it is/was”和“that(who/whom/which)”,如果余下部分是一个完整的句子,说明原句是一个强调句,否则就是一个由it作形式主语的句子。</p>
<h1 id="D48"><a href="#D48" class="headerlink" title="D48"></a>D48</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230804112132409.png" class="" title="image-20230804112132409">

<h2 id="分析-28"><a href="#分析-28" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>encourage / don’t advertise</li>
<li><strong>断开：</strong>通过标点破折号和连接词although来断开长难句</li>
</ul>
<h2 id="生词-27"><a href="#生词-27" class="headerlink" title="生词"></a>生词</h2><p>✅ style-conscious consumers 有时尚意识的消费者</p>
<p>✅ disposable adj. 一次使用后即丢掉的, 一次性的；可支配的</p>
<p>✅ mean to do 打算做某事（过去式/过去分词meant）</p>
<p>✅ last only a wash or two 只禁得住洗一两次</p>
<p>✅ advertise v. 公布, 宣传；做广告</p>
<p>✅ wardrobe n. 衣柜；行头</p>
<h2 id="翻译-28"><a href="#翻译-28" class="headerlink" title="翻译"></a>翻译</h2><p>这些品牌鼓动那些追求时尚的消费者们将衣服视为用完即弃的物品——原本就只用来穿一两水，虽然它们并非如此宣扬——且隔不了几周就要更新一次衣橱。</p>
<h2 id="语法重点-23"><a href="#语法重点-23" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>平行结构作宾语的补足语：</strong></p>
<p>根据并列连词and判断to see…和to renew…平行并列，一起作宾语的补足语，补充说明consumers 。</p>
<p><strong>✅ 准确理解插入语：</strong><br>插入语是由词组及although引导的让步状语从句组成的，进一步解释说明disposable。</p>
<p><strong>⚠️</strong></p>
<p><strong>如果在考研阅读真题中遇到了成对的逗号、破折号或括号，可以直接判断出成对的标点中间的部分为插入语，表示额外的补充说明，可以后看。</strong></p>
<h2 id="D49"><a href="#D49" class="headerlink" title="D49"></a>D49</h2><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230804112656397.png" class="" title="image-20230804112656397">

<h2 id="分析-29"><a href="#分析-29" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>has / are wasted/ is/ knows</li>
<li><strong>断开：</strong>通过标点破折号/逗号和连接词that来断开长难句</li>
</ul>
<h2 id="生词-28"><a href="#生词-28" class="headerlink" title="生词"></a>生词</h2><p>✅ budget n. 预算，经费<br>✅ advertising budget 广告预算</p>
<h2 id="翻译-29"><a href="#翻译-29" class="headerlink" title="翻译"></a>翻译</h2><p>常言道，一半的广告预算都被浪费了——问题是，没人知道是哪一半。</p>
<h2 id="语法重点-24"><a href="#语法重点-24" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>代词it和同位语从句：</strong></p>
<p>连接词that引导同位语从句，解释说明前面的代词it。</p>
<p>反过来也可以理解为it指代的是that同位语从句。</p>
<p><strong>✅ 表语从句that的省略：</strong></p>
<p>the trouble is后面应该接表语从句that…，但是本句中that被省略，换成了逗号。</p>
<p>**✅ 破折号的用法：<br>**</p>
<p>考研真题中，出现一个破折号和两个破折号的意思是完全不一样的：</p>
<ul>
<li>一个破折号通常表示后面进一步解释说明前面的，用法类似于冒号；</li>
<li>两个破折号意味着破折号中间夹的部分是插入语，可以先去掉不看。</li>
</ul>
<p><strong>⚠️</strong></p>
<ol>
<li><p>同位语从句的写作模版：在考研中，如果要表示群体的观点，可以使用An old saying has it that…，that后面接普通的陈述句，表示“人们常说/常言道……”。这是一个常用的固定搭配的句型，推荐使用哦～</p>
</li>
<li><p>表语从句的写作模版：The trouble is that…，that后面接普通的陈述句，表示“麻烦的事/困扰/问题是…”。</p>
</li>
</ol>
<h1 id="D50"><a href="#D50" class="headerlink" title="D50"></a>D50</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230807113208672.png" class="" title="image-20230807113208672">

<h2 id="分析-30"><a href="#分析-30" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>proposed / could tell / did not want</p>
</li>
<li><p><strong>断开：</strong>通过连接词so that/that来断开长难句</p>
</li>
</ul>
<h2 id="生词-29"><a href="#生词-29" class="headerlink" title="生词"></a>生词</h2><p>✅ Federal Trade Commission (FTC) 美国联邦贸易委员会</p>
<p>✅ propose v. 提议，建议</p>
<p>✅ track v. 追踪，留下痕迹</p>
<p>✅ option n. 选项；选择权</p>
<p>✅ internet browser 互联网浏览器</p>
<h2 id="翻译-30"><a href="#翻译-30" class="headerlink" title="翻译"></a>翻译</h2><p>2010年12月，美国联邦贸易委员会（FTC）建议在互联网浏览器中添加“禁止追踪（DNT）”选项，以便用户可以告知广告商他们不想被追踪。</p>
<h2 id="语法重点-25"><a href="#语法重点-25" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>so that表达两种不同的含义，引出两种不同的状语从句：</strong></p>
<p>区别在于后面有没有情态动词，如果有情态动词则为目的状语从句，如没有情态动词则为结果状语从句。</p>
<p><strong>✅</strong> <strong>嵌套结构：</strong></p>
<p>so that 引导的目的状语从句中嵌套了that引导的宾语从句。</p>
<h2 id="D51"><a href="#D51" class="headerlink" title="D51"></a>D51</h2><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230807113733081.png" class="" title="image-20230807113733081">

<h2 id="分析-31"><a href="#分析-31" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>is trying/ relies/ has chosen/ is/ will become</li>
<li><strong>断开：</strong>通过标点符号及连接词 if/whicht/that来断开长难句</li>
</ul>
<h2 id="生词-30"><a href="#生词-30" class="headerlink" title="生词"></a>生词</h2><p>✅ upset v. 打乱, 扰乱；打翻；使苦恼，使心烦 adj. 不安的，心烦的</p>
<p>✅ rely on… 依靠，依赖</p>
<p>✅ advertising n. 广告</p>
<p>✅ an indirect method 一种间接的方式/方法</p>
<p>✅ guarantee n. 担保，保证</p>
<p>✅ by default 通过默认的方法，默认情况下；默认值</p>
<p>✅ norm n. 行规；规范，基准</p>
<p>✅ DNT=Do Not Track  不要跟踪</p>
<h2 id="翻译-31"><a href="#翻译-31" class="headerlink" title="翻译"></a>翻译</h2><p>如果它（微软）这是试图去击败几乎全部依赖广告的谷歌的话，那它选择了一种间接的方法：无法保证DNT（禁止追踪）默认值会成为行规。</p>
<h2 id="语法重点-26"><a href="#语法重点-26" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>there be句型的含义</strong></p>
<p>There be句型的基本结构是“There be + n.”，含义表示“有”（客观存在），是一个倒装句。**</p>
<p>✅ <strong>判断that引导什么从句</strong></p>
<p>n. + that从句，且that不作成分，那么that引导的就是同位语从句, 解释说明前面的抽象名词guarantee。</p>
<p>✅<strong>非限定性的定语从句</strong></p>
<p>非限定性的定语从句，除了可以修饰它前面的名词，还可以修饰它前面的整个句子，或句子的部分内容，</p>
<h1 id="D52"><a href="#D52" class="headerlink" title="D52"></a>D52</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230807114723331.png" class="" title="image-20230807114723331">

<h2 id="分析-32"><a href="#分析-32" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is/’s(is) left/can envisage</p>
</li>
<li><p><strong>断开：</strong>通过标点逗号、连接词and和分析主谓来断开长难句</p>
</li>
</ul>
<h2 id="生词-31"><a href="#生词-31" class="headerlink" title="生词"></a>生词</h2><p>✅ potential adj. 潜在的，有可能的</p>
<p>✅ evolution n. 发展；演变；进化</p>
<p>✅ consequence n. 影响；结果, 后果</p>
<p>✅ social consequence 生活影响</p>
<p>✅ dazzlingly adv. 灿烂地,耀眼地（文中表示令人眩晕地）</p>
<p>✅ complicated adj. 复杂的</p>
<p>✅ science fiction writer 科幻小说家</p>
<p>✅ futurologist n. 未来学家</p>
<p>✅ envisage v. 想象</p>
<h2 id="翻译-32"><a href="#翻译-32" class="headerlink" title="翻译"></a>翻译</h2><p>当代技术可能会有的发展及其社会影响复杂得令人眩晕，或许最好的办法是将我们能够想象的各种可能性留给科幻小说家和未来学家去探索。</p>
<h2 id="语法重点-27"><a href="#语法重点-27" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过标点、连接词以及分析主谓将句子断成3部分，分别是and连接的并列句以及省略连接词的定语从句。</p>
<p><strong>✅ 判断it的指代</strong></p>
<p>在考研真题中it主要有三种可能性：</p>
<ul>
<li>作代词，指代上文中的单数名词，意思为“它”；</li>
<li>作形式主语，指代句子后面出现的真正主语（例如to do或从句）；</li>
<li>构成it is/was… that…强调句。</li>
</ul>
<p>⚠️ <strong>判断具体表示哪个意思，优先考虑句子内部：</strong></p>
<ul>
<li>如果句子里能找到真正的主语，则为形式主语；</li>
<li>反之，去找上文中它可能替代的可数名词单数。</li>
</ul>
<p>很明显本句it作形式主语，真正的主语是to explore the many possibilities we can envisage。</p>
<h1 id="D53"><a href="#D53" class="headerlink" title="D53"></a>D53</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230808112440816.png" class="" title="image-20230808112440816">

<h2 id="分析-33"><a href="#分析-33" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>holds / have identified / will find</li>
<li><strong>断开：</strong>通过标点冒号和连接词(in) which来断开长难句</li>
</ul>
<h2 id="生词-32"><a href="#生词-32" class="headerlink" title="生词"></a>生词</h2><p>✅ identify  v. 识别出，辨认出</p>
<p>✅ long-term patterns 长期的模式</p>
<p>✅ make evidence-based forecasts 作出有根据的预测</p>
<p>✅ descendants 子孙后代</p>
<h2 id="翻译-33"><a href="#翻译-33" class="headerlink" title="翻译"></a>翻译</h2><p>正如通常情况那样，过去掌握着通向未来的钥匙：我们现在已经确定了足够多的地球以及人类历史何以形成的长期模式，使我们能够对子孙后代的生存环境做出有根据的预测。</p>
<h2 id="语法重点-28"><a href="#语法重点-28" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过冒号、连接词which断开长难句，其中in which是介词提前的定语从句，修饰situations。</p>
<p><strong>✅ 判断非谓语动词的修饰</strong></p>
<ul>
<li>一般非谓语动词的修饰原则都是“就近修饰”，所以shaping the history of the planet修饰前面的名词patterns； </li>
<li>如果to do 前面有逗号，则修饰整个句子（作状语），所以to make evidence-based forecasts about the situations 修饰前面整个句子（结果状语）。</li>
</ul>
<p>to do除了目的状语，还可以作<strong>结果状语</strong>和<strong>原因状语</strong></p>
<p>例句如下：<br>I am too tired to stay up late.我太累了以至于不能熬夜了。（逻辑关系是：因为太累了，所以不能熬夜。to do 作结果状语）<br>I am so excited to be here. 我到这儿真的很兴奋。（逻辑关系是：因为到这儿，所以兴奋。to do作原因状语。）</p>
<h1 id="D54"><a href="#D54" class="headerlink" title="D54"></a>D54</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230808114439766.png" class="" title="image-20230808114439766">

<h2 id="分析-34"><a href="#分析-34" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong> relates/ has been automated/has/is/is</li>
<li><strong>断开：</strong>通过标点冒号和连接词how以及分析主谓来断开长难句</li>
</ul>
<h2 id="生词-33"><a href="#生词-33" class="headerlink" title="生词"></a>生词</h2><p>✅ entitle v. 称做…；定名为…；给…称号</p>
<p>✅ relate v. 讲述；把……联系起来</p>
<p>✅ a modern textile mill 一个现代纺织厂</p>
<p>✅ automate v. 自动化，自动操作</p>
<p>✅ employee n. 雇员，员工</p>
<p>✅ mill n.磨坊，磨粉厂；工厂，制造厂 v.（用磨粉机）碾碎，磨成粉</p>
<h2 id="翻译-34"><a href="#翻译-34" class="headerlink" title="翻译"></a>翻译</h2><p>《在美国制造》一文中，作者亚当•戴维森提及一个有关棉花产地某现代纺织厂自动化程度的笑话：该普通纺织厂如今只有两名员工，“一个人和一只狗。人负责喂狗，而狗负责让人远离机器。”</p>
<h2 id="语法重点-29"><a href="#语法重点-29" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>去修饰找核心</strong></p>
<p>前半句中去掉了介词短语、非谓语动词和同位语后，核心内容只有：… the author… relates a joke…，简化之后极大地帮助了大家理解句子内容。</p>
<p><strong>✅</strong> <strong>名词后的并列</strong></p>
<p>名词a joke后面，介词短语from cotton country 和介词加从句about just how much a modern textile mill has been automated都是修饰名词a joke的，这类多个修饰语并列（短的放前，长的在后）考研中经常考。</p>
<p><strong>✅ 熟词僻意</strong><br>relate此处不表示“联系”，表示“讲述”。</p>
<h1 id="D55"><a href="#D55" class="headerlink" title="D55"></a>D55</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230809114521531.png" class="" title="image-20230809114521531">

<h2 id="分析-35"><a href="#分析-35" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>is / have appeared / have / is / is / are</li>
<li><strong>断开：</strong>通过标点，连接词和分析主谓来断开长难句</li>
</ul>
<h2 id="生词-34"><a href="#生词-34" class="headerlink" title="生词"></a>生词</h2><p>✅ make the point 发表观点</p>
<p>✅ stubbornly adv. 倔强地；顽固地</p>
<p>✅ unemployment n. 失业，失业率</p>
<p>✅ decline v. 下降，减少，衰退；谢绝</p>
<p>✅ the Great Recession 大衰退; 大萧条</p>
<p>✅ recession n. 经济衰退，不景气；后退，撤回</p>
<p>✅ advance n. 前进，发展；增长，提高</p>
<p>✅ globalization n. 全球化，全球性</p>
<p>✅ information technology revolution 信息技术革命</p>
<p>✅ more… than ever 比以往任何时候都更……</p>
<p>✅ replace… with… 用来……代替……</p>
<h2 id="翻译-35"><a href="#翻译-35" class="headerlink" title="翻译"></a>翻译</h2><p>Davidson此文只不过是新近涌现的诸多同类文章中的一篇，这些文章都提出这样一种观点：当前失业率居高不下以及中产阶级收入缩水，很大程度上是由于大萧条造成的需求大幅降低，但同时也由于全球化和信息技术革命的发展，这种发展使机器或外来雇工取代劳力的速度超过了以往任何时期。</p>
<h2 id="语法重点-30"><a href="#语法重点-30" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>定位谓语动词</strong></p>
<p>谓语动词的数量和位置可以帮助同学们更准确地断开长难句。</p>
<p><strong>✅</strong> <strong>断开长难句</strong></p>
<p>通过标点、连接词及分析主谓三种办法断开长难句。</p>
<p><strong>✅</strong> <strong>判断句子的修饰</strong></p>
<p>看句子的过程中，一定要搞清楚句子修饰谁（如下从句2、3、4、6）。</p>
<p><strong>✅</strong> <strong>理清句与句之间的关系</strong></p>
<p>理清句子之间的关系，能更好的看懂句意（如下4和5并列表示两个原因）。</p>
<p>本句详细解读：</p>
<p>⚠️ 主句：Davidson’s article is one of a number of pieces</p>
<p>👉 定语从句：that have recently appeared making the point （修饰前面的名词pieces）</p>
<p>👉 定语从句：we have such stubbornly high unemployment and declining middle-class incomes today （修饰前面的名词reason）</p>
<p>👉 同位语从句：that the reason… is largely because of the big drop in demand because of the Great Recession, （解释说明前面的抽象名词point）</p>
<p>👉 并列句：but it is also because of the advances in both globalization and the information technology revolution （与前面的同位语从句并列，一起说明两个原因分别是什么）</p>
<p>👉 非限定性定语从句：, which are more rapidly than ever replacing labor with machines or foreign workers. （补充说明前面的名词词组the advances in both globalization and the information technology revolution）</p>
<h1 id="D56"><a href="#D56" class="headerlink" title="D56"></a>D56</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230817085731221.png" class="" title="image-20230817085731221">

<h2 id="分析-36"><a href="#分析-36" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>know / is / will require</li>
<li><strong>断开：</strong>通过连接词that和分析主谓来断开长难句</li>
</ul>
<h2 id="生词-35"><a href="#生词-35" class="headerlink" title="生词"></a>生词</h2><p>✅ for sure 确实，确定，肯定；毫无疑问地<br>✅ advance n. 前进，发展；增长，提高<br>✅ globalization n. 全球化，全球性<br>✅ I. T. revolution = information technology revolution 信息技术革命<br>✅ require sb. to do sth.要求某人做某事<br>✅ above average 高于平均水平，超越平庸</p>
<h2 id="翻译-36"><a href="#翻译-36" class="headerlink" title="翻译"></a>翻译</h2><p>但有一点我们确信无疑，随着全球化和信息技术革命的发展，最佳岗位将要求员工掌握更多更好的教育以使自己超越平庸。</p>
<h2 id="语法重点-31"><a href="#语法重点-31" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过标点、连接词及分析主谓三种办法断开长难句，找到从句。</p>
<p>从句1：we know for sure （定语从句，修饰前面的名词the one thing）</p>
<p>从句2：that with each advance in globalization and the I. T. revolution, the best jobs will require workers to have more and better education to make themselves above average. （表语从句）</p>
<p><strong>✅</strong> <strong>验证断开开长难句是否成功</strong></p>
<p>通过谓语动词的位置来判断长难句是否断开成功。</p>
<p>注意：并不是所有的标点和连接词都可以用来断开长难句。</p>
<p>⚠️ 一般情况下，大家可以按照三个办法（标点、连接词、分析主谓）来断开长难句。</p>
<p>但是对于断开没有把握的句子，大家可以先数一下句子中的谓语动词，谓语动词的数量可以帮大家确认句子中有几件事，可以断成几段；并且谓语动词的位置可以帮助大家确认断开得是否成功，以及帮助大家找到从句结束的地方。</p>
<h1 id="D57"><a href="#D57" class="headerlink" title="D57"></a>D57</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230817090525200.png" class="" title="image-20230817090525200">

<h2 id="分析-37"><a href="#分析-37" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is / are / need / would be / ensures / has</p>
</li>
<li><p><strong>断开：</strong>通过标点逗号、连接词where / but / that / that和分析主谓来断开句子</p>
</li>
</ul>
<h2 id="生词-36"><a href="#生词-36" class="headerlink" title="生词"></a>生词</h2><p>✅ employment n. 就业，雇佣</p>
<p>✅ ensure v. 保证，确保</p>
<p>✅ access to sth. 接近……的方法，取得……的权利</p>
<p>✅ post-high school education 高中以后的教育</p>
<h2 id="翻译-37"><a href="#翻译-37" class="headerlink" title="翻译"></a>翻译</h2><p>在一个已正式告别平庸的世界里，我们需要做很多事情以扶持就业，但对21世纪来讲，最重要的事情莫过于出台《美国退伍军人权利法案》之类的法案，以确保每个美国人都有机会接受高中后教育。</p>
<h2 id="语法难点-5"><a href="#语法难点-5" class="headerlink" title="语法难点"></a>语法难点</h2><p>✅ 定语从句</p>
<p>详见《句句真研》语法书第二部分长难句-第二章复合句-第二节定语从句</p>
<p>✅ 倒装句</p>
<p>详见《句句真研》语法书第二部分长难句-第三章特殊句式-倒装（There be 句型)</p>
<p>✅ 同位语从句</p>
<p>详见《句句真研》语法书第二部分长难句-第二章复合句-第一节名词性从句</p>
<p>✅ 形容词的比较级</p>
<p>详见《句句真研》语法书第一部分简单句-第二章简单句的扩展-第一节词性角度的扩展-形容词副词</p>
<h1 id="D58"><a href="#D58" class="headerlink" title="D58"></a>D58</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230817091355259.png" class="" title="image-20230817091355259">

<h2 id="分析-38"><a href="#分析-38" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>came / had / would make / (would) go</p>
</li>
<li><p><strong>断开：</strong>通过标点逗号和连接词who / and who来断开长难句</p>
<p>⚠️ 注意：</p>
<p>最后的and那里不能断开，因为后面的并列句不完整则不能断开</p>
</li>
</ul>
<h2 id="生词-37"><a href="#生词-37" class="headerlink" title="生词"></a>生词</h2><p>✅ along with… 与……一道，连同……一起</p>
<p>✅ folks n. 人们</p>
<p>✅ look to do sth. 寻找做某事的机会</p>
<p>✅ make a permanent home 建立永久的家园，长留此地</p>
<p>✅ permanent adj. 永久的，固定的</p>
<p>✅ have no intention to do sth. 没有做某事的计划、意图</p>
<p>✅ intention n. 意图，意向；目的；打算</p>
<p>✅ make money 赚钱</p>
<h2 id="翻译-38"><a href="#翻译-38" class="headerlink" title="翻译"></a>翻译</h2><p>和许多找机会想在美国安家的人们一起来的，还有那些没打算留下来和想赚完钱然后回家的人们。</p>
<h2 id="语法重点✅-倒装句"><a href="#语法重点✅-倒装句" class="headerlink" title="语法重点✅ 倒装句"></a>语法重点✅ <strong>倒装句</strong></h2><p><strong>本句为倒装句，正常语序应该是Those… came along with the many folks looking to make a permanent home in the United States.</strong></p>
<p><strong>✅</strong> <strong>主语中两个并列的定语从句</strong></p>
<p>本句主语部分的核心词是those，完整的主语是those who had no intention to stay, and who would make some money and then go home。</p>
<p>由于主语部分较长，有两个who引导的定语从句并列，所以倒装。</p>
<p>⚠️ </p>
<p>and/but/or等并列连词后，如果是完整的句子，那么它就是独立的一件事，可以进行断开；</p>
<p>但如果接的不是完整的句子，则说明后面的句子需要和前面的句子共享某些成分，因此不能进行断开。</p>
<h1 id="D59"><a href="#D59" class="headerlink" title="D59"></a>D59</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230818112512396.png" class="" title="image-20230818112512396">

<h2 id="分析-39"><a href="#分析-39" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>means / requires / are not</li>
<li><strong>断开：</strong>通过连接词that/that来断开长难句</li>
</ul>
<h2 id="生词-38"><a href="#生词-38" class="headerlink" title="生词"></a>生词</h2><p>✅ culture war 文化战争</p>
<p>✅ middle ground 中间地带，中间立场</p>
<p>✅ immigration n. 移民</p>
<p>✅ multiple adj. 多样的；许多的；多重的</p>
<p>✅ outcome n. 结果</p>
<p>✅ accomplish v.完成，实现；达到</p>
<p>✅ the existing system 现有制度</p>
<h2 id="翻译-39"><a href="#翻译-39" class="headerlink" title="翻译"></a>翻译</h2><p>超越这种非对即错文化战争的逻辑，意味着要打开中间地带，并知晓当今的移民管理需要多种途径及多样结果，包括一些现有制度下通过法律难以达成的途径和结果。</p>
<h2 id="语法重点-32"><a href="#语法重点-32" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>找到主语</strong></p>
<p>本句主语为Looking beyond the culture war logic of right or wrong，比较长。</p>
<p><strong>✅ 两个doing并列作宾语</strong></p>
<p>本句opening up the middle ground 和 understanding…并列作句子的宾语。</p>
<p><strong>✅ 判断从句</strong></p>
<p>本句中有两个从句，分别由that引导：</p>
<ul>
<li><p>第一个that引导宾语从句，跟在及物动词understanding后。</p>
</li>
<li><p>第二个that引导定语从句，修饰代词some（代词相当于名词用）。</p>
</li>
</ul>
<p>⚠️ </p>
<p>如果想确保分析长难句比较准确，可以先找谓语动词。谓语动词既能帮助大家进行断开，又能帮助大家检验断开是否准确。</p>
<p>但要提醒大家一下，找只找谓语动词，所有的非谓语动词都不是句子的核心，不能用来断开句子。比如单独出现的doing，done，to to不能断开句子，可以不看</p>
<h1 id="D60"><a href="#D60" class="headerlink" title="D60"></a>D60</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230818112914891.png" class="" title="image-20230818112914891">

<h2 id="分析-40"><a href="#分析-40" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>can be / are judging / is / are</p>
</li>
<li><p><strong>断开：</strong>通过标点分号/逗号和连接词if来断开长难句</p>
</li>
</ul>
<h2 id="生词-39"><a href="#生词-39" class="headerlink" title="生词"></a>生词</h2><p>✅ snap decision 快速决定，仓促决定</p>
<p>✅ snap adj. 仓促的，匆忙的；突然的</p>
<p>✅ important defense mechanism 重要防御机制</p>
<p>✅ mechanism n. 机制；机械装置；办法，技巧，途径</p>
<p>✅ be hard-wired to do sth. 天生会做某事</p>
<p>✅ hard-wired adj. 天生的，直觉的，本能的</p>
<p>✅ millisecond n. 毫秒</p>
<h2 id="翻译-40"><a href="#翻译-40" class="headerlink" title="翻译"></a>翻译</h2><p>快速决策可能是重要防御机制；如果要判断某人是否具有危险性，毫秒间我们的大脑和身体便会本能地快速做出反应。</p>
<h2 id="语法重点-33"><a href="#语法重点-33" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>嵌套结构</strong></p>
<p>if 引导的条件句中嵌套了whether 引导的宾语从句。</p>
<p><strong>✅ 断开长难句</strong></p>
<p>通过标点、连接词及分析主谓断开句子，需要不断尝试练习。</p>
<p>⚠️ </p>
<p>不是所有的句子都要通过先数谓语动词进行断开。</p>
<p>对于像今天这么简单的句子，大家可以直接用我讲过的三种办法：标点、连接词和分析主谓进行断开即可。</p>
<h1 id="D61"><a href="#D61" class="headerlink" title="D61"></a>D61</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230818113719793.png" class="" title="image-20230818113719793">

<h2 id="分析-41"><a href="#分析-41" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>have found / are / take / think / are / can reduce / eliminate</p>
</li>
<li><p><strong>断开：</strong>根据标点逗号和连接词that/although/if/how来断开长难句</p>
</li>
</ul>
<h2 id="生词-40"><a href="#生词-40" class="headerlink" title="生词"></a>生词</h2><p>✅ be prone to do sth.易于去做某事；倾向于做某事</p>
<p>✅ prone adj. 易于……，倾向于……<br>✅ snap adj. 仓促的，匆忙的；突然的<br>✅ overreaction 过激反应，反应过度<br>✅ take a moment and think about… 花点时间想想……<br>✅ be likely to do sth.有可能去做某事<br>✅ eliminate v. 消除，排除；忽略，淘汰<br>✅ negative effect 负面影响<br>✅ hard-wired adj. 天生的，直觉的，本能的<br>✅ quick, hard-wired response 快速的、本能的反应</p>
<h2 id="翻译-41"><a href="#翻译-41" class="headerlink" title="翻译"></a>翻译</h2><p>科学家已经发现：我们虽然易于做出快速应激反应，但是，如果花点时间揣度一下我们可能会做何反应，就可以减少甚至消除快速本能反应的负面影响。</p>
<h2 id="语法重点-34"><a href="#语法重点-34" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>嵌套结构</strong></p>
<ol>
<li><p>that宾语从句（动宾）中嵌套了although让步状语从句和if条件状语从句。</p>
</li>
<li><p>if条件状语从句中嵌套了how宾语从句（介宾）。</p>
</li>
</ol>
<p>⚠️ </p>
<p>不是所有的标点和并列连词都能用来断开长难句：<br>不连接句子的标点不能用来断开长难句；如果遇到并列连词，不管是and、but、or还是其他的并列连词，记住一句话“不完整则不能断”，只要后面不是完整的句子，就不能进行断开，如本句中and think，缺少主语，则不能断开。</p>
<h1 id="D62"><a href="#D62" class="headerlink" title="D62"></a>D62</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230824114234356.png" class="" title="image-20230824114234356">

<h2 id="分析-42"><a href="#分析-42" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>do break / did / attract / remain</p>
</li>
<li><p><strong>断开：</strong>根据标点破折号和连接词when/because可以断开长难句</p>
</li>
</ul>
<h2 id="生词-41"><a href="#生词-41" class="headerlink" title="生词"></a>生词</h2><p>✅ break through to… 突破……</p>
<p>✅ summit of corporate power 公司权利高层</p>
<p>✅ summit n. (山等的)最高点，顶点；高层；高层会议</p>
<p>✅ corporate adj. 社团的, 法人的</p>
<p>✅ attract massive attention 吸引大量关注</p>
<p>✅ massive adj. 大量的，可观的，巨大的</p>
<p>✅ precisely adv. 确实，的确如此；精确地；恰好地</p>
<p>✅ precisely because… 正是因为……</p>
<p>✅ exception to the rule 规则中的例外</p>
<p>✅ exception n. 例外</p>
<h2 id="翻译-42"><a href="#翻译-42" class="headerlink" title="翻译"></a>翻译</h2><p>当女性确实打入公司权力高层时——例如，就像Sheryl Sandberg（雪莉•桑德伯格）最近在脸书所做的那样——她们会备受瞩目，而这恰恰是因为她们仍然属于规则中的例外</p>
<h2 id="语法重点-35"><a href="#语法重点-35" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过点和连接词断开长难句。</p>
<ul>
<li><p>两个破折号中间是插入语，可以先断开不看；</p>
</li>
<li><p>通过连接词when、because断开长难句；</p>
</li>
</ul>
<p>✅ <strong>理清句子间逻辑关系</strong></p>
<p>想理清楚句子之间的逻辑关系，最重要的是找到关键的连接词，比如今天的句子中，主句之前的when表示时间，主句之后的because表示原因，中间插入语as引出方式状语从句。找到这些连接词，句子之间的关系就一目了然了。</p>
<h1 id="D63"><a href="#D63" class="headerlink" title="D63"></a>D63</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230824115408009.png" class="" title="image-20230824115408009">

<h2 id="分析-43"><a href="#分析-43" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>arrive / register / start / will be / should report</p>
</li>
<li><p><strong>断开：</strong>通过标点破折号和连接词only if/and来断开长难句</p>
</li>
</ul>
<h2 id="生词-42"><a href="#生词-42" class="headerlink" title="生词"></a>生词</h2><p>✅ the jobless 失业者，没有工作的人<br>✅ CV = Curriculum Vitae（拉丁语） 个人履历<br>✅ register v. 登记，注册<br>✅ eligible adj. 有资格的，符合条件的<br>✅ be eligible for… 有……资格的，符合……条件的<br>✅ benefit n. 救济金，保险金；益处，好处<br>✅ fortnightly adv. 两星期一次地，每两周地</p>
<h2 id="翻译-43"><a href="#翻译-43" class="headerlink" title="翻译"></a>翻译</h2><p>失业者只有带着简历到求职中心，注册网上求职，并开始寻找工作，才有资格领取救济金。此后，他们必须每周而不是每两周汇报一次。</p>
<h2 id="语法重点-36"><a href="#语法重点-36" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>if条件句中并列了三个动作（三件事），通过逗号和and进行连接，共享相同的主语the jobless。</p>
<p>✅ <strong>倒装</strong></p>
<p>当only位于句首，表示强调“只有/仅有的情况”，句子需要部分倒装。</p>
<h1 id="D64"><a href="#D64" class="headerlink" title="D64"></a>D64</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825112507298.png" class="" title="image-20230825112507298">

<h2 id="分析-44"><a href="#分析-44" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>motivated / were /was/ received</p>
</li>
<li><p><strong>断开：</strong>通过标点逗号和连接词what/that来断开长难句</p>
</li>
</ul>
<h2 id="生词-43"><a href="#生词-43" class="headerlink" title="生词"></a>生词</h2><p>✅ motivate v. 刺激，激发…的积极性；使有动机</p>
<p>✅ zeal n. 热心， 热情</p>
<p>✅ fundamental fairness 基本公平</p>
<p>✅ fundamental adj. 基本的；重要的，必要的</p>
<p>✅ taxpayer n. 纳税人</p>
<p>✅ claimant n. 申请人，要求者</p>
<p>✅ benefit  n.  救济金 , 补助金</p>
<h2 id="翻译-44"><a href="#翻译-44" class="headerlink" title="翻译"></a>翻译</h2><p>不过我们要明白，真正激励他的是对“基本公平”的热情——保护纳税人，控制开支并确保只有最需要帮助的申请者才能领到救济金。</p>
<h2 id="语法重点-37"><a href="#语法重点-37" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>分析标点</strong></p>
<p>并不是所有的标点都能用来断开长难句，因为有些标点前后连接的不是句子。但是大家要注意分析每个标点的用处。</p>
<p><strong>✅ 去修饰找核心</strong></p>
<p>主句的核心是：What motivated him… was his zeal…</p>
<p><strong>✅ 看懂核心后，再去看非核心</strong></p>
<p>看懂句子的核心后，再把去掉的非核心加回来，逐步看懂细节，例如：插入语、介词短语等。</p>
<h1 id="D65"><a href="#D65" class="headerlink" title="D65"></a>D65</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825112938421.png" class="" title="image-20230825112938421">

<h2 id="分析-45"><a href="#分析-45" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is / had / has eamed</p>
</li>
<li><p><strong>断开：</strong>通过连接词who和分析主谓来断开长难句</p>
</li>
</ul>
<h2 id="生词-44"><a href="#生词-44" class="headerlink" title="生词"></a>生词</h2><p>✅ very adj. 恰好是，正是；特有的</p>
<p>✅ phrase n. 说法，术语；短语，词组</p>
<p>✅ jobseeker’s allowance 求职者津贴，找工作的人的津贴</p>
<p>✅ allowance n. 津贴，补助，零用钱</p>
<p>✅ fundamental adj. 基本的；重要的，必要的</p>
<p>✅ insurance n. 保险；保障，保障措施</p>
<p>✅ contribution n. 捐献，贡献</p>
<h2 id="翻译-45"><a href="#翻译-45" class="headerlink" title="翻译"></a>翻译</h2><p>甚至“求职者津贴”这一术语就是意在将失业者定义为不具有领取救济金这一基本权利的“求职者”，而这一权利是他或她通过缴纳国民保险所赢得的。</p>
<h2 id="语法重点-38"><a href="#语法重点-38" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>断开长难句无外乎就三种办法：标点、连接词和分析主谓。随着大家对于断开的方法逐渐熟练，很多时候步骤是可以简化的，找到一对主谓直接断开即可。</p>
<h1 id="D66"><a href="#D66" class="headerlink" title="D66"></a>D66</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825113734339.png" class="" title="image-20230825113734339">

<h2 id="分析-46"><a href="#分析-46" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is / insist/ isolates</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词but和that来断开长难句</p>
</li>
</ul>
<h2 id="生词-45"><a href="#生词-45" class="headerlink" title="生词"></a>生词</h2><p>✅ pressure n. 压力</p>
<p>✅ profession n. 职业，行业</p>
<p>✅ opponent n. 反对者</p>
<p>✅ regulator n. 管理者，管理机构</p>
<p>✅ isolate v. 隔离，孤立</p>
<p>✅ ethically adv. 伦理上地，按照职业道德地</p>
<p>✅  ethnically  *adv.*人种上；民族上</p>
<h2 id="翻译-46"><a href="#翻译-46" class="headerlink" title="翻译"></a>翻译</h2><p>律师行业内部存在变革呼声，但监管人员中反对变革的人坚持认为，禁止外行涉足法律事务所有助于律师远离挣钱压力，而按照职业道德为委托人服务。</p>
<h2 id="语法重点-39"><a href="#语法重点-39" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>去修饰找核心</strong></p>
<p>所有介词短语都是句子非核心，可以先去掉不看。前面两个并列的主句的核心为：</p>
<ol>
<li><p>There is pressure…</p>
</li>
<li><p>but opponents…insist…</p>
</li>
</ol>
<p><strong>✅</strong> <strong>从句的主语</strong></p>
<p>that宾语从句中，主语是doing sth.的词组构成的，即keeping outsiders out of a law firm。</p>
<h1 id="D67"><a href="#D67" class="headerlink" title="D67"></a>D67</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825114731996.png" class="" title="image-20230825114731996">

<h2 id="分析-47"><a href="#分析-47" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>has been outgrown /must be living/ will be demonstrated / is ignored /comes</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号，破折号和连接词of whom/as/who/when来断开长难句</p>
</li>
</ul>
<h2 id="生词-46"><a href="#生词-46" class="headerlink" title="生词"></a>生词</h2><p>✅ foundation n. 基金会</p>
<p>✅ recipient n. 接受者，领受者</p>
<p>✅ outgrow v. 长得太大而不适用（outgrown是过去分词）</p>
<p>✅ collaborative adj. 合作的，协作的</p>
<p>✅ demonstrate vt. 论证，证明；说明，演示</p>
<p>✅ inevitable adj. 不可避免的, 必然发生的</p>
<p>✅ row n. 争吵，争论，争议</p>
<p>✅ when it comes to + n./doing 当提及、涉及……的时候</p>
<p>✅ acknowledge v. 承认</p>
<h2 id="翻译-47"><a href="#翻译-47" class="headerlink" title="翻译"></a>翻译</h2><p>但是诺贝尔基金会的限定——每个奖项获奖人数不超三人，且必须都在世——早就因为现代研究的协作性质而不再适用了，这一点会在确认希格斯玻色子的发现时得到证明，因为届时必然会出现关于“哪位（科学家）遭到忽视”的结论。</p>
<h2 id="语法重点-40"><a href="#语法重点-40" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>定语从句</strong></p>
<p>准确找到本句中的定语从句：</p>
<ol>
<li><p>each of whom非限定性定语从句，前面加了限定词each of。</p>
</li>
<li><p>as非限定性定语从句，修饰前面整件事。</p>
</li>
</ol>
<p><strong>✅</strong> <strong>断开长难句</strong></p>
<p>根据标点和连接词断开长难句，注意不同的标点有不同的作用。如本句中的两个逗号表示插入语，一个破折号表示解释说明。</p>
<p><strong>✅</strong> <strong>名词词组</strong></p>
<p>名词前后会有多个修饰语同时进行修饰。</p>
<p>比如本句中的the Nobel Foundation’s limit of three recipients per prize，limit是核心名词，加上它前后的修饰语就构成了比较复杂的名词词组。</p>
<h1 id="D68"><a href="#D68" class="headerlink" title="D68"></a>D68</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825115317411.png" class="" title="image-20230825115317411">

<h2 id="分析-48"><a href="#分析-48" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>sent /identify/could be taken</p>
</li>
<li><p><strong>断开：</strong>通过连接词that来断开长难句</p>
</li>
</ul>
<h2 id="生词-47"><a href="#生词-47" class="headerlink" title="生词"></a>生词</h2><p>✅ congressional adj. 国会的，议会的</p>
<p>✅ Democrat n. 民主党人</p>
<p>✅ Republican n. 共和党人</p>
<p>✅ individual benefactor  个人捐助者</p>
<p>✅ maintain v. 维护；保持</p>
<p>✅ excellence n. 卓越地位；优秀，长处</p>
<p>✅ humanity n. 人文学科</p>
<p>✅ social scientific scholarship 社会科学学术研究、学术成就</p>
<h2 id="翻译-48"><a href="#翻译-48" class="headerlink" title="翻译"></a>翻译</h2><p>2010年，全国民主党及共和党要员向美国人文与科学院致函，要求其界定出能够被“联邦/州/地方政府、大学、基金会、教育工作者、私人捐助者等”采取的行动，以“维护国家在人文与社会科学学术研究及教育领域的卓越地位”。</p>
<h2 id="语法重点-41"><a href="#语法重点-41" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>平行并列结构</strong></p>
<p>大家要注意搞清楚平行并列结构，尤其是多个平行并列结构嵌套在一起（大平行里面还嵌套了小平行）的时候，一定要搞清楚什么跟什么平行并列才能把句子意思看懂，避免产生混淆。</p>
<p><strong>✅</strong> <strong>判断主句从句</strong><br>通过句子中的连接词that分清楚主句从句，并且能够捋顺意思。相信通过了我们每日长难句的学习大家已经很熟练了。</p>
<h1 id="D69"><a href="#D69" class="headerlink" title="D69"></a>D69</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230825115959193.png" class="" title="image-20230825115959193">

<h2 id="分析-49"><a href="#分析-49" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>calls / improve</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词that来断开长难句</p>
</li>
</ul>
<h2 id="生词-48"><a href="#生词-48" class="headerlink" title="生词"></a>生词</h2><p>✅ innovation n. 创新；革新</p>
<p>✅ competition n. 竞争，比赛，竞赛</p>
<p>✅ call for 呼吁</p>
<p>✅ investment n. 投资</p>
<p>✅ craft v. 精制</p>
<p>✅ coherent adj. 连贯的</p>
<p>✅ curricula n. 课程，课程体系（curriculum的复数）</p>
<p>✅ solve problems 解决问题</p>
<p>✅ communicate v. 交流，沟通</p>
<p>✅ challenge n. 挑战  v. 向……挑战；对……质疑</p>
<h2 id="翻译-49"><a href="#翻译-49" class="headerlink" title="翻译"></a>翻译</h2><p>为鼓励创新和竞争，报告呼吁加大科研投资、精心制定协调一致的课程以提供21世纪学生解决问题及有效沟通的能力、增加对教师的资助、鼓励学者应用自己的学识来应对当今的巨大挑战。</p>
<h2 id="语法重点-42"><a href="#语法重点-42" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>平行并列结构</strong><br>今天的句子其实是由多个平行并列结构构成的，其中包含两个简单的平行+一个非常难的平行（4个非常不像的名词词组平行并列，如下图的分叉）。</p>
<img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/640" class="" title="img">

<h1 id="D70"><a href="#D70" class="headerlink" title="D70"></a>D70</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230826113919457.png" class="" title="image-20230826113919457">

<h2 id="分析-50"><a href="#分析-50" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is /are/are consumed</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词and /when来断开长难句</p>
</li>
</ul>
<h2 id="生词-49"><a href="#生词-49" class="headerlink" title="生词"></a>生词</h2><p>✅ charity n. 慈善；慈善团体</p>
<p>✅ pleasurable adj. 令人快乐的，愉快的，舒适的</p>
<p>✅ purchase v. 购买；获得</p>
<p>✅ luxury n. 奢侈，豪华；奢侈品</p>
<p>✅ enjoyable adj. 愉快的，快乐的</p>
<p>✅ consume v. 消费，消耗</p>
<p>✅ sparingly adv. 节俭地，爱惜地，谨慎使用地</p>
<h2 id="翻译-50"><a href="#翻译-50" class="headerlink" title="翻译"></a>翻译</h2><p>给他人买礼物或捐款给慈善机构通常比给自己买东西更令人愉悦，有节制地消费奢侈品才能带来最大快乐。</p>
<h2 id="语法重点-43"><a href="#语法重点-43" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>主语</strong></p>
<p>今天的句子的主语是由两个doing的词组并列构成。</p>
<p><strong>✅</strong> <strong>比较对象</strong></p>
<p>than后面的比较对象也是由doing的词组构成。</p>
<h1 id="D71"><a href="#D71" class="headerlink" title="D71"></a>D71</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230826114315631.png" class="" title="image-20230826114315631">

<h2 id="分析-51"><a href="#分析-51" class="headerlink" title="分析"></a>分析</h2><ul>
<li><strong>找谓语动词：</strong>can be seen/enhances</li>
<li><strong>断开：</strong>通过标点符号逗号和连接词and 来断开长难句</li>
</ul>
<h2 id="生词-50"><a href="#生词-50" class="headerlink" title="生词"></a>生词</h2><p>✅ scarcity n. 缺乏；不足</p>
<p>✅ enhance v. 提高, 增加, 加强</p>
<h2 id="翻译-51"><a href="#翻译-51" class="headerlink" title="翻译"></a>翻译</h2><p>然而，全世界范围内，无论穷人还是富人中，都可以看到“将钱用到别人身上”和“感觉愉悦”的联系，且对大部分人来讲，稀缺性提升了大部分事物的愉悦感。</p>
<h2 id="语法重点-44"><a href="#语法重点-44" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>找主语</strong></p>
<p>无论主语有多么长多么复杂，只要先找到谓语动词，那么主语往前一找就会发现，很容易。前半句话的主语是：the link between feeling good and spending money on others（名词+介词短语）。</p>
<p><strong>✅</strong> <strong>去修饰找核心</strong></p>
<p>我一直在给大家强调，介词短语是句子的非核心，可以先去掉不看，前半句话的核心为：the link … can be seen…。</p>
<h1 id="D72"><a href="#D72" class="headerlink" title="D72"></a>D72</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230826114911793.png" class="" title="image-20230826114911793">

<h2 id="分析-52"><a href="#分析-52" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>have amassed/shown/call/rate</p>
</li>
<li><p><strong>断开：</strong>通过连接词what/that来断开长难句</p>
</li>
</ul>
<h2 id="生词-51"><a href="#生词-51" class="headerlink" title="生词"></a>生词</h2><p>✅ social psychologist 社会心理学家</p>
<p>✅ amass v. 聚集，积累</p>
<p>✅ oceans of… 海量的，大量的</p>
<p>✅ above average effect 高于平均水平的效果</p>
<p>✅ illusory adj. 错觉的；虚假的</p>
<p>✅ superiority n. 优越，优越感</p>
<p>✅ illusory superiority 虚幻的优越感</p>
<p>✅ rate… as… 把……评估为……</p>
<p>✅ get on well with… 与……相处融洽</p>
<p>✅ statistical adj. 统计学的, 以数据表示的</p>
<p>✅ impossibility n. 不可能(性)；不可能的事</p>
<h2 id="翻译-52"><a href="#翻译-52" class="headerlink" title="翻译"></a>翻译</h2><p>社会心理学家就其所称的“高于平均水平效应”或“虚幻的优越感”收集了大量的研究，并指出，我们当中有70%的人自认为领导力高于常人，93%的人自认为驾驶能力高于常人，85%的人自认为与人相处的能力高于常人——这些显然都是统计学上的不可能事件。</p>
<h2 id="语法重点-45"><a href="#语法重点-45" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>平行并列结构</strong></p>
<p>句子中有三处平行并列结构，其中主语+have带出两个过去分词amassed和shown并列比较难掌握，大家要多多注意。</p>
<img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/640" class="" title="img">

<h1 id="D73"><a href="#D73" class="headerlink" title="D73"></a>D73</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230827213948531.png" class="" title="image-20230827213948531">

<h2 id="分析-53"><a href="#分析-53" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>is/were thought/ become</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词when/that 来断开长难句</p>
</li>
</ul>
<h2 id="生词-52"><a href="#生词-52" class="headerlink" title="生词"></a>生词</h2><p>✅ improvement n. 改进，改善<br>✅ performance n. 表现，性能，绩效<br>✅ be immune from… 对……免疫，不受……影响的<br>✅ automation n. 自动化(技术)<br>✅ threaten v. 威胁</p>
<h2 id="翻译-53"><a href="#翻译-53" class="headerlink" title="翻译"></a>翻译</h2><p>当技术在价格、性能方面大为改善时，那些曾经被认为对自动化免疫的工作也就会突然受到威胁。</p>
<h2 id="语法重点-46"><a href="#语法重点-46" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>断开长难句</strong></p>
<p>通过标点和连接词断开长难句：</p>
<ol>
<li><p>When引导时间状语从句；</p>
</li>
<li><p>that引导定语从句，就近修饰名词jobs。</p>
</li>
</ol>
<ol>
<li><p>When there is rapid improvement in…（in后面接名词、代词或者doing）<br>意思：“当有大幅度的改善……方面的时候”<br>例：When there is rapid improvement in English/learning English…</p>
</li>
<li><p>be immune from…意思：“不受……影响的”<br>例：I am immune from social epidemics.</p>
</li>
</ol>
<h1 id="D74"><a href="#D74" class="headerlink" title="D74"></a>D74</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230827214329225.png" class="" title="image-20230827214329225">

<h2 id="分析-54"><a href="#分析-54" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>should look/ would have</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词which来断开长难句</p>
</li>
</ul>
<h2 id="生词-53"><a href="#生词-53" class="headerlink" title="生词"></a>生词</h2><p>✅ look at 仔细考虑，研究；着眼于，看</p>
<p>✅ the rental environment 租赁环境</p>
<p>✅ have a significant impact on… 对……有重要影响</p>
<p>✅ registered providers 注册供应者</p>
<p>✅ registered adj. 注册的，登记过的</p>
<p>✅ fund v. 为…提供资金</p>
<p>✅ revenue n. 收入, 收益</p>
<h2 id="翻译-54"><a href="#翻译-54" class="headerlink" title="翻译"></a>翻译</h2><p>部长大臣们还应该考虑提高房屋租赁市场的稳定性，这将对注册供应者凭借营业收入为新建住房提供资金的能力产生重大影响。</p>
<h2 id="语法重点-47"><a href="#语法重点-47" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>定语从句的修饰</strong></p>
<p>遇到“逗号+which”非限定性定语从句有可能出现两种不同的修饰：正常情况下定语从句修饰前面的名词；也可以修饰前面的整句话。</p>
<p>大家可以采用“代入法”来判断具体是修饰一个单词还是修饰一句话。</p>
<p>本句中，which引导非限定性定语从句，修饰前面一整句话。</p>
<p><strong>✅</strong> <strong>词本无意，意由境生</strong></p>
<p>大家在理解句子时要注意“词本无意，意由境生”，如本句中“look at”不能翻译成”看“，而应该翻译成”仔细研究/着眼于……”。</p>
<h1 id="D75"><a href="#D75" class="headerlink" title="D75"></a>D75</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230827214827888.png" class="" title="image-20230827214827888">

<h2 id="分析-55"><a href="#分析-55" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>are warning/is/should be</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号和连接词when/that来断开长难句</p>
</li>
</ul>
<h2 id="生词-54"><a href="#生词-54" class="headerlink" title="生词"></a>生词</h2><p>✅ inequalityn. 不平等</p>
<p>✅ inherit  v. 继承，继承所得；世袭</p>
<p>✅ bizarre adj. 奇怪的，奇异的，奇特的</p>
<p>✅ wealthy aristocratic families 富有的贵族世家</p>
<p>✅ aristocratic  adj. 贵族的；贵族气派的</p>
<p>✅ symbolic adj. 象征的，象征性的</p>
<p>✅ modern democratic states 现代民主国家</p>
<p>✅ democratic  adj. 民主的；民主主义的</p>
<h2 id="翻译-55"><a href="#翻译-55" class="headerlink" title="翻译"></a>翻译</h2><p>在Thomas Piketty及其他一些经济学家纷纷就“日益加剧的不平等”和“日益增强的世袭财权”发出警告之时，富有的贵族世家竟然还是现代民主国家的核心象征，这非常怪异。</p>
<h2 id="语法重点-48"><a href="#语法重点-48" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>it is…that…</strong></p>
<p>遇到it is…that…的时候大家要警惕，它既有可能是强调句，也有可能是主语从句。因为强调句有2种东西不能强调：形容词和动词。</p>
<p>所以大家可以通过判断it is…that中间夹的内容，来判断是否是强调句。如今天的句子中bizarre是形容词，所以不是强调句，而是主语从句（后置），it为形式主语。</p>
<p><strong>✅</strong> <strong>分清主句和从句</strong></p>
<p>when引出定语从句，修饰名词a time，表示“在……的一段时间”；</p>
<p>that引出主语从句，句首的it为形式主语；</p>
<p>则余下的部分为主句：At a time…, it is bizarre…</p>
<p><strong>✅</strong> <strong>非谓语动词修饰名词</strong></p>
<p>句子中有三个非谓语动词rising、increasing和inherited，分别修饰名词inequality、power和wealth。</p>
<h1 id="D76"><a href="#D76" class="headerlink" title="D76"></a>D76</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230827215259924.png" class="" title="image-20230827215259924">

<h2 id="分析-56"><a href="#分析-56" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>has asked/ upsets/ may search</p>
</li>
<li><p><strong>断开：</strong>通过连接词that/that来断开长难句</p>
</li>
</ul>
<h2 id="生词-55"><a href="#生词-55" class="headerlink" title="生词"></a>生词</h2><p>✅ refrain v. 抑制，节制，克制<br>✅ sweeping adj. 彻底的；广泛的；全面的<br>✅ upset v. 打乱，扰乱；推翻<br>✅ assumption n. 假定，假设<br>✅ authority n. 当局，官方<br>✅ search through… 搜查<br>✅ possession n. 财产，所有物<br>✅ suspect n. 嫌疑犯<br>✅ at the time of one’s arrest 在逮捕某人时</p>
<h2 id="翻译-56"><a href="#翻译-56" class="headerlink" title="翻译"></a>翻译</h2><p>加州已请求大法官们（克制住）不要做出全面性裁定，尤其是不要破坏“执法当局在实施逮捕时可搜查嫌疑人财物”这一古老假定。</p>
<h2 id="语法重点-49"><a href="#语法重点-49" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>名词+that从句</strong></p>
<p>名词+that从句有两种可能性：一种是<strong>定语从句</strong>，修饰限定名词的范围，可以往前翻译为“……样的（名词）”；另一种是<strong>同位语从句</strong>，解释说明名词的含义，顺着往下翻译。区别这两种，可以通过that是否作成分来判断，如下：</p>
<ol>
<li><p>第一个that从句中，that作成分（主语），所以是定语从句。</p>
</li>
<li><p>第二个that从句中，that不作成分，所以是同位语从句。</p>
</li>
</ol>
<h1 id="D77"><a href="#D77" class="headerlink" title="D77"></a>D77</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230827220638721.png" class="" title="image-20230827220638721">

<h2 id="分析-57"><a href="#分析-57" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>compares/had to specify/must sort/applies</p>
</li>
<li><p><strong>断开：</strong>通过标点符号冒号/分号和连接词how来断开长难句</p>
</li>
</ul>
<h2 id="生词-56"><a href="#生词-56" class="headerlink" title="生词"></a>生词</h2><p>✅ compare… with… 比较……和……<br>✅ explosion n. 爆炸，爆发；激增<br>✅ accessibility n. 易接近，可达到<br>✅ digital information 数字信息<br>✅ establishment n. 建立, 确立<br>✅ automobile use 汽车使用<br>✅ virtual adj. 事实上的，实际上的；几乎的<br>✅ necessity n. 必要(性)；(迫切)需要；必需品<br>✅ specify vt. 具体指定；详细说明<br>✅ novel rules 新规矩，新规定<br>✅ domain n. 领域，范围<br>✅ passenger car 小客车<br>✅ sort out 解决</p>
<h2 id="翻译-57"><a href="#翻译-57" class="headerlink" title="翻译"></a>翻译</h2><p>法学教授Orin Kerr把“21世纪数学信息爆炸及其可获取性”与“20世纪汽车确立为生活必需“相较：当时法官们不得不为小轿车这一新兴私人领域明确新规；现在他们也必须解决第四修正案如何适用于数字信息的问题。</p>
<h2 id="语法重点-50"><a href="#语法重点-50" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅<strong>标点</strong></p>
<p>通过标点把握全局，分清楚句子前后之间的关系。如本句中第一个句子后面是冒号，说明后面是解释说明，第二个句子和第三个句子中间是分号，说明两个句子并列一起解释说明前面的第一个句子。</p>
<p><strong>✅</strong> <strong>去扩展找核心</strong></p>
<p>通过去修饰找核心，找到冒号之前的句子核心部分先看懂，再看非核心部分。</p>
<p>句子核心：</p>
<p><strong>Orin Kerr… compares the explosion and accessibility…</strong></p>
<h1 id="D78"><a href="#D78" class="headerlink" title="D78"></a>D78</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230829114915122.png" class="" title="image-20230829114915122">

<h2 id="分析-58"><a href="#分析-58" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>had impelled/said/should be</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号/冒号/引号和连接词whether和分析主谓（主谓主谓）来断开长难句</p>
</li>
</ul>
<h2 id="生词-57"><a href="#生词-57" class="headerlink" title="生词"></a>生词</h2><p>✅ impel v. 促成；驱使，推动；激励，敦促<br>✅ statistics board 统计委员会<br>✅ statistics n. 统计，统计数据，统计资料；统计学<br>✅ motivate v. 刺激；使有动机；激发……的积极性<br>✅ application n. 应用；申请，申请书<br>✅ data analysis 数据分析<br>✅ scientific research 科学研究<br>✅ overall drive 全面的努力<br>✅ drive n. 驱动力，积极性，干劲；压力，紧迫<br>✅ reproducibility n. 可复制性，重复能力，再现性</p>
<h2 id="翻译-58"><a href="#翻译-58" class="headerlink" title="翻译"></a>翻译</h2><p>当被问及是否因为某些特定的论文而促成了这次改变，麦克纳特说：“‘统计委员会’的创建是受对科学研究中统计和数据分析应用的广泛关切的驱动，也是《科学》为提升其发表研究的可复制性的全面努力的一部分。”</p>
<h2 id="语法重点-51"><a href="#语法重点-51" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>找到从句</strong> </p>
<p>通过标点、连接词和分析主谓可以断开长难句并找到3个从句，如下：</p>
<p>1 whether引导宾语从句，跟在及物动词asked后；</p>
<p>2 冒号引出宾语从句，省略了连接词；</p>
<p>3 we publish是省略了连接词的定语从句，修饰前面的名词research。</p>
<p><strong>✅</strong> <strong>平行并列结构</strong></p>
<p>找到两处and连接的平行并列结构，但是并列的内容不同。</p>
<p>1 and平行并列了名词statistics和名词词组data analysis；</p>
<p>2 and平行并列了was motivated…和is…谓语动词及之后的部分。</p>
<p><strong>✅</strong> <strong>去扩展找核心</strong></p>
<p>从句2的前半部分原本是：…The creation of the ‘statistics board’ was motivated by concerns broadly with the application of statistics and data analysis in scientific research…</p>
<p><strong>简化后，这句话的核心是：The creation…was motivated…</strong></p>
<h1 id="D79"><a href="#D79" class="headerlink" title="D79"></a>D79</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230829115353294.png" class="" title="image-20230829115353294">

<h2 id="分析-59"><a href="#分析-59" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>will be/may want</p>
</li>
<li><p><strong>断开：</strong>通过连接词that来断开长难句</p>
</li>
</ul>
<h2 id="生词-58"><a href="#生词-58" class="headerlink" title="生词"></a>生词</h2><p>✅ impact n. 影响，效果，冲击力<br>✅ publication n. 出版物；出版，发表, 公布<br>✅ publishing places 出版单位<br>✅ model v. 模仿，以……为模版<br>✅ approach n. （处理问题的）方法，途径，态度</p>
<h2 id="翻译-59"><a href="#翻译-59" class="headerlink" title="翻译"></a>翻译</h2><p>这种影响不仅会体现在《科学》杂志上刊发的文章中，还有望会影响后来更多想要以《科学》杂志为榜样的出版机构。</p>
<h2 id="语法重点-52"><a href="#语法重点-52" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ <strong>如何找到平行结构</strong> </p>
<p>“三步法”找平行结构</p>
<p>第一步，找并列连词词组“not noly… but…”；</p>
<p>第二步，先往后看，找并列的什么形式；</p>
<p>第三步，再往前找一样的形式。</p>
<p>本句中，并列连词词组not only…but…平行并列了两个through引出的介词短语，即through the publications in Science itself和hopefully through a larger group of publishing places。</p>
<h1 id="D80"><a href="#D80" class="headerlink" title="D80"></a>D80</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230831120024517.png" class="" title="image-20230831120024517">

<h2 id="分析-60"><a href="#分析-60" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>was/knew/went/thought/inquired/arrived</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号，以及连接词how/what/how/that/how来断开长难句</p>
</li>
</ul>
<h2 id="生词-59"><a href="#生词-59" class="headerlink" title="生词"></a>生词</h2><p>✅ astonishing adj. 使人吃惊的，惊人的</p>
<p>✅ revelation n. 揭发，暴露，泄露</p>
<p>✅ go on 继续进行，发生</p>
<p>✅ inquire v. 打听，询问；查问</p>
<h2 id="翻译-60"><a href="#翻译-60" class="headerlink" title="翻译"></a>翻译</h2><p>其中揭露的惊人真相之一是丽贝卡•布鲁克斯对于其新闻编辑室中所发生的事竟几乎毫不知情，她几乎没想过要去问，而且事实上她从未询问过这些新闻报道的题材到底是怎么来的。</p>
<h2 id="语法重点-53"><a href="#语法重点-53" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ 平行并列结构</p>
<p>通过and和前面的逗号，找到两个how表语从句和the fact名词（后接从句）构成平行并列结构。</p>
<p>⚠️ 注意：表语从句属于名词性从句中的一种，可以当名词来用，因此两个表语从句与名词构成平行并列结构是可以的；但这种情况比较少见，大家了解即可。</p>
<p>✅ 嵌套结构</p>
<p>第一个how表语从句中嵌套what（介宾）宾语从句。</p>
<p>the fact后that引出的同位语从句中嵌套how（动宾）宾语从句。</p>
<p>✅ how的用法</p>
<p>⚠️ 注意句中的三个how连接词的含义：</p>
<p>how不仅可以表示程度，“多么”；也可以表示方式方法，“怎么样”。</p>
<h1 id="D81"><a href="#D81" class="headerlink" title="D81"></a>D81</h1><img src="/2023/06/30/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/image-20230902113954354.png" class="" title="image-20230902113954354">

<h2 id="分析-61"><a href="#分析-61" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p><strong>找谓语动词：</strong>measured/is/were/found/is supposed</p>
</li>
<li><p><strong>断开：</strong>通过标点符号逗号，以及连接词which/while/（and）while/what来断开长难句</p>
</li>
</ul>
<h2 id="生词-60"><a href="#生词-60" class="headerlink" title="生词"></a>生词</h2><p>✅ measure v. 测量；估量；权衡</p>
<p>✅ cortisol n. 皮质醇</p>
<p>✅ a stress marker 压力的一种标志、标记</p>
<p>✅ be supposed to do/be… 应该做/是……，被认为做/是……</p>
<p>✅ a place of refuge 一处避难所</p>
<h2 id="翻译-61"><a href="#翻译-61" class="headerlink" title="翻译"></a>翻译</h2><p>研究者分别对人们在工作和家里的皮质醇（精神压力的一种标志）进行了检测，结果显示，在人们普遍认为是避风港的环境中，皮质醇的含量更高</p>
<h2 id="语法重点-54"><a href="#语法重点-54" class="headerlink" title="语法重点"></a>语法重点</h2><p>✅ 平行并列结构</p>
<ul>
<li>第一处and平行并列了两个while时间状语从句；</li>
<li>第二处and平行并列了两个谓语动词measured和found及其后的成分，也就是主语researchers发出了两个动作：measured…和found…。</li>
</ul>
<p>✅ 理清从句</p>
<ul>
<li>which引导非限制性定语从句，修饰people’s cortisol；</li>
<li>两个while引导时间状语从句；</li>
<li>what引导（介宾）宾语从句；</li>
</ul>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
  </entry>
  <entry>
    <title>必须使用statement的情况</title>
    <url>/2022/04/27/Mysql/%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8statement%E7%9A%84%E6%83%85%E5%86%B5/%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8statement%E7%9A%84%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>业务要求必须使用sql注入的时候(比如价格由低到高查看)</p>
<p>Statement支持sql注入，凡是业务方面需要进行sql语句拼接的时候必须使用Statement</p>
<p><u>用PreparedStatement传desc会导致desc两边多一个单引号‘desc’（因为是字段）</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Scanner s = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入desc或asc，desc表示降序，asc表示升序&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;请输入:&quot;);</span></span><br><span class="line"><span class="comment">//        String keywords = s.nextLine();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Connection conn = null;</span></span><br><span class="line"><span class="comment">//        PreparedStatement ps = null;</span></span><br><span class="line"><span class="comment">//        ResultSet rs = null;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;, &quot;root&quot;, &quot;123&quot;);</span></span><br><span class="line"><span class="comment">//            String sql = &quot;select ename from emp order by ename ?&quot;;</span></span><br><span class="line"><span class="comment">//            ps = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">//            ps.setString(1, &quot;desc&quot;);</span></span><br><span class="line"><span class="comment">//            rs = ps.executeQuery();</span></span><br><span class="line"><span class="comment">//            while (rs.next()) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(rs.getString(&quot;ename&quot;));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//            if (rs != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    rs.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (ps != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    ps.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (conn != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    conn.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入desc或asc，desc表示降序，asc表示升序&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">        String keywords = s.nextLine();</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">            st=conn.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;select ename from emp order by ename &quot;</span>+keywords;</span><br><span class="line">            rs=st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    st.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/27/Mysql/%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8statement%E7%9A%84%E6%83%85%E5%86%B5/%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8statement%E7%9A%84%E6%83%85%E5%86%B5/image-20220427153135817.png"></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组（四种方式）"><a href="#创建数组（四种方式）" class="headerlink" title="创建数组（四种方式）"></a>创建数组（四种方式）</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010153713674.png" class="" title="image-20221010153713674">

<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010153823327.png" class="" title="image-20221010153823327">

<h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010153912126.png" class="" title="image-20221010153912126">

<h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010153948806.png" class="" title="image-20221010153948806">

<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010154018725.png" class="" title="image-20221010154018725">

<h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010154045186.png" class="" title="image-20221010154045186">

<h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010154112386.png" class="" title="image-20221010154112386">

<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010154138836.png" class="" title="image-20221010154138836">

<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p>排序的时间复杂度大多是O（NlogN)</p>
<img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221010154446737.png" class="" title="image-20221010154446737">

<p>Arrar数组逆向排序有两种方法：</p>
<p>1将数组从后往前读</p>
<p>2将int[]转为Integer数组，然后使用Arrays.sort(T[],Collections.reverseOrder());</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Integer newNums[] = Arrays.stream(a).boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">Arrays.sort(newNums, Collections.reverseOrder());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;newNums.length;i++)&#123;</span><br><span class="line">	<span class="keyword">int</span> b=newNums[i];</span><br><span class="line">	System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165218703.png" class="" title="image-20221011165218703">

<h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165241918.png" class="" title="image-20221011165241918">

<h2 id="访问元素-1"><a href="#访问元素-1" class="headerlink" title="访问元素"></a>访问元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165505917.png" class="" title="image-20221011165505917">

<h2 id="搜素元素"><a href="#搜素元素" class="headerlink" title="搜素元素"></a>搜素元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165546247.png" class="" title="image-20221011165546247">

<h2 id="更新元素-1"><a href="#更新元素-1" class="headerlink" title="更新元素"></a>更新元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165725807.png" class="" title="image-20221011165725807">

<h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165741777.png" class="" title="image-20221011165741777">

<h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011165809957.png" class="" title="image-20221011165809957">

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231433664.png" class="" title="image-20221011231433664">

<h2 id="添加元素-2"><a href="#添加元素-2" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231443746.png" class="" title="image-20221011231443746">

<h2 id="获取即将出队的元素"><a href="#获取即将出队的元素" class="headerlink" title="获取即将出队的元素"></a>获取即将出队的元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231507816.png" class="" title="image-20221011231507816">

<h2 id="删除即将出队的元素"><a href="#删除即将出队的元素" class="headerlink" title="删除即将出队的元素"></a>删除即将出队的元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231528637.png" class="" title="image-20221011231528637">

<p>还有queue.remove()</p>
<h2 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231559146.png" class="" title="image-20221011231559146">

<h2 id="队列长度"><a href="#队列长度" class="headerlink" title="队列长度"></a>队列长度</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231614227.png" class="" title="image-20221011231614227">

<h2 id="遍历队列"><a href="#遍历队列" class="headerlink" title="遍历队列"></a>遍历队列</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221011231629356.png" class="" title="image-20221011231629356">

<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="创建栈"><a href="#创建栈" class="headerlink" title="创建栈"></a>创建栈</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092310981.png" class="" title="image-20221012092310981">

<h2 id="添加元素-3"><a href="#添加元素-3" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092325173.png" class="" title="image-20221012092325173">

<h2 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092409973.png" class="" title="image-20221012092409973">

<h2 id="删除栈顶元素"><a href="#删除栈顶元素" class="headerlink" title="删除栈顶元素"></a>删除栈顶元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092432849.png" class="" title="image-20221012092432849">

<h2 id="栈的大小"><a href="#栈的大小" class="headerlink" title="栈的大小"></a>栈的大小</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092509964.png" class="" title="image-20221012092509964">

<h2 id="栈是否为空"><a href="#栈是否为空" class="headerlink" title="栈是否为空"></a>栈是否为空</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092526646.png" class="" title="image-20221012092526646">

<h2 id="栈的遍历"><a href="#栈的遍历" class="headerlink" title="栈的遍历"></a>栈的遍历</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221012092556828.png" class="" title="image-20221012092556828">

<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="创建哈希表"><a href="#创建哈希表" class="headerlink" title="创建哈希表"></a>创建哈希表</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014175857193.png" class="" title="image-20221014175857193">

<h2 id="添加元素-4"><a href="#添加元素-4" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014175910094.png" class="" title="image-20221014175910094">

<h2 id="更新元素-2"><a href="#更新元素-2" class="headerlink" title="更新元素"></a>更新元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014175952214.png" class="" title="image-20221014175952214">

<h2 id="删除元素-2"><a href="#删除元素-2" class="headerlink" title="删除元素"></a>删除元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014180014434.png" class="" title="image-20221014180014434">

<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014180049384.png" class="" title="image-20221014180049384">

<h2 id="检查key存在？"><a href="#检查key存在？" class="headerlink" title="检查key存在？"></a>检查key存在？</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014180107172.png" class="" title="image-20221014180107172">

<h2 id="长度-是否还有元素"><a href="#长度-是否还有元素" class="headerlink" title="长度/是否还有元素"></a>长度/是否还有元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221014180141884.png" class="" title="image-20221014180141884"> 

<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016125846536.png" class="" title="image-20221016125846536">

<h2 id="添加元素-5"><a href="#添加元素-5" class="headerlink" title="添加元素"></a>添加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016125916807.png" class="" title="image-20221016125916807">

<h2 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素"></a>搜索元素</h2><p>o（1）</p>
<img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016125935354.png" class="" title="image-20221016125935354">

<h2 id="删除元素-3"><a href="#删除元素-3" class="headerlink" title="删除元素"></a>删除元素</h2><p>o（1）</p>
<img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016125958189.png" class="" title="image-20221016125958189">

<h2 id="长度-1"><a href="#长度-1" class="headerlink" title="长度"></a>长度</h2><p>o（1）</p>
<img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016130023400.png" class="" title="image-20221016130023400">

<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="创建最小堆-最大堆"><a href="#创建最小堆-最大堆" class="headerlink" title="创建最小堆/最大堆"></a>创建最小堆/最大堆</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016211037611.png" class="" title="image-20221016211037611">

<h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016211056569.png" class="" title="image-20221016211056569">

<h2 id="堆顶元素"><a href="#堆顶元素" class="headerlink" title="堆顶元素"></a>堆顶元素</h2><img src="数据结构/image-20221016211147504.png" alt="image-20221016211147504" style="zoom:80%;" />

<h2 id="删除堆顶元素"><a href="#删除堆顶元素" class="headerlink" title="删除堆顶元素"></a>删除堆顶元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016211220756.png" class="" title="image-20221016211220756">

<h2 id="堆里有多少个元素"><a href="#堆里有多少个元素" class="headerlink" title="堆里有多少个元素"></a>堆里有多少个元素</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016211256963.png" class="" title="image-20221016211256963">

<h2 id="遍历堆"><a href="#遍历堆" class="headerlink" title="遍历堆"></a>遍历堆</h2><img src="/2022/10/12/leetcode/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221016211337742.png" class="" title="image-20221016211337742">]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>30-JS的控制语句</title>
    <url>/2022/05/01/javascript/30-JS%E7%9A%84%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/30-JS%E7%9A%84%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   1.if</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   2.switch</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   3.while</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   4do..while</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   5.for循环</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    6.break</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    7.continue</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    8.for.in语句（了解）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    9with语句（了解）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//创建JS数组</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr=[<span class="literal">false</span>,<span class="literal">true</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">3.14</span>];<span class="comment">//JS数组中元素的类型随意、个数随意</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//遍历数组</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// for(var i;i&lt;arr.length;i++)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   alert(arr[i]);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//for..in</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)</span></span><br><span class="line"><span class="javascript">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(i)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(arr[i]);</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  User =<span class="function"><span class="keyword">function</span> (<span class="params">username,password</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.username=username;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.password=password;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u=<span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;444&quot;</span>);</span></span><br><span class="line"><span class="javascript">  alert(u.username+<span class="string">&#x27;,&#x27;</span>+u.password);</span></span><br><span class="line"><span class="javascript">  alert(u[<span class="string">&quot;username&quot;</span>]+<span class="string">&#x27;,&#x27;</span>+u[<span class="string">&quot;password&quot;</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> shuXingMing <span class="keyword">in</span> u)</span></span><br><span class="line"><span class="javascript">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(shuXingMing);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//alert(typeof shuXingMing);//shuXingMing是一个字符串</span></span></span><br><span class="line"><span class="javascript">    alert(u[shuXingMing]);<span class="comment">//这里的shuXingMing就代替了43行的&quot;username&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//引用先写到一个括号当中，访问的变量前面都会添加</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">with</span>(<span class="params">u</span>)</span></span></span><br><span class="line"><span class="javascript">  &#123;</span></span><br><span class="line"><span class="javascript">    alert(u.username+<span class="string">&quot;,&quot;</span>+u.password)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点：for..in两种用途</p>
<p>1用在数组方面，i代表数组元素的下标</p>
<p>2用在对象方面var后代表属性的名字</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230806151758522.png" class="" title="image-20230806151758522">

<h2 id="软件危机和危机的介绍"><a href="#软件危机和危机的介绍" class="headerlink" title="软件危机和危机的介绍"></a>软件危机和危机的介绍</h2><p><font color='red'>软件危机(软件萧条、软件困扰)</font>：是指在计算机软件的<font color='red'>开发</font>和<font color='red'>维护过程</font>中所遇到的一系列严重问题。</p>
<p>软件危机包含下述<font color='red'>两方面的问题</font>：</p>
<p><font color='red'>如何开发软件</font>，满足对软件日益增长的需求；</p>
<p><font color='red'>如何维护</font>数量不断膨胀的<font color='red'>已有软件</font></p>
<h2 id="软件危机的表现形式和产生原因"><a href="#软件危机的表现形式和产生原因" class="headerlink" title="软件危机的表现形式和产生原因"></a>软件危机的表现形式和产生原因</h2><h3 id="软件危机的表现形式（七个）"><a href="#软件危机的表现形式（七个）" class="headerlink" title="软件危机的表现形式（七个）"></a>软件危机的表现形式（七个）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163227015.png" class="" title="image-20230814163227015">

<h3 id="软件危机产生原因"><a href="#软件危机产生原因" class="headerlink" title="软件危机产生原因"></a>软件危机产生原因</h3><h4 id="客观原因（两个-了解即可）"><a href="#客观原因（两个-了解即可）" class="headerlink" title="客观原因（两个-了解即可）"></a>客观原因（两个-了解即可）</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163301700.png" class="" title="image-20230814163301700">

<h4 id="主观原因（七个-了解即可）"><a href="#主观原因（七个-了解即可）" class="headerlink" title="主观原因（七个-了解即可）"></a>主观原因（七个-了解即可）</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163358395.png" class="" title="image-20230814163358395">

<h4 id="产生软件危机的原因-背"><a href="#产生软件危机的原因-背" class="headerlink" title="产生软件危机的原因(背)"></a>产生软件危机的原因(背)</h4><p>（1）与软件<font color='red'>本身的特点</font>有关</p>
<p>（2）与软件<font color='red'>开发与维护的方法不正确</font>有关</p>
<h2 id="消除软件危机的途径（四个）"><a href="#消除软件危机的途径（四个）" class="headerlink" title="消除软件危机的途径（四个）"></a>消除软件危机的途径（四个）</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163441871.png" class="" title="image-20230814163441871">

<h2 id="软件工程的原理和方法学"><a href="#软件工程的原理和方法学" class="headerlink" title="软件工程的原理和方法学"></a>软件工程的原理和方法学</h2><h3 id="软件工程的介绍"><a href="#软件工程的介绍" class="headerlink" title="软件工程的介绍"></a>软件工程的介绍</h3><p><font color='red'>软件工程</font>：是<font color='red'>指导计算机软件开发和维护</font>的一门<font color='red'>工程学科</font>。</p>
<h3 id="软件工程的目标（六个）"><a href="#软件工程的目标（六个）" class="headerlink" title="软件工程的目标（六个）"></a>软件工程的目标（六个）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163718106.png" class="" title="image-20230814163718106">

<h3 id="软件工程的原则（五个）"><a href="#软件工程的原则（五个）" class="headerlink" title="软件工程的原则（五个）"></a>软件工程的原则（五个）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814163756308.png" class="" title="image-20230814163756308">

<h3 id="软件工程的基本原理（七个）"><a href="#软件工程的基本原理（七个）" class="headerlink" title="软件工程的基本原理（七个）"></a>软件工程的基本原理（七个）</h3><p>用<font color='red'>分阶段的生命周期</font>计划严格管理</p>
<p>坚持进行<font color='red'>阶段评审</font></p>
<p>实行严格的<font color='red'>产品控制</font></p>
<p>采用<font color='red'>现代程序设计技术</font></p>
<p><font color='red'>结果</font>应能清楚地<font color='red'>审查</font></p>
<p>开发小组的<font color='red'>人员</font>人员应该<font color='red'>少而精</font></p>
<p>承认不断<font color='red'>改进软件工程实践的必要性</font></p>
<h3 id="软件工程方法学"><a href="#软件工程方法学" class="headerlink" title="软件工程方法学"></a>软件工程方法学</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814171420926.png" class="" title="image-20230814171420926">



<h2 id="软件生命周期的五个经典模型"><a href="#软件生命周期的五个经典模型" class="headerlink" title="软件生命周期的五个经典模型"></a>软件生命周期的五个经典模型</h2><h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814171541894.png" class="" title="image-20230814171541894">

<h3 id="软件生命周期模型分类"><a href="#软件生命周期模型分类" class="headerlink" title="软件生命周期模型分类"></a>软件生命周期模型分类</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814170157584.png" class="" title="image-20230814170157584">

<h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173726356.png" class="" title="image-20230814173726356">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173759398.png" class="" title="image-20230814173759398">

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173819525.png" class="" title="image-20230814173819525">

<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173856534.png" class="" title="image-20230814173856534">

<h4 id="特点和适用项目"><a href="#特点和适用项目" class="headerlink" title="特点和适用项目"></a>特点和适用项目</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173925783.png" class="" title="image-20230814173925783">

<h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814173955016.png" class="" title="image-20230814173955016">

<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174012685.png" class="" title="image-20230814174012685">

<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174036896.png" class="" title="image-20230814174036896">

<h4 id="适用项目"><a href="#适用项目" class="headerlink" title="适用项目"></a>适用项目</h4><p>适用于需求不确定性高的产品</p>
<h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174235966.png" class="" title="image-20230814174235966">

<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174308587.png" class="" title="image-20230814174308587">

<h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174320713.png" class="" title="image-20230814174320713">

<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174337223.png" class="" title="image-20230814174337223">

<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174357512.png" class="" title="image-20230814174357512">

<h3 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174601855.png" class="" title="image-20230814174601855">

<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814174619489.png" class="" title="image-20230814174619489">

<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230814151736727.png" class="" title="image-20230814151736727">

<h2 id="可行性研究的目的和任务以及步骤"><a href="#可行性研究的目的和任务以及步骤" class="headerlink" title="可行性研究的目的和任务以及步骤"></a>可行性研究的目的和任务以及步骤</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181107831.png" class="" title="image-20230816181107831">

<h3 id="可行性研究的目的"><a href="#可行性研究的目的" class="headerlink" title="可行性研究的目的"></a>可行性研究的目的</h3><p>不是解决问题，而是<font color='red'>确定问题是否值得去解决</font></p>
<h3 id="可行性研究的实质"><a href="#可行性研究的实质" class="headerlink" title="可行性研究的实质"></a>可行性研究的实质</h3><p><strong>进行一次大大压缩简化了的系统分析和设计的过程，也就是在较高层次上以较抽象的方式进行的系统分析和设计的过程。</strong></p>
<h3 id="可行性研究的步骤（八步）"><a href="#可行性研究的步骤（八步）" class="headerlink" title="可行性研究的步骤（八步）"></a>可行性研究的步骤（八步）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181225889.png" class="" title="image-20230816181225889">

<h2 id="可行性研究包含的方面和主要内容"><a href="#可行性研究包含的方面和主要内容" class="headerlink" title="可行性研究包含的方面和主要内容"></a>可行性研究包含的方面和主要内容</h2><h3 id="研究方面（四个）"><a href="#研究方面（四个）" class="headerlink" title="研究方面（四个）"></a>研究方面（四个）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816183742329.png" class="" title="image-20230816183742329">

<h3 id="主要内容（8个——只背黑字即可）"><a href="#主要内容（8个——只背黑字即可）" class="headerlink" title="主要内容（8个——只背黑字即可）"></a>主要内容（8个——只背黑字即可）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181527398.png" class="" title="image-20230816181527398">

<h2 id="系统流程图、数据流图"><a href="#系统流程图、数据流图" class="headerlink" title="系统流程图、数据流图"></a>系统流程图、数据流图</h2><h3 id="系统流程图"><a href="#系统流程图" class="headerlink" title="系统流程图"></a>系统流程图</h3><p><font color='red'>系统流程图</font>：是<font color='red'>概括的描绘物理系统的传统工具</font>。表达的是数据在系统各部件之间流动的情况，而不是对数据进行加工处理的控制过程</p>
<h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><p><font color='red'>数据流图</font>：是<font color='red'>用来描述系统逻辑模型的一种图形工具</font>。它描绘信息流和数据从输入移动到输出的过程中所经受的变换</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230817164601831.png" class="" title="image-20230817164601831">

<h4 id="数据流图目的"><a href="#数据流图目的" class="headerlink" title="数据流图目的"></a>数据流图目的</h4><p>数据流图目的：<strong>①作为交流信息的工具</strong>；<strong>②作为分析和设计的工具。</strong></p>
<h4 id="数据流图的四种成分"><a href="#数据流图的四种成分" class="headerlink" title="数据流图的四种成分"></a>数据流图的四种成分</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181331373.png" class="" title="image-20230816181331373">

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181350982.png" class="" title="image-20230816181350982">

<h4 id="数据流图为何分层"><a href="#数据流图为何分层" class="headerlink" title="数据流图为何分层"></a>数据流图为何分层</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181410281.png" class="" title="image-20230816181410281">

<h3 id="系统流程图和数据流图的区别"><a href="#系统流程图和数据流图的区别" class="headerlink" title="系统流程图和数据流图的区别"></a>系统流程图和数据流图的区别</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181421109.png" class="" title="image-20230816181421109">

<h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><h3 id="定义、意义和组成元素"><a href="#定义、意义和组成元素" class="headerlink" title="定义、意义和组成元素"></a>定义、意义和组成元素</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181430656.png" class="" title="image-20230816181430656">

<h3 id="定义数据的方法"><a href="#定义数据的方法" class="headerlink" title="定义数据的方法"></a>定义数据的方法</h3><p><font color='red'>方法</font>：对数据自顶向下分解。</p>
<p><font color='red'>数据组成方式(三种基本类型)</font>：<strong>顺序 选择 重复</strong>     <font color='red'>附加类型</font>：可选 </p>
<h3 id="数据字典的用途"><a href="#数据字典的用途" class="headerlink" title="数据字典的用途"></a>数据字典的用途</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181439347.png" class="" title="image-20230816181439347">

<h2 id="成本效益分析"><a href="#成本效益分析" class="headerlink" title="成本效益分析"></a>成本效益分析</h2><h3 id="成本估计的方法"><a href="#成本估计的方法" class="headerlink" title="成本估计的方法"></a>成本估计的方法</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230816181453881.png" class="" title="image-20230816181453881">

<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818155715268.png" class="" title="image-20230818155715268">

<h2 id="列举考点之外所需记"><a href="#列举考点之外所需记" class="headerlink" title="列举考点之外所需记"></a>列举考点之外所需记</h2><h3 id="需求分析的准则-四条"><a href="#需求分析的准则-四条" class="headerlink" title="需求分析的准则(四条)"></a>需求分析的准则(四条)</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818155924290.png" class="" title="image-20230818155924290">

<h3 id="需求分析要考虑的方面"><a href="#需求分析要考虑的方面" class="headerlink" title="需求分析要考虑的方面"></a>需求分析要考虑的方面</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818160119348.png" class="" title="image-20230818160119348">

<h3 id="需求获取的原则"><a href="#需求获取的原则" class="headerlink" title="需求获取的原则"></a>需求获取的原则</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818160258207.png" class="" title="image-20230818160258207">

<h3 id="需求获取的过程"><a href="#需求获取的过程" class="headerlink" title="需求获取的过程"></a>需求获取的过程</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818160339634.png" class="" title="image-20230818160339634">

<h2 id="需求分析的任务-四条"><a href="#需求分析的任务-四条" class="headerlink" title="需求分析的任务(四条)"></a>需求分析的任务(四条)</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818160022334.png" class="" title="image-20230818160022334">

<h2 id="与用户沟通获取需求的方法"><a href="#与用户沟通获取需求的方法" class="headerlink" title="与用户沟通获取需求的方法"></a>与用户沟通获取需求的方法</h2><p>访谈：1. 正式访谈 2. 非正式访谈 3. 调查表 4. 情景分析技术</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818164142148.png" class="" title="image-20230818164142148">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818164159372.png" class="" title="image-20230818164159372">

<h2 id="结构化分析建模和数据模型"><a href="#结构化分析建模和数据模型" class="headerlink" title="结构化分析建模和数据模型"></a>结构化分析建模和数据模型</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818175332282.png" class="" title="image-20230818175332282">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818175355642.png" class="" title="image-20230818175355642">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818175411622.png" class="" title="image-20230818175411622">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818175423361.png" class="" title="image-20230818175423361">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818175443799.png" class="" title="image-20230818175443799">

<h2 id="实体联系图（ER图）"><a href="#实体联系图（ER图）" class="headerlink" title="实体联系图（ER图）"></a>实体联系图（ER图）</h2><p>数据模型中包含 3 种相互关联的信息：数据对象、数据对象的属性、数据对象彼此间相互连接的关系</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818164334184.png" class="" title="image-20230818164334184">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818161542205.png" class="" title="image-20230818161542205">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818161556450.png" class="" title="image-20230818161556450">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818161639864.png" class="" title="image-20230818161639864">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818161732607.png" class="" title="image-20230818161732607">

<h2 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230818161851798.png" class="" title="image-20230818161851798">

<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150303176.png" class="" title="image-20230819150303176">

<h2 id="总体设计的步骤和原理"><a href="#总体设计的步骤和原理" class="headerlink" title="总体设计的步骤和原理"></a>总体设计的步骤和原理</h2><h3 id="总体设计的步骤"><a href="#总体设计的步骤" class="headerlink" title="总体设计的步骤"></a>总体设计的步骤</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150615443.png" class="" title="image-20230819150615443">

<h4 id="设想供选择的方案"><a href="#设想供选择的方案" class="headerlink" title="设想供选择的方案"></a>设想供选择的方案</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150748062.png" class="" title="image-20230819150748062">

<h4 id="选取合理的方案"><a href="#选取合理的方案" class="headerlink" title="选取合理的方案"></a>选取合理的方案</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150733119.png" class="" title="image-20230819150733119">

<h4 id="选择最佳方案"><a href="#选择最佳方案" class="headerlink" title="选择最佳方案"></a>选择最佳方案</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150812999.png" class="" title="image-20230819150812999">

<h4 id="功能分解"><a href="#功能分解" class="headerlink" title="功能分解"></a>功能分解</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150830800.png" class="" title="image-20230819150830800">

<h4 id="设计软件结构"><a href="#设计软件结构" class="headerlink" title="设计软件结构"></a>设计软件结构</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150935504.png" class="" title="image-20230819150935504">

<h4 id="设计数据库"><a href="#设计数据库" class="headerlink" title="设计数据库"></a>设计数据库</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819150953491.png" class="" title="image-20230819150953491">

<h4 id="制定测试计划"><a href="#制定测试计划" class="headerlink" title="制定测试计划"></a>制定测试计划</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819151044969.png" class="" title="image-20230819151044969">

<h4 id="书写文档"><a href="#书写文档" class="headerlink" title="书写文档"></a>书写文档</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819151057330.png" class="" title="image-20230819151057330">

<h4 id="审查和复审"><a href="#审查和复审" class="headerlink" title="审查和复审"></a>审查和复审</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819151142734.png" class="" title="image-20230819151142734">

<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>①<strong>模块化</strong>；②<strong>抽象</strong>；③<strong>逐步求精</strong>；④<strong>信息隐藏和局部化</strong>；⑤<strong>模块独立</strong></p>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>模块化定义：模块是由边界元素限定的相邻程序元素的序列，模块是构成程序的基本构件。<strong>模块化就是把程序划分成独立命名且可独立访问的模块，每个模块完成一个子功能，把这些模块集成起来构成一个整体，可以完成指定的功能满足用户的需求。</strong></p>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>抽象定义：把在现实世界中一定事物、状态或过程之间的共性集中和概括起来，暂时忽略它们之间的差异，这就是抽象。</p>
<h4 id="逐步求精"><a href="#逐步求精" class="headerlink" title="逐步求精"></a>逐步求精</h4><p>逐步求精的定义：是软件工程技术的基础。为<strong>了能集中精力解决主要问题而尽量推迟对问题细节的考虑</strong>。</p>
<h4 id="信息隐藏和局部化"><a href="#信息隐藏和局部化" class="headerlink" title="信息隐藏和局部化"></a>信息隐藏和局部化</h4><p>信息隐藏原理指出：应该这样<strong>设计和确定模块</strong>，使得一个模块内包含的信息对于<strong>不需要</strong>这些<strong>信息的模块</strong>来说，是<strong>不能访问</strong>的</p>
<p><strong>局部化与信息隐藏概念是密切相关的。所谓</strong>局部化<strong>是</strong>指把一些关系密切的软件元素<strong>物理地放得彼此靠近</strong>。“隐藏”意味着<strong>有效的模块化</strong>可以<strong>通过定义一组独立的模块而实现</strong>，这些独立的模块彼此间仅仅交换那些为了完成系统功能而必须交换的信息。</p>
<h2 id="总体设计的主要任务"><a href="#总体设计的主要任务" class="headerlink" title="总体设计的主要任务"></a>总体设计的主要任务</h2><p>①划分出组成系统的物理元素程序、文件、数据库、人工过程和文档等，但是每个物理元素仍然处于黑盒子级，这些黑盒子里的具体内容将在以后仔细设计。</p>
<p>②设计软件的结构，也就是要确定系统中每个程序是由哪些模块组成的，以及这些模块相互间的关系。</p>
<h2 id="模块化的作用（四个）"><a href="#模块化的作用（四个）" class="headerlink" title="模块化的作用（四个）"></a>模块化的作用（四个）</h2><p>①使<strong>软件结构清晰</strong>，不仅<strong>容易设计</strong>也<strong>容易阅读</strong>和<strong>理解</strong>。</p>
<p>②使软件<strong>容易测试</strong>和<strong>调试</strong>，有助于<strong>提高软件的可靠性</strong>。</p>
<p>③<strong>提高软件</strong>的<strong>可修改性</strong>。</p>
<p>④<strong>有助于</strong>软件开发工程的<strong>组织管理</strong>。</p>
<h2 id="常见的几种耦合和内聚"><a href="#常见的几种耦合和内聚" class="headerlink" title="常见的几种耦合和内聚"></a>常见的几种耦合和内聚</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152029337.png" class="" title="image-20230819152029337">

<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152122434.png" class="" title="image-20230819152122434">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152222796.png" class="" title="image-20230819152222796">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152257090.png" class="" title="image-20230819152257090">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152328235.png" class="" title="image-20230819152328235">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152355065.png" class="" title="image-20230819152355065">

<h3 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152434992.png" class="" title="image-20230819152434992">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152504228.png" class="" title="image-20230819152504228">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152524725.png" class="" title="image-20230819152524725">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152546495.png" class="" title="image-20230819152546495">

<h2 id="启发规则（七个）"><a href="#启发规则（七个）" class="headerlink" title="启发规则（七个）"></a>启发规则（七个）</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152637277.png" class="" title="image-20230819152637277">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152734747.png" class="" title="image-20230819152734747">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152904534.png" class="" title="image-20230819152904534">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152917796.png" class="" title="image-20230819152917796">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230819152924953.png" class="" title="image-20230819152924953">    

<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820151723570.png" class="" title="image-20230820151723570">

<h2 id="详细设计的目标以及程序流程图"><a href="#详细设计的目标以及程序流程图" class="headerlink" title="详细设计的目标以及程序流程图"></a>详细设计的目标以及程序流程图</h2><h3 id="详细设计的目标"><a href="#详细设计的目标" class="headerlink" title="详细设计的目标"></a>详细设计的目标</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820155243535.png" class="" title="image-20230820155243535">

<h3 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820152616669.png" class="" title="image-20230820152616669">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820152629179.png" class="" title="image-20230820152629179">

<h2 id="合图-N-S"><a href="#合图-N-S" class="headerlink" title="合图(N-S)"></a>合图(N-S)</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820152711051.png" class="" title="image-20230820152711051">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820152811903.png" class="" title="image-20230820152811903">

<h2 id="问题分析图-PAD"><a href="#问题分析图-PAD" class="headerlink" title="问题分析图(PAD)"></a>问题分析图(PAD)</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820152940280.png" class="" title="image-20230820152940280">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820153058730.png" class="" title="image-20230820153058730">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820153156069.png" class="" title="image-20230820153156069">

<h2 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820153226595.png" class="" title="image-20230820153226595">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820153314646.png" class="" title="image-20230820153314646">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820153551898.png" class="" title="image-20230820153551898">

<h2 id="程序复杂程度定量度量"><a href="#程序复杂程度定量度量" class="headerlink" title="程序复杂程度定量度量"></a>程序复杂程度定量度量</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820154028103.png" class="" title="image-20230820154028103">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820154924880.png" class="" title="image-20230820154924880">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820154948587.png" class="" title="image-20230820154948587">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230820155005914.png" class="" title="image-20230820155005914">

<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821151931095.png" class="" title="image-20230821151931095">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162817765.png" class="" title="image-20230821162817765">

<h2 id="软件测试的目标和准则"><a href="#软件测试的目标和准则" class="headerlink" title="软件测试的目标和准则"></a>软件测试的目标和准则</h2><h3 id="软件测试的目标"><a href="#软件测试的目标" class="headerlink" title="软件测试的目标"></a>软件测试的目标</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821152851671.png" class="" title="image-20230821152851671">

<h3 id="软件测试准则"><a href="#软件测试准则" class="headerlink" title="软件测试准则"></a>软件测试准则</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821153050718.png" class="" title="image-20230821153050718">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821153310497.png" class="" title="image-20230821153310497">

<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p><strong>单元测试集中检测软件设计的最小单元一模块，它和编码属于软件过程的同一个阶段。</strong></p>
<p><strong>测试重点</strong>：</p>
<p>①<strong>模块接口</strong>：</p>
<p>模块接口数据流是否正常进出；参数数目、次序、属性或单位系统与变元是否一致；是否修改了只做输入用的变元；全局变量定义和用法在各模块是否一致。</p>
<p>②<strong>局部数据结构</strong></p>
<p>应该仔细设计测试方案，以发现局部数据说明、初始化、默认值等方面错误。</p>
<p>③<strong>重要的执行通路</strong></p>
<p>选择具有代表性、最可能发现错误的执行通路测试；设计测试方案来发现错误。</p>
<p>④<strong>出错处理通路</strong></p>
<p>着重测试可能发生的错误为：对错误描述难以理解、记下的错误与实际错误不同、处理之前已经引起系统干预、对错误处理不正确。</p>
<p>⑤<strong>边界条件</strong> </p>
<p>边界测试是单元测试中最重要的任务。</p>
<h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821155055845.png" class="" title="image-20230821155055845">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821155337708.png" class="" title="image-20230821155337708">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821155355626.png" class="" title="image-20230821155355626">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821160021543.png" class="" title="image-20230821160021543">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821155928315.png" class="" title="image-20230821155928315">

<h2 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821160346597.png" class="" title="image-20230821160346597">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821160407567.png" class="" title="image-20230821160407567">

<h2 id="白盒测试技术"><a href="#白盒测试技术" class="headerlink" title="白盒测试技术"></a>白盒测试技术</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821160620219.png" class="" title="image-20230821160620219">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821160732302.png" class="" title="image-20230821160732302">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161003802.png" class="" title="image-20230821161003802">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161203489.png" class="" title="image-20230821161203489">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161311036.png" class="" title="image-20230821161311036">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161320535.png" class="" title="image-20230821161320535">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161430436.png" class="" title="image-20230821161430436">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161630092.png" class="" title="image-20230821161630092">

<h2 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161800034.png" class="" title="image-20230821161800034">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821161855788.png" class="" title="image-20230821161855788">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162302869.png" class="" title="image-20230821162302869">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162545984.png" class="" title="image-20230821162545984">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162606861.png" class="" title="image-20230821162606861">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162615072.png" class="" title="image-20230821162615072">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162640021.png" class="" title="image-20230821162640021">

<h2 id="软件可靠性"><a href="#软件可靠性" class="headerlink" title="软件可靠性"></a>软件可靠性</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230821162708937.png" class="" title="image-20230821162708937">

<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822154904177.png" class="" title="image-20230822154904177">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822161134143.png" class="" title="image-20230822161134143">

<h2 id="软件维护的定义"><a href="#软件维护的定义" class="headerlink" title="软件维护的定义"></a>软件维护的定义</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155232842.png" class="" title="image-20230822155232842">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155316222.png" class="" title="image-20230822155316222">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155401073.png" class="" title="image-20230822155401073">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155515759.png" class="" title="image-20230822155515759">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155554632.png" class="" title="image-20230822155554632">

<h2 id="软件维护的特点"><a href="#软件维护的特点" class="headerlink" title="软件维护的特点"></a>软件维护的特点</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155655584.png" class="" title="image-20230822155655584">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155738239.png" class="" title="image-20230822155738239">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822155828281.png" class="" title="image-20230822155828281">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160010297.png" class="" title="image-20230822160010297">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160101579.png" class="" title="image-20230822160101579">

<h2 id="软件维护的过程"><a href="#软件维护的过程" class="headerlink" title="软件维护的过程"></a>软件维护的过程</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160444357.png" class="" title="image-20230822160444357">

<h2 id="软件的可维护性"><a href="#软件的可维护性" class="headerlink" title="软件的可维护性"></a>软件的可维护性</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160714334.png" class="" title="image-20230822160714334">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160721079.png" class="" title="image-20230822160721079">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160800891.png" class="" title="image-20230822160800891">

<h2 id="预防性维护"><a href="#预防性维护" class="headerlink" title="预防性维护"></a>预防性维护</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160927888.png" class="" title="image-20230822160927888">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230822160936867.png" class="" title="image-20230822160936867">

<h2 id="软件再工程过程"><a href="#软件再工程过程" class="headerlink" title="软件再工程过程"></a>软件再工程过程</h2><p>软件再工程过程模型定义的 6 类活动</p>
<p>①库存目录分析；</p>
<p>②文档重构；</p>
<p>③逆向工程 </p>
<p>定义：分析程序以便在比源代码更高的抽象层次上创建出程序的某种表示的过程</p>
<p>④代码重构</p>
<p>⑤数据重构 </p>
<p>定义：发生在相当低的抽象层次上，是一种全范围的再工程活动。</p>
<p>⑥正向工程 </p>
<p>定义：应用软件工程的原理、概念、技术和方法来重新开发某个现有的应用系统。</p>
<h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823155336951.png" class="" title="image-20230823155336951">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823155219626.png" class="" title="image-20230823155219626">

<h2 id="面向对象方法学"><a href="#面向对象方法学" class="headerlink" title="面向对象方法学"></a>面向对象方法学</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823151533951.png" class="" title="image-20230823151533951">

<h2 id="面向对象方法学要点"><a href="#面向对象方法学要点" class="headerlink" title="面向对象方法学要点"></a>面向对象方法学要点</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823151620459.png" class="" title="image-20230823151620459">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823151757793.png" class="" title="image-20230823151757793">

<h2 id="面向对象方法学的优点"><a href="#面向对象方法学的优点" class="headerlink" title="面向对象方法学的优点"></a>面向对象方法学的优点</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823151855506.png" class="" title="image-20230823151855506">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823151945766.png" class="" title="image-20230823151945766">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152131171.png" class="" title="image-20230823152131171">

<h2 id="面向对象的概念"><a href="#面向对象的概念" class="headerlink" title="面向对象的概念"></a>面向对象的概念</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152242014.png" class="" title="image-20230823152242014">

<h4 id="对象的特点"><a href="#对象的特点" class="headerlink" title="对象的特点"></a>对象的特点</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152442368.png" class="" title="image-20230823152442368">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152533486.png" class="" title="image-20230823152533486">

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152617109.png" class="" title="image-20230823152617109">

<h3 id="实例和消息"><a href="#实例和消息" class="headerlink" title="实例和消息"></a>实例和消息</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152747704.png" class="" title="image-20230823152747704">

<h3 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152938632.png" class="" title="image-20230823152938632">

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823152950393.png" class="" title="image-20230823152950393">

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823153103589.png" class="" title="image-20230823153103589">

<h3 id="多态性和重载"><a href="#多态性和重载" class="headerlink" title="多态性和重载"></a>多态性和重载</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823153134216.png" class="" title="image-20230823153134216">

<h2 id="模型分类"><a href="#模型分类" class="headerlink" title="模型分类"></a>模型分类</h2><h3 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823153503024.png" class="" title="image-20230823153503024">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823153610528.png" class="" title="image-20230823153610528">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823153952307.png" class="" title="image-20230823153952307">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154107934.png" class="" title="image-20230823154107934">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154226979.png" class="" title="image-20230823154226979">

<h3 id="动态模型"><a href="#动态模型" class="headerlink" title="动态模型"></a>动态模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154355423.png" class="" title="image-20230823154355423">

<h3 id="功能模型"><a href="#功能模型" class="headerlink" title="功能模型"></a>功能模型</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154520953.png" class="" title="image-20230823154520953">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154611029.png" class="" title="image-20230823154611029">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154740953.png" class="" title="image-20230823154740953">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823154916787.png" class="" title="image-20230823154916787">

<h3 id="三种模型的关系"><a href="#三种模型的关系" class="headerlink" title="三种模型的关系"></a>三种模型的关系</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823155149001.png" class="" title="image-20230823155149001">

<h1 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h1><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823155655446.png" class="" title="image-20230823155655446">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823162206933.png" class="" title="image-20230823162206933">

<h2 id="估算软件规模"><a href="#估算软件规模" class="headerlink" title="估算软件规模"></a>估算软件规模</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160307691.png" class="" title="image-20230823160307691">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160356413.png" class="" title="image-20230823160356413">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160413403.png" class="" title="image-20230823160413403">



<h2 id="人员组织"><a href="#人员组织" class="headerlink" title="人员组织"></a>人员组织</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160618329.png" class="" title="image-20230823160618329">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160629193.png" class="" title="image-20230823160629193">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160648017.png" class="" title="image-20230823160648017">



<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160659919.png" class="" title="image-20230823160659919">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160801202.png" class="" title="image-20230823160801202">

<h2 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160921593.png" class="" title="image-20230823160921593">

<h3 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823160929173.png" class="" title="image-20230823160929173">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161107456.png" class="" title="image-20230823161107456">

<h3 id="软件质量保证措施"><a href="#软件质量保证措施" class="headerlink" title="软件质量保证措施"></a>软件质量保证措施</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161129744.png" class="" title="image-20230823161129744">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161416629.png" class="" title="image-20230823161416629">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161436887.png" class="" title="image-20230823161436887">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161508230.png" class="" title="image-20230823161508230">

<h2 id="软件配置管理"><a href="#软件配置管理" class="headerlink" title="软件配置管理"></a>软件配置管理</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161541501.png" class="" title="image-20230823161541501">

<h2 id="能力成熟模型"><a href="#能力成熟模型" class="headerlink" title="能力成熟模型"></a>能力成熟模型</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230823161839257.png" class="" title="image-20230823161839257">

<p>定义：是用于评价软件机构的软件过程能力成熟度模型。能力承受模型的 5 个等级从低到高：</p>
<p>1.初始级；2.可重复级；3.已定义级；4.已管理级；5.优化级</p>
<h1 id="大题总结"><a href="#大题总结" class="headerlink" title="大题总结"></a>大题总结</h1><p><a href="http://www.taodudu.cc/news/show-5293807.html?action=onClick">http://www.taodudu.cc/news/show-5293807.html?action=onClick</a></p>
<p><a href="https://blog.csdn.net/qq_39183034/article/details/123399644">【软件工程导论题型大总结】画图题总结_软件工程画图题_快乐江湖的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/m0_55298718/article/details/125208673?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA%E9%A2%98%E5%9E%8B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-125208673.nonecase&spm=1018.2226.3001.4187">TYUT太原理工大学2022软工导论大题汇总_太原理工大学软件工程导论_啦啦噜噜^_^的博客-CSDN博客</a></p>
<h2 id="数据流图（常考）"><a href="#数据流图（常考）" class="headerlink" title="数据流图（常考）"></a>数据流图（常考）</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153408565.png" class="" title="image-20230824153408565">

<h3 id="数据流图（DFD）分层"><a href="#数据流图（DFD）分层" class="headerlink" title="数据流图（DFD）分层"></a>数据流图（DFD）分层</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/20201025130336120.png" class="" title="在这里插入图片描述">

<h4 id="分层说明"><a href="#分层说明" class="headerlink" title="分层说明"></a>分层说明</h4><p>数据流图分层 , 最上层是 顶层数据流图 , 第二层是 层数据流图 , 最底层是 底层数据流图 ,</p>
<p>“顶层数据流图” 与 “底层数据流图” 之间是若干 中层数据流图 </p>
<p>中层数据流图 需要进行编号 , 从 开始编号 </p>
<h4 id="顶层数据流图"><a href="#顶层数据流图" class="headerlink" title="顶层数据流图"></a>顶层数据流图</h4><p><strong>顶层数据流图 :</strong> 中间的椭圆 是需要开发的 系统 , 周边的矩形 表示的是 外部实体人或组织 , 外部实体 与 系统 之间 , 有数据传输关系 ;</p>
<p>一个形象的说明是 多个人吃火锅 , 外层周边是人 , 中心位置火锅是系统 ;</p>
<p>（顶层数据流图 能够表达的信息是非常有限的 , 其将整个系统 , 使用一个节点表示 ,其可以体现出 系统与外界实体之间的交互 ,但是系统内部的情况 , 系统内部模块之间的数据交换 是没有体现的 ;）</p>
<h4 id="中层数据流图"><a href="#中层数据流图" class="headerlink" title="中层数据流图"></a>中层数据流图</h4><p><strong>与 顶层数据流图 比较没有变化的部分 :</strong> 外部实体 , 外部实体与系统之间的数据流 , 是没有变化的 ;</p>
<p><strong>变化部分 :</strong> 有变化的部分是系统内部 , 系统内部进行了细化 , 原来系统是一个节点 , 在 中层数据流图中 , 会将一个节点拆分成多个节点 , 这些节点就是系统中的数据处理部件 , 即加工 ;</p>
<p>这些数据处理部件 ( 加工 ) 之间会有数据流的交互 </p>
<h4 id="底层数据流图"><a href="#底层数据流图" class="headerlink" title="底层数据流图"></a>底层数据流图</h4><p><strong>针对每个加工节点 , 将其拆分 , 绘制其中的更详细的数据流转情况 ;</strong></p>
<p>数据流图 ( DFD ) 分层 , 是从 顶层 -&gt; 中层 -&gt; 底层 , 逐层进行分解 , 这种分解思路 , 与结构化的开发方法 , 是完全匹配的 ;</p>
<p>因此 , 数据流图是结构化开发方法中 , 最常用的工具 ;</p>
<h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153438191.png" class="" title="image-20230824153438191">

<h4 id="1识别外部实体及输入输出数据流"><a href="#1识别外部实体及输入输出数据流" class="headerlink" title="1识别外部实体及输入输出数据流"></a>1识别外部实体及输入输出数据流</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153454880.png" class="" title="image-20230824153454880">

<h4 id="2画出环境图（顶层数据流图）"><a href="#2画出环境图（顶层数据流图）" class="headerlink" title="2画出环境图（顶层数据流图）"></a>2画出环境图（顶层数据流图）</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153731116.png" class="" title="image-20230824153731116">

<h4 id="3画出一层数据流图"><a href="#3画出一层数据流图" class="headerlink" title="3画出一层数据流图"></a>3画出一层数据流图</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153754046.png" class="" title="image-20230824153754046">

<h4 id="4画出二层数据流图"><a href="#4画出二层数据流图" class="headerlink" title="4画出二层数据流图"></a>4画出二层数据流图</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153820674.png" class="" title="image-20230824153820674">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824153832322.png" class="" title="image-20230824153832322">

<h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824161236052.png" class="" title="image-20230824161236052">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824161301875.png" class="" title="image-20230824161301875">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824161307380.png" class="" title="image-20230824161307380">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824161327772.png" class="" title="image-20230824161327772">

<h3 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824162316315.png" class="" title="image-20230824162316315">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824162331632.png" class="" title="image-20230824162331632">

<h3 id="例四"><a href="#例四" class="headerlink" title="例四"></a>例四</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824163444229.png" class="" title="image-20230824163444229">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824163452123.png" class="" title="image-20230824163452123">

<h3 id="例五"><a href="#例五" class="headerlink" title="例五"></a>例五</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824163701201.png" class="" title="image-20230824163701201">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230824163938234.png" class="" title="image-20230824163938234">

<h2 id="软件结构图（不常考）"><a href="#软件结构图（不常考）" class="headerlink" title="软件结构图（不常考）"></a>软件结构图（不常考）</h2><ul>
<li><p>最左侧一般是输入</p>
</li>
<li><p>中间是处理</p>
</li>
<li><p>最右侧是输出</p>
<p>（1）软件结构图考的就是把数据流图（DFD）转换成软件结构图</p>
<p>（2）DFD可分为事务流和变换流，一般来说，所有的DFD都可以做为变换流，但当有明显的处理中心时，可以做为事务流来做</p>
<p>（3）结构图中，一个方框代表一个模块，框内注明模块的名字或主要功能；方框间的箭头和直线表示模块的调用关系；空心圆尾部箭头表示传递的是数据，实心圆尾部箭头表示传递的是控制信息。</p>
<p>（4）我们在划分DFD图时要用两条虚线将DFD图划分为输入流、变换中心、输出流，其中输入流、输出流的边界划分与设计人员对他们的解释有关，所以不同设计人员设定的输入输出流可能不同</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/aa25ea3290984f98a621990d111dc98f.png" class="" title="在这里插入图片描述"></li>
</ul>
<h3 id="例一-1"><a href="#例一-1" class="headerlink" title="例一"></a>例一</h3><p>（1）划分DFD图为输入流、变换中心、输出流</p>
<p>（2）完成“第一级分解”（不会没事，下面有例题，一看就会）</p>
<p>（3）完成“第二级分解”</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114203412437.png" class="" title="image-20231114203412437">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/0446567528a04ad1ac0d91790e10dde0.jpeg" class="" title="img">

<h3 id="例二-1"><a href="#例二-1" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114203853349-1700036544022.png" class="" title="image-20231114203853349">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114204431440-1700036546083.png" class="" title="image-20231114204431440">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/8fb4fa0a604f4d6da024c286c1e3841f-1700036547596.png" class="" title="在这里插入图片描述">

<h3 id="例三-1"><a href="#例三-1" class="headerlink" title="例三"></a>例三</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825145609410.png" class="" title="image-20230825145609410">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825145625844.png" class="" title="image-20230825145625844">

<h4 id="1（没有分顶层数据流图和第一层数据流图）"><a href="#1（没有分顶层数据流图和第一层数据流图）" class="headerlink" title="1（没有分顶层数据流图和第一层数据流图）"></a>1（没有分顶层数据流图和第一层数据流图）</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825145700481.png" class="" title="image-20230825145700481">

<h4 id="2软件结构图"><a href="#2软件结构图" class="headerlink" title="2软件结构图"></a>2软件结构图</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825145832119.png" class="" title="image-20230825145832119">

<h3 id="例四-1"><a href="#例四-1" class="headerlink" title="例四"></a>例四</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825150637020.png" class="" title="image-20230825150637020">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825150813784.png" class="" title="image-20230825150813784">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825150820870.png" class="" title="image-20230825150820870">



<h2 id="流程图（常考）"><a href="#流程图（常考）" class="headerlink" title="流程图（常考）"></a>流程图（常考）</h2><p>“跑道圆”形状代表开始或者结束</p>
<p>平行四边形框是输入/输出框</p>
<p>处理过程，“矩形”</p>
<p>判断，“菱形”</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825151929306.png" class="" title="image-20230825151929306">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825152256265.png" class="" title="image-20230825152256265">

<h2 id="对象模型（不常考）"><a href="#对象模型（不常考）" class="headerlink" title="对象模型（不常考）"></a>对象模型（不常考）</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825153441664.png" class="" title="image-20230825153441664">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825153826588.png" class="" title="image-20230825153826588">

<h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/v2-c85cf685ae647519ae1b469b4d5321b1_b.webp" class="" title="img">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825160232239.png" class="" title="image-20230825160232239">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825160446606.png" class="" title="image-20230825160446606">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825160415263.png" class="" title="image-20230825160415263">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825160348954.png" class="" title="image-20230825160348954">

<h2 id="N-S图"><a href="#N-S图" class="headerlink" title="N-S图"></a>N-S图</h2><p>记abcd即可</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825161042201.png" class="" title="image-20230825161042201">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114213719068.png" class="" title="image-20231114213719068">

<h3 id="例一-2"><a href="#例一-2" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825163200993.png" class="" title="image-20230825163200993">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825163237173.png" class="" title="image-20230825163237173">

<h3 id="例二-2"><a href="#例二-2" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/d5fadafa450449689e9f31c48588940e.png" class="" title="在这里插入图片描述">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ccff849e073d40baa490987396d08fa3.png" class="" title="在这里插入图片描述">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/5c3962a9e462449b9dd6f2278d2e2576.png" class="" title="在这里插入图片描述">

<h3 id="例三-2"><a href="#例三-2" class="headerlink" title="例三"></a>例三</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826155204087.png" class="" title="image-20230826155204087">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/221bfa2d76aa4a0b957280d11428145c.png" class="" title="img"><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/eb891af0c3e148809940a2589462a71a.png" class="" title="img">

<h3 id="例四-2"><a href="#例四-2" class="headerlink" title="例四"></a>例四</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114213622569.png" class="" title="image-20231114213622569">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231114214451227.png" class="" title="image-20231114214451227">

<h2 id="PAD图"><a href="#PAD图" class="headerlink" title="PAD图"></a>PAD图</h2><p>记abcd即可</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825164516171.png" class="" title="image-20230825164516171">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230825164824317.png" class="" title="image-20230825164824317">

<h3 id="例一-3"><a href="#例一-3" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/221bfa2d76aa4a0b957280d11428145c.png" class="" title="img">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/49959fa3dce646e0aef7440a074459f3.png" class="" title="在这里插入图片描述">

<h3 id="其他练习题"><a href="#其他练习题" class="headerlink" title="其他练习题"></a>其他练习题</h3><p><a href="https://blog.csdn.net/tango_wolf/article/details/116191348?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165491834716781435446377%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165491834716781435446377&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-116191348-null-null.142%5Ev13%5Epc_search_result_control_group,157%5Ev14%5Enew_3&utm_term=%E7%9B%92%E5%9B%BE%E4%BE%8B%E9%A2%98&spm=1018.2226.3001.4187">练习题</a></p>
<h2 id="流图"><a href="#流图" class="headerlink" title="流图"></a>流图</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826151047981.png" class="" title="image-20230826151047981">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826151237603.png" class="" title="image-20230826151237603">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826151302995.png" class="" title="image-20230826151302995">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826150923690.png" class="" title="image-20230826150923690">

<h2 id="判定表-1"><a href="#判定表-1" class="headerlink" title="判定表"></a>判定表</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826160431987.png" class="" title="image-20230826160431987">    

<h3 id="例一-4"><a href="#例一-4" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/93f83211b7594151bf016bfa9d64563f.png" class="" title="在这里插入图片描述">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826160528797.png" class="" title="image-20230826160528797">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826160746281.png" class="" title="image-20230826160746281">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826160753840.png" class="" title="image-20230826160753840">

<h3 id="例二-3"><a href="#例二-3" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826160911280.png" class="" title="image-20230826160911280">

<h2 id="几种常见的逻辑覆盖"><a href="#几种常见的逻辑覆盖" class="headerlink" title="几种常见的逻辑覆盖"></a>几种常见的逻辑覆盖</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826163345723.png" class="" title="image-20230826163345723">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826163359891.png" class="" title="image-20230826163359891">

<h3 id="例一-5"><a href="#例一-5" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/dc794840482e43e2ad7cd1edbf24aaa2.jpeg" class="" title="img">

<h4 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h4><p>要求：每个语句至少执行一次，意思就是测试路径要走遍所有菱形和矩形</p>
<p>例：A=2,B=0,X=4 执行路径为sacbed</p>
<h4 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h4><p>要求：不仅测试路径要走遍所有菱形和矩形，而且要走遍所有菱形的所有分支</p>
<p>例：(1)A=3,B=0,X=3 执行路径为sacbd</p>
<p>​    (2)A=2,B=1,X=1 执行路径为sabed</p>
<h4 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h4><p>要求：不仅测试路径要走遍所有菱形和矩形，而且菱形中的中的每个条件要取到各种可能的结果</p>
<p>即：a菱形中的条件要出现A&gt;1,A&lt;=1,B=0,B!=0</p>
<p>​        b菱形中的条件要出现A=2,A!=2,X&gt;1,X&lt;=1</p>
<p>例：(1)A=2,B=0,X=4 执行路径为 sacbed</p>
<p>​        (2)A=1,B=1,X=1 执行路径为 sabd</p>
<h4 id="判定-条件覆盖"><a href="#判定-条件覆盖" class="headerlink" title="判定/条件覆盖"></a>判定/条件覆盖</h4><p>要求：同时满足判定覆盖、条件覆盖</p>
<p>例：(1)A=2,B=0,X=4 执行路径为 sacbed</p>
<p>​    (2)A=1,B=1,X=1 执行路径为 sabd</p>
<h4 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h4><p>要求：每个菱形中的条件的各种可能组合都出现至少一次</p>
<p>  上题共覆盖8种组合条件：</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ce07b8ddaf064d5a8126891ccd27acb7.jpeg" class="" title="img">

<p>例：(1) 输入：A=2,B=0,X=4   预计输出：略（考试要写）</p>
<p>​        (2) 输入：A=2,B=1,X=1   预计输出：略（考试要写）</p>
<p>​        (3) 输入：A=1,B=0,X=2   预计输出：略（考试要写）</p>
<p>​       (4) 输入：A=1,B=1,X=1   预计输出：略（考试要写）</p>
<p>标准答案</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/b7ef0e969c3b4bcba65339889e5cdc7b.png" class="" title="img">

<h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826164321000.png" class="" title="image-20230826164321000">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826164338915.png" class="" title="image-20230826164338915">

<h3 id="例二-4"><a href="#例二-4" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826163431663.png" class="" title="image-20230826163431663">



<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826163819386.png" class="" title="image-20230826163819386">

<h2 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h2><h3 id="例一-6"><a href="#例一-6" class="headerlink" title="例一"></a>例一</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826172857691.png" class="" title="image-20230826172857691">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826173159539.png" class="" title="image-20230826173159539">

<h3 id="例二-5"><a href="#例二-5" class="headerlink" title="例二"></a>例二</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826174034328.png" class="" title="image-20230826174034328">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826174046042.png" class="" title="image-20230826174046042">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230826174115897.png" class="" title="image-20230826174115897">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827150851001.png" class="" title="image-20230827150851001">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827150905278.png" class="" title="image-20230827150905278">

<h3 id="例三-3"><a href="#例三-3" class="headerlink" title="例三"></a>例三</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827150926832.png" class="" title="image-20230827150926832">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827150937853.png" class="" title="image-20230827150937853">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827151024077.png" class="" title="image-20230827151024077">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827151040887.png" class="" title="image-20230827151040887">

<h3 id="例四-3"><a href="#例四-3" class="headerlink" title="例四"></a>例四</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/0aa35a2821e742788c4ac22531d460cb.png" class="" title="img">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/f9fbbd4cd25a48049c35683a9c6829e1.png" class="" title="img">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/f4264ca598c3475cab50894650a892fc.png" class="" title="img">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/2c6713cf3515420995e1bf32960e9add.png" class="" title="img">

<h2 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827152430316.png" class="" title="image-20230827152430316">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827152636929.png" class="" title="image-20230827152636929">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827152802341.png" class="" title="image-20230827152802341">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20230827152810840.png" class="" title="image-20230827152810840">

<h2 id="UML补充图"><a href="#UML补充图" class="headerlink" title="UML补充图"></a>UML补充图</h2><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029191811370.png" class="" title="image-20231029191811370">

<h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><h4 id="用例图元素"><a href="#用例图元素" class="headerlink" title="用例图元素"></a>用例图元素</h4><p> 用例图的中心思想就是：系统应该为每个用户做什么</p>
<p>画用例图需要包含：</p>
<p>1、系统（方框）</p>
<p>2、行为者（人形符号）</p>
<p>3、用例（椭圆）</p>
<p>如：</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/55aaf0090a6e4cbd87dfddaf02373e9e.png" class="" title="img">

<h4 id="用例关系"><a href="#用例关系" class="headerlink" title="用例关系"></a>用例关系</h4><h5 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029192351477.png" class="" title="image-20231029192351477">

<p><strong>以下3种关系的箭头指向都是：内容、功能多的——&gt;内容、功能少的</strong> </p>
<h5 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029192418538.png" class="" title="image-20231029192418538">

<h5 id="扩展关系"><a href="#扩展关系" class="headerlink" title="扩展关系"></a>扩展关系</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029192435791.png" class="" title="image-20231029192435791">

<h5 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029192510007.png" class="" title="image-20231029192510007">

<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="例一-7"><a href="#例一-7" class="headerlink" title="例一"></a>例一</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029192639654.png" class="" title="image-20231029192639654">

<h5 id="例二-6"><a href="#例二-6" class="headerlink" title="例二"></a>例二</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029193153907.png" class="" title="image-20231029193153907">

<p><a href="https://wenku.so.com/d/44b0092c219da66e386676c286fd7721">更多例题</a></p>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/bdaeae66785a4900bf19782663a3b082.jpeg" class="" title="img">

<h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029195904152.png" class="" title="image-20231029195904152">

<h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><p>箭头指向被使用的类</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029195922424.png" class="" title="image-20231029195922424">

<h5 id="关联关系-1"><a href="#关联关系-1" class="headerlink" title="关联关系"></a>关联关系</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029195956928.png" class="" title="image-20231029195956928">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200033923.png" class="" title="image-20231029200033923">

<h5 id="聚合关系（空心菱形箭头）"><a href="#聚合关系（空心菱形箭头）" class="headerlink" title="聚合关系（空心菱形箭头）"></a>聚合关系（空心菱形箭头）</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200222161.png" class="" title="image-20231029200222161">

<h5 id="组合关系（实心菱形箭头）"><a href="#组合关系（实心菱形箭头）" class="headerlink" title="组合关系（实心菱形箭头）"></a>组合关系（实心菱形箭头）</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200240470.png" class="" title="image-20231029200240470">

<h5 id="实现继承关系（实心菱形箭头"><a href="#实现继承关系（实心菱形箭头" class="headerlink" title="实现继承关系（实心菱形箭头)"></a>实现继承关系（实心菱形箭头)</h5><p>实现接口用虚线</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200607824.png" class="" title="image-20231029200607824">

<p>继承类用实线</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200616021.png" class="" title="image-20231029200616021">

<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><h5 id="例一-8"><a href="#例一-8" class="headerlink" title="例一"></a>例一</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029195319876.png" class="" title="image-20231029195319876">

<h5 id="例二-7"><a href="#例二-7" class="headerlink" title="例二"></a>例二</h5><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029200856381.png" class="" title="image-20231029200856381">

<h3 id="流程图（重复）"><a href="#流程图（重复）" class="headerlink" title="流程图（重复）"></a>流程图（重复）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029201523167.png" class="" title="image-20231029201523167">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029201545521.png" class="" title="image-20231029201545521">

<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>常用就涉及四个元素：角色、对象、生命线、消息</p>
<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029202538370.png" class="" title="image-20231029202538370">

<h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029201803239.png" class="" title="image-20231029201803239">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029201821510.png" class="" title="image-20231029201821510">

<h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203012121.png" class="" title="image-20231029203012121">

<h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203220124.png" class="" title="image-20231029203220124">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203240699.png" class="" title="image-20231029203240699">



<h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203826075.png" class="" title="image-20231029203826075">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203926611.png" class="" title="image-20231029203926611">

<h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203746740.png" class="" title="image-20231029203746740">

<img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029203809860.png" class="" title="image-20231029203809860">

<h3 id="数据流图（重复）"><a href="#数据流图（重复）" class="headerlink" title="数据流图（重复）"></a>数据流图（重复）</h3><img src="/2023/08/06/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/image-20231029204118725.png" class="" title="image-20231029204118725">

<h3 id="ER图（重复）"><a href="#ER图（重复）" class="headerlink" title="ER图（重复）"></a>ER图（重复）</h3><p>略</p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><img src="/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/image-20221022215942377.png" class="" title="image-20221022215942377">

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="定义：函数直接或间接调用自己"><a href="#定义：函数直接或间接调用自己" class="headerlink" title="定义：函数直接或间接调用自己"></a>定义：函数直接或间接调用自己</h2><p>func():</p>
<p>​       func()</p>
<h2 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h2><ol>
<li>接受的参数</li>
<li>返回值</li>
<li>终止的条件</li>
<li>递归拆解：如何递归下一层</li>
</ol>
<img src="/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/image-20230625095847654.png" class="" title="image-20230625095847654">

<h1 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h1><p>Divide&amp;Conquer</p>
<p>大问题切割成小问题</p>
<p>用到了递归，自己调用自己</p>
<img src="/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/image-20230625101812551.png" class="" title="image-20230625101812551">

<h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><img src="/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/image-20230625102648036.png" class="" title="image-20230625102648036">

<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>核心：每一步做出的选择都是<em><strong>当前</strong></em>看起来<em><strong>最好的</strong></em>选择</p>
<p>​            只是局部的最优选择</p>
<p>​            而不是整体的最优选择</p>
<img src="/2022/10/22/leetcode/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/image-20230625105324379.png" class="" title="image-20230625105324379">]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>BOM3-弹出消息框和确认框</title>
    <url>/2022/05/04/javascript/BOM3-%E5%BC%B9%E5%87%BA%E6%B6%88%E6%81%AF%E6%A1%86%E5%92%8C%E7%A1%AE%E8%AE%A4%E6%A1%86/BOM3-%E5%BC%B9%E5%87%BA%E6%B6%88%E6%81%AF%E6%A1%86%E5%92%8C%E7%A1%AE%E8%AE%A4%E6%A1%86/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// var ok= window.confirm(&quot;亲，确认删除数据吗？&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//  //alert(ok);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//  if(ok)&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//    alert(&quot;delete data...&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//  &#125;</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;亲，确认删除数据吗？&quot;</span>))</span></span><br><span class="line"><span class="javascript">     &#123;</span></span><br><span class="line"><span class="javascript">       alert(<span class="string">&quot;delete data...&quot;</span>);</span></span><br><span class="line"><span class="javascript">     &#125;</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹出消息框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;消息框！&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除操作前都要提前得到用户的确认--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹出消息框(删除)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM1-设置和获取文本框的value</title>
    <url>/2022/05/02/javascript/DOM1-%E8%AE%BE%E7%BD%AE%E5%92%8C%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84value/DOM1-%E8%AE%BE%E7%BD%AE%E5%92%8C%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E6%A1%86%E7%9A%84value/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--两个作用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1获取文本框的value值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2用等号的方式修改他的value值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">    btnElt.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取username节点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var usernameElt=document.getElementById(&quot;username&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// var username=usernameElt.value;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(username);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(document.getElementById(&quot;username&quot;).value);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//可以修改它的value</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value=<span class="string">&quot;zhangsan&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text &quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取文库的value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;setBtn&quot;</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;username2&quot;</span>).value=<span class="built_in">document</span>.getElementById(<span class="string">&quot;username1&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;将第一个文本框中value值赋值到第二个文本框中&quot;</span> <span class="attr">id</span>=<span class="string">&quot;setBtn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--blur事件：失去焦点事件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以下代码中的this代表的是当前input节点对象，this.value就是这个节点对象的value属性。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;alert(this.value)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM4-BOM5-将当前窗口设置为顶级窗口</title>
    <url>/2022/05/04/javascript/BOM4-BOM5-%E5%B0%86%E5%BD%93%E5%89%8D%E7%AA%97%E5%8F%A3%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%A1%B6%E7%BA%A7%E7%AA%97%E5%8F%A3/BOM4-BOM5-%E5%B0%86%E5%BD%93%E5%89%8D%E7%AA%97%E5%8F%A3%E8%AE%BE%E7%BD%AE%E4%B8%BA%E9%A1%B6%E7%BA%A7%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<p>BOM4</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;005.html&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BOM5</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    005页面</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">/* 如果当前窗口不是顶级窗口，将其设置为顶级窗口*/</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">setTop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//windou代表当前的005</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//window.top是004，window.self是005</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(<span class="built_in">window</span>.top!=<span class="built_in">window</span>.self)</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//window.self.location是005的地址</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将顶级窗口的window.top.location地址设置为005</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.top.location=<span class="built_in">window</span>.self.location;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;如果当前窗口不是顶级窗口的话，将当前窗口设置为顶级窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setTop()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM7-修改浏览器地址栏上的url</title>
    <url>/2022/05/04/javascript/BOM7-%E4%BF%AE%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%8A%E7%9A%84url/BOM7-%E4%BF%AE%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%8A%E7%9A%84url/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">goBaidu</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// var locationObj=window.location;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// locationObj.href=&quot;http://www.baidu.com&quot;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// window.location.href=&quot;http://www.jd.com&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   window.location=&quot;http://www.126.com&quot;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// document.location.href=&quot;http://sina.com.cn&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.location=<span class="string">&quot;http://tmall.com&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新浪&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;goBaidu()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--总结，有哪些方法通过浏览器往服务器发送请求？</span></span><br><span class="line"><span class="comment">    1.表单form的提交</span></span><br><span class="line"><span class="comment">    2.超链接</span></span><br><span class="line"><span class="comment">    3.document.location</span></span><br><span class="line"><span class="comment">    4.window.location</span></span><br><span class="line"><span class="comment">    5.window.open(&quot;url&quot;)</span></span><br><span class="line"><span class="comment">    6.直接在浏览器地址栏输入url，然后回车</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    以上所有请求方式都可以携带数据给服务器，只有通过表单提交的数据才是动态的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM2-innerHTML和innerText</title>
    <url>/2022/05/02/javascript/DOM2-innerHTML%E5%92%8CinnerText/DOM2-innerHTML%E5%92%8CinnerText/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">100px</span> ;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">innerText和innerHTML属性区别</span></span><br><span class="line"><span class="comment">  相同点：都是设置元素内部的内容</span></span><br><span class="line"><span class="comment">  不同点：</span></span><br><span class="line"><span class="comment">          innerHTML会把后面的字符串当作一段HTML代码解释执行</span></span><br><span class="line"><span class="comment">          innerText，即使后面是一段HTML代码，也只是当作一段普通的字符串来看待！！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">    btn.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//第一步获取div对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> divElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// divElt.innerHTML=&quot;64646464&quot;;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// divElt.innerHTML=&quot;&lt;font color=&#x27;red&#x27;&gt; 用户名不能为空&lt;/font&gt;&quot;;</span></span></span><br><span class="line"><span class="javascript">      divElt.innerText=</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置div中的内容&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM4-扩展字符串的trim函数</title>
    <url>/2022/05/02/javascript/DOM4-%E6%89%A9%E5%B1%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84trim%E5%87%BD%E6%95%B0/DOM4-%E6%89%A9%E5%B1%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84trim%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//低版本的IE浏览器不支持字符串的trim（）函数，可以自己对String类扩展一个全新的trim（）函数！</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">String</span>.prototype.trim=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在当前的方法中的this代表的就是当前字符串</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\s+$/</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> username=<span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//去除前后空白</span></span></span><br><span class="line"><span class="javascript">      username=username.trim();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 测试</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;---&gt;&quot;</span>+username+<span class="string">&quot;&lt;---&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM6-history对象</title>
    <url>/2022/05/04/javascript/BOM6-history%E5%AF%B9%E8%B1%A1/BOM6-history%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;007.html&quot;</span>&gt;</span>007页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;前进&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.go(1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    007 page！</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.back()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.go(-1)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM3-正则表达式</title>
    <url>/2022/05/02/javascript/DOM3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/DOM3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> emailRegExp = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//正则表达式对象的test()方法</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//true：字符串格式匹配成功</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//false：字符串格式匹配失败</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ok=emailRegExp.test(email);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(ok)</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//合法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;emailError&quot;</span>).innerText=<span class="string">&quot;邮箱地址合法&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//不合法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;emailError&quot;</span>).innerText=<span class="string">&quot;邮箱地址不合法&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//给文本框绑定focus</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>).onfocus=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;emailError&quot;</span>).innerText=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;emailError&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 12px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证邮箱&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<p>==1什么是正则表达式，有什么用？==</p>
<p>==正则表达式：Regular Expression==</p>
<p>==正则表达式主要用在字符串格式匹配方面==</p>
<p>==2正则表达式，对于javascript编程来说，需要掌握：==</p>
<ol>
<li>==常见的正则表达式符号要认识==</li>
<li>==简单的正则表达式要会写==</li>
<li>==他人编写的正则表达式要会看懂==</li>
<li>==javascript创建正则表达式的两种方法==</li>
<li>==javascript中正则表达对象有哪些方法==</li>
<li>==要能够从网上找到自己需要的正则表达式，并且测试有效性==</li>
</ol>
<p>==3常见的正则表达式符号==</p>
<p>​    ==.匹配除换行以外的任意字符==</p>
<p>​    ==\w匹配字母或数字或下划线或汉字==</p>
<p>​    ==\s匹配任意的空白符==</p>
<p>​    ==\d匹配数字==</p>
<p>​    ==\b匹配单词的开始或结束==</p>
<p>​    ==^匹配字符串的开始==</p>
<p>​    ==$匹配字符串的结束==</p>
<p>====    </p>
<p>​    ==*重复零次或更多次==</p>
<p>​    ==+重复一次或更多次==</p>
<p>​    ==？重复零次或一次==</p>
<p>​    =={n}重复n次==</p>
<p>​    =={n,}重复n次或更多次==</p>
<p>​    =={n，m}重复n到m次==</p>
<p>​    ==\W匹配任意不是字母；数字，下划线，汉字的字符==</p>
<p>​    ==\S匹配任意不是空白符的字符==</p>
<p>​    ==\D匹配任意非数字的字符==</p>
<p>​    ==\B匹配不是单词开头或结束的位置==</p>
<p>​    ==[ ^ x]匹配除了x以外的任意字符==</p>
<p>​    ==[ ^aeiou]匹配除了aeiou这几个字母以外的任意字符==</p>
<p>​    ==正则表达式当中的小括号()优先级较高==</p>
<p>​    ==[1-9]表示1-9的任意1个数字（次数是1次）==</p>
<p>​    ==[A-Za-z0-9]表示A-Za-z0-9中的任意一个字符==</p>
<p>​    ==[A-Za-z0-9-]表示A-Z、a-z、0-9、- .以上所有字符中的任意一个字符==</p>
<p>====    </p>
<p>==4创建正则表达式对象的方式、调用正则表达式对象的方法==</p>
<p>==第一种创建方式：==</p>
<p>​    ==var regExp=/正则表达式/flags；==</p>
<p>==第二种创建方式：使用内置支持类RegExp==</p>
<p>​    ==var regExp=new RegExp(“正则表达式”,flags)；==</p>
<p>==关于flags：==</p>
<p>​    ==g：全局匹配==</p>
<p>​    ==i：忽略大小写==</p>
<p>​    ==m：多行搜索。当前面是正则表达式的时候，m不能用。只有前面是普通字符串的时候才行==</p>
<p>==正则表达式对象的test()方法？==</p>
<p>​    ==true/false=正则表达式.test(用户填写的字符串)；==</p>
<p>​    ==true：字符串格式匹配成功==</p>
<p>​    ==false：字符串格式匹配失败==</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM6-复选框的全选和取消全选</title>
    <url>/2022/05/03/javascript/DOM6-%E5%A4%8D%E9%80%89%E6%A1%86%E7%9A%84%E5%85%A8%E9%80%89%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%A8%E9%80%89/DOM6-%E5%A4%8D%E9%80%89%E6%A1%86%E7%9A%84%E5%85%A8%E9%80%89%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%A8%E9%80%89/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     window.onload=function ()&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     var firstChk=document.getElementById(&quot;firstChk&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     firstChk.onclick=function ()&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         var aihaos=document.getElementsByName(&quot;aihao&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         if(firstChk.checked)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             for(var i=0;i&lt;aihaos.length;i++)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//                 aihaos[i].checked=true;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         &#125;else</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             for(var i=0;i&lt;aihaos.length;i++)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//                 aihaos[i].checked=false;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> firstChk = <span class="built_in">document</span>.getElementById(<span class="string">&quot;firstChk&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span></span><br><span class="line"><span class="javascript">        firstChk.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                aihaos[i].checked = firstChk.checked;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> all = aihaos.length;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aihaos.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            aihaos[i].onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> checkedCount=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//总数和选中的数量相等时，第一个复选框被选中</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aihaos.length;i++)</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(aihaos[i].checked)</span></span><br><span class="line"><span class="javascript">                        checkedCount++;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//精炼！！！</span></span></span><br><span class="line"><span class="javascript">                firstChk.checked=(checkedCount==all);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// if(checkedCount==all)&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     firstChk.checked=true;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;else&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     firstChk.checked=false;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstChk&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tt&quot;</span>&gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM1+BOM2-window的open和close</title>
    <url>/2022/05/04/javascript/BOM1-BOM2-window%E7%9A%84open%E5%92%8Cclose/BOM1-BOM2-window%E7%9A%84open%E5%92%8Cclose/</url>
    <content><![CDATA[<p>BOM1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    BOM中window对象是顶级对象，代表浏览器窗口；</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    window有close和open方法，代表开启和关闭窗口；</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(新窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(当前窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_self&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(新窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;blank&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(父窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_parent&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度(顶级窗口)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_top&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开表单验证&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;002-open.html&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>BOM2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭当前窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.close()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON在开发中的使用1</title>
    <url>/2022/05/04/javascript/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A81/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A81/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">/*--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      1什么是JSON，有什么用--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       Javascript  Object Notation （数据交换格式）--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       JSON主要的作用是：一种标准的数据交换格式（目前非常流行，90%的系统，系统A和系统B交换数据的话，都采用JSON）--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      2.JSON是一种标准的轻量级的数据交换格式。特点是：--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             体积小、易解析--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      3.在实际开发中有两种数据交换格式，使用最多，1是JSON，2是XML--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         XML体积较大，解析麻烦，但有优点是：语法严谨。（通常银行相关的系统之间进行数据交换的话会使用XML）--&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      4.JSON的语法格式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        var jsonObj=&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &quot;属性名&quot;:”属性值&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &quot;属性名&quot;:”属性值&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &quot;属性名&quot;:”属性值&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &quot;属性名&quot;:”属性值&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &quot;属性名&quot;:”属性值&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              ....</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        &#125;;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//创建一个JSON对象(JSON也可以称为无类型对象。轻量级，轻巧。体积小。易解析。）</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> studentObj=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;sno&quot;</span>:<span class="string">&quot;110&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;sname&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript">  alert(studentObj.sno+<span class="string">&quot;,&quot;</span>+studentObj.sname+<span class="string">&quot;,&quot;</span>+studentObj.sex);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//JSON数组</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> students=[</span></span><br><span class="line"><span class="javascript">        &#123;<span class="string">&quot;sno&quot;</span>:<span class="string">&quot;110&quot;</span>,<span class="string">&quot;sname&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="string">&quot;sno&quot;</span>:<span class="string">&quot;120&quot;</span>,<span class="string">&quot;sname&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="string">&quot;sno&quot;</span>:<span class="string">&quot;130&quot;</span>,<span class="string">&quot;sname&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//遍历</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;students.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> stuObj=students[i];</span></span><br><span class="line"><span class="javascript">        alert(stuObj.sno+<span class="string">&quot;,&quot;</span>+stuObj.sname+<span class="string">&#x27;,&#x27;</span>+stuObj.sex);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM8—周期函数setInterval</title>
    <url>/2022/05/04/javascript/DOM8%E2%80%94%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0setInterval/DOM8%E2%80%94%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0setInterval/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      JS的内置类：Date用来获取时间日期</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   */</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> nowTime=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">  <span class="comment">//输出</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//document.write(nowTime);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//转换成具有本地语言环境的日期格式</span></span></span><br><span class="line"><span class="javascript">  nowTime=nowTime.toLocaleString();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(nowTime);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="comment">//当以上格式不是想要的，可以通过日期获取年月日等信息自制日期格式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> t=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> year=t.getFullYear();<span class="comment">//返回年信息，以全格式返回</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> month=t.getMonth();<span class="comment">//月份是0-11</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var dayOfWeek=t.getDay();//获取一周的第几天</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> day=t.getDate();<span class="comment">//获取日信息</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(year+<span class="string">&quot;年&quot;</span>+(month+<span class="number">1</span>)+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//重点：怎么获取毫秒数？（从1970年1月1日 00.00.00  000到当前系统时间的总毫秒数）</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var times=t.getTime();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// document.write(times);//一般会使用毫秒数当时间戳（timestamp）</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">displayTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> strtime=time.toLocaleString();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDiv&quot;</span>).innerHTML=strtime;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//每隔一秒调用displayTime()函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//从这行代码执行结束开始，每个1000毫秒调用此函数</span></span></span><br><span class="line"><span class="javascript">        v=<span class="built_in">window</span>.setInterval(<span class="string">&quot;displayTime()&quot;</span>,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.clearInterval(v);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示网络时钟&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;start()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;系统时间停止&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;stop()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timeDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM9-内置支持类Array</title>
    <url>/2022/05/04/javascript/DOM9-%E5%86%85%E7%BD%AE%E6%94%AF%E6%8C%81%E7%B1%BBArray/DOM9-%E5%86%85%E7%BD%AE%E6%94%AF%E6%8C%81%E7%B1%BBArray/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//长度0的数组</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var arr=[];</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(arr.length);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //数据类型随意</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var arr2=[1,2,3,false,&quot;abc&quot;,3.14];</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(arr.length);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// arr2[7]=&quot;test&quot;;//这是第八个元素</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// document.write(&quot;&lt;br&gt;&quot;);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //遍历</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// for(var i=0;i&lt;arr2.length;i++)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   document.write(arr2[i]+&quot;&lt;br&gt;&quot;);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //另一种创建数组的对象方式</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var a=new Array();</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(a.length);//0</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var a2=new Array(3);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// alert(a2.length);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var a3=new Array(3,2);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//alert(a3.length);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> str=a.join(<span class="string">&quot;-&quot;</span>);</span></span><br><span class="line"><span class="javascript">  alert(str);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//在数组的末尾添加元素</span></span></span><br><span class="line"><span class="javascript">  a.push(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">  alert(a.join(<span class="string">&quot;-&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//将数组末尾的元素弹出(数组长度-1)</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> endELt=a.pop();</span></span><br><span class="line"><span class="javascript">  alert(endELt);</span></span><br><span class="line"><span class="javascript">  alert(a.join(<span class="string">&quot;-&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//JS数组自动模拟数据结构，先进先出，后进后出原则</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//push压栈</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//pop弹栈</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//反转数组</span></span></span><br><span class="line"><span class="javascript">  a.reverse();</span></span><br><span class="line"><span class="javascript">  alert(a.join(<span class="string">&quot;-&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON在开发中的使用2</title>
    <url>/2022/05/04/javascript/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A82/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A82/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复杂一些的JSON对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> user=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;usercode&quot;</span>:<span class="number">120</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;sex&quot;</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;address&quot;</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;city&quot;</span>:<span class="string">&quot;北京&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;street&quot;</span>:<span class="string">&quot;大兴区&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;zipcode&quot;</span>:<span class="string">&quot;12212121&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;aihao&quot;</span>:[<span class="string">&quot;smoke&quot;</span>,<span class="string">&quot;drink&quot;</span>,<span class="string">&quot;tt&quot;</span>]</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//访问人名+人居住的城市</span></span></span><br><span class="line"><span class="javascript">      alert(user.username+<span class="string">&quot;居住在&quot;</span>+user.address.city);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            请自行设计JSON格式的数据，这个JSON格式的数据可以描述整个班级中每一个学生的信息，以及总人数信息.</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> jsonData=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;total&quot;</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;students&quot;</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;1980-10-20&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;1981-10-20&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;birth&quot;</span>:<span class="string">&quot;1982-10-20&quot;</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON在开发中的使用3</title>
    <url>/2022/05/04/javascript/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A83/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A83/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>eval函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &lt;!--JSON是一种行业内的数据交换标准</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//      在JS中以对象的形式存在</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// --&gt;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    eval函数作用是：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        将字符串当作一段JS代码解释并执行。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      window.eval(&quot;var i=100;&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      alert(&quot;i=&quot;+i);//i=100</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//java连接数据库，查询数据之后，将数据在java程序中拼接成JSON格式的“字符串”，将json格式的字符串相应到浏览器</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//也就是说java响应到浏览器上的仅仅是一个“JSON格式的字符串：，还不是一个json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//可以使用eval函数，将json格式的字符串转换成json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fromJava=<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;zhangsan\&quot;,\&quot;password\&quot;:\&quot;123\&quot;&#125;&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.eval(<span class="string">&quot;var jsonObj=&quot;</span>+fromJava);</span></span><br><span class="line"><span class="javascript">    alert(jsonObj.name+<span class="string">&quot;,&quot;</span>+jsonObj.password)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    面试题</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        在JS当中：[]和&#123;&#125;有什么区别？</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            []是数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#123;&#125;是json。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            java中的数组 ：int[] arr=&#123;1,2,3,4,5&#125;;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            JS中数组：var arr=[1,2,3,4,5];</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            JSON：var jsonObj=&#123;&quot;email&quot;:&quot;zhangsan@123.com&quot;,&quot;age&quot;:25&#125;;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> json=&#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//JS中访问json对象的属性</span></span></span><br><span class="line"><span class="javascript">          alert(json.username);</span></span><br><span class="line"><span class="javascript">          alert(json[<span class="string">&quot;username&quot;</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM5-表单验证</title>
    <url>/2022/05/03/javascript/DOM5-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/DOM5-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    1、用户名不能为空</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    2、用户名必须在6-14位之间</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    3、用户名只能有数字和字母组成，不能含有其他符号（正则表达式0</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    4、密码和确认密码一致，邮箱地址合法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    5、同意失去焦点验证</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    6、错误提示信息统一在span标签中提示，并且要求字体12好，红色</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    7、文本框再次获得焦点后，清空错误提示信息，如果文本框中数据不合法则要求清空文本框的value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    8、最终表单所有项均合法方可提交</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.username部分</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取username的span标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usernameErrorSpan=<span class="built_in">document</span>.getElementById(<span class="string">&quot;usernameError&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//给用户名文本绑定blur事件</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usernameElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">            usernameElt.onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username=<span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//去除前后空白</span></span></span><br><span class="line"><span class="javascript">            username=username.trim();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断手否为空</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(username)</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//用户名不为空</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//继续判断长度[6-14]</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(username.length&lt;<span class="number">6</span>||username.length&gt;<span class="number">14</span>)</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    usernameErrorSpan.innerText=<span class="string">&quot;用户名长度必须在[6-14]之间&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//用户名长度</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//继续判断是否有特殊符号</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> regExp=<span class="regexp">/^[A-Za-z0-9]+$/</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> ok=regExp.test(username);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(ok)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//用户名合法</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//用户名中有特殊符号</span></span></span><br><span class="line"><span class="javascript">                        usernameErrorSpan.innerText=<span class="string">&quot;用户名只能由数字和字母组成&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                usernameErrorSpan.innerText=<span class="string">&quot;用户名不能为空&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">         &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//给username这个文本框绑定获得焦点事件</span></span></span><br><span class="line"><span class="javascript">        usernameElt.onfocus=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//清空非法的value</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(usernameErrorSpan.innerText!=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="javascript">            usernameElt.value=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//清空span</span></span></span><br><span class="line"><span class="javascript">            usernameErrorSpan.innerText=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.userpwd部分</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取密码提示错误的span标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwdErrorSpan=<span class="built_in">document</span>.getElementById(<span class="string">&quot;pwdError&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//密码框对象获取</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> userpwd2Elt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;userPwd2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        userpwd2Elt.onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userpwdElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;userPwd&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userpwd=userpwdElt.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userpwd2=userpwd2Elt.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(userpwd!=userpwd2)</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//密码不一致</span></span></span><br><span class="line"><span class="javascript">                pwdErrorSpan.innerText=<span class="string">&quot;密码不一致&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//密码一致</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//绑定focus事件</span></span></span><br><span class="line"><span class="javascript">        userpwd2Elt.onfocus=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(pwdErrorSpan.innerText!=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                userpwd2Elt.value=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            pwdErrorSpan.innerText=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.Email部分</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取Email的span</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> emailSpan=<span class="built_in">document</span>.getElementById(<span class="string">&quot;emailError&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//给email绑定blur事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> emailElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>);</span></span><br><span class="line"><span class="javascript">        emailElt.onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取email</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> email=emailElt.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//编写email的正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> emailRegExp=<span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ok=emailRegExp.test(email);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(ok)&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//不合法</span></span></span><br><span class="line"><span class="javascript">                emailSpan.innerText=<span class="string">&quot;邮箱地址不合法&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//给emailElt绑定focus</span></span></span><br><span class="line"><span class="javascript">            emailElt.onfocus=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(emailSpan.innerText!=<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    emailElt.value=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                emailSpan.innerText=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//4.提交部分</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//给提交按钮绑定鼠标单击事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> submitBtnElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;submitBtn&quot;</span>);</span></span><br><span class="line"><span class="javascript">        submitBtnElt.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//触发username的blur，userpwd2的blur，email的blur；</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//不需要人工操作， 纯JS代码执行</span></span></span><br><span class="line"><span class="javascript">            usernameElt.focus();</span></span><br><span class="line"><span class="javascript">            usernameElt.blur();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            userpwd2Elt.focus();</span></span><br><span class="line"><span class="javascript">            userpwd2Elt.blur();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            emailElt.focus();</span></span><br><span class="line"><span class="javascript">            emailElt.blur();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//当所有表单项是合法的时候提交表单</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(usernameErrorSpan.innerText==<span class="string">&quot;&quot;</span>&amp;&amp;pwdErrorSpan.innerText==<span class="string">&quot;&quot;</span>&amp;&amp;emailSpan.innerText==<span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取表单对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> userFormElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;userForm&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//可以在这里设置action，也可以不在这里</span></span></span><br><span class="line"><span class="javascript">                userFormElt.action=<span class="string">&quot;http://localhost:8080/jd/save&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="javascript">                userFormElt.submit();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;userForm&quot;</span>   <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    确认密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwd2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwdError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;emailError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submitBtn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM7-获取下拉列表选中项的value</title>
    <url>/2022/05/03/javascript/DOM7-%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E9%80%89%E4%B8%AD%E9%A1%B9%E7%9A%84value/DOM7-%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E9%80%89%E4%B8%AD%E9%A1%B9%E7%9A%84value/</url>
    <content><![CDATA[<p><img src="/2022/05/03/javascript/DOM7-%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E9%80%89%E4%B8%AD%E9%A1%B9%E7%9A%84value/DOM7-%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E9%80%89%E4%B8%AD%E9%A1%B9%E7%9A%84value/image-20220503180542303.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--两种方式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一种--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;select onchange=&quot;alert(this.value)&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;option value=&quot;&quot;&gt;&amp;#45;&amp;#45;请选择省份&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;option value=&quot;001&quot;&gt;河北省&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;option value=&quot;002&quot;&gt;河南省&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;option value=&quot;003 &quot;&gt;山东省&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;option value=&quot;004&quot;&gt;山西省&lt;/option&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> provinceList=<span class="built_in">document</span>.getElementById(<span class="string">&quot;provinceList&quot;</span>);</span></span><br><span class="line"><span class="javascript">        provinceList.onchange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          alert(provinceList.value);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//前端用户选择的假设是河北省，那么必须获取到河北省的pcode，即获取到001，</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//然后将001发送提交给服务器,服务器底层会执行一条sql语句：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//select * from t_city where pcode=”001“；</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//返回一个List集合，List&lt;City&gt; cityList;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//cityList相应浏览器，浏览器在解析city&#x27;List集合会转换成一个新的下拉列表</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;provinceList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择省份<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span>&gt;</span>河南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;003 &quot;</span>&gt;</span>山东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;004&quot;</span>&gt;</span>山西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON在开发中的使用4</title>
    <url>/2022/05/04/javascript/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A84/JSON%E5%9C%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A84/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>设置table的tbody<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data=&#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;toatl&quot;</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;emps&quot;</span>:[</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">&quot;empno&quot;</span>:<span class="number">7369</span>,<span class="string">&quot;ename&quot;</span>:<span class="string">&quot;SMITH&quot;</span>,<span class="string">&quot;sal&quot;</span>:<span class="number">800.0</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">&quot;empno&quot;</span>:<span class="number">7361</span>,<span class="string">&quot;ename&quot;</span>:<span class="string">&quot;SMITH1&quot;</span>,<span class="string">&quot;sal&quot;</span>:<span class="number">1800.0</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">&quot;empno&quot;</span>:<span class="number">7360</span>,<span class="string">&quot;ename&quot;</span>:<span class="string">&quot;SMITH2&quot;</span>,<span class="string">&quot;sal&quot;</span>:<span class="number">2800.0</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">&quot;empno&quot;</span>:<span class="number">7362</span>,<span class="string">&quot;ename&quot;</span>:<span class="string">&quot;SMITH3&quot;</span>,<span class="string">&quot;sal&quot;</span>:<span class="number">3800.0</span>&#125;,</span></span><br><span class="line"><span class="javascript">          ]</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//希望把数据展示到table中</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> displayBtnElt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;displayBtn&quot;</span>);</span></span><br><span class="line"><span class="javascript">          displayBtnElt.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> emps=data.emps;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;emps.length;i++)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> emp=emps[i];</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">&quot;&lt;tr&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">&quot;&lt;td&gt;&quot;</span>+emp.empno+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">&quot;&lt;td&gt;&quot;</span>+emp.ename+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">&quot;&lt;td&gt;&quot;</span>+emp.sal+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;emptbody&quot;</span>).innerHTML=html;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>).innerHTML=data.toatl;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示员工信息列表&quot;</span> <span class="attr">id</span>=<span class="string">&quot;displayBtn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>员工信息列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>员工编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>员工名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>员工薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;emptbody&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;tr&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;td&gt;7369&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;td&gt;SMITH&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--          &lt;td&gt;800&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;/tr&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;tr&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;7369&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;SMITH&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;800&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;/tr&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    总共条数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span> 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>条数</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定数据代码</title>
    <url>/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="顺序表的结构体定义及初始化"><a href="#顺序表的结构体定义及初始化" class="headerlink" title="顺序表的结构体定义及初始化"></a>顺序表的结构体定义及初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态顺序表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个静态顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class="line">        L.data[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//动态顺序表    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//顺序表当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个动态顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">  	L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList &amp;L,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p=L.data;</span><br><span class="line">    L.data=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((InitSize+len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//将数据复制到新区域</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        L.data[i]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序表最大长度增加len</span></span><br><span class="line">    L.MaxSize=L.MaxSize+len;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="顺序表的遍历及输出"><a href="#顺序表的遍历及输出" class="headerlink" title="顺序表的遍历及输出"></a>顺序表的遍历及输出</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表的遍历及输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListVisit</span><span class="params">(SqList L)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;L.length;k++)&#123;</span><br><span class="line">			<span class="built_in">pring</span>(<span class="string">&quot;%d&quot;</span>,L.data[k])</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找顺序表中值为e的数据元素所在位置"><a href="#查找顺序表中值为e的数据元素所在位置" class="headerlink" title="查找顺序表中值为e的数据元素所在位置"></a>查找顺序表中值为e的数据元素所在位置</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找顺序表中值为e的数据元素所在位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_e</span><span class="params">(SqList L, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; L.length; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[k] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找顺序表中第i个位置的数据元素值"><a href="#查找顺序表中第i个位置的数据元素值" class="headerlink" title="查找顺序表中第i个位置的数据元素值"></a>查找顺序表中第i个位置的数据元素值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找顺序表中第i个位置的数据元素值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_i</span><span class="params">(SqList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表的逆置"><a href="#顺序表的逆置" class="headerlink" title="顺序表的逆置"></a>顺序表的逆置</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表的逆置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = L.data[i];</span><br><span class="line">        L.data[i] = L.data[L.length - <span class="number">1</span> - i];</span><br><span class="line">        L.data[L.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表中第i个位置插入元素e"><a href="#顺序表中第i个位置插入元素e" class="headerlink" title="顺序表中第i个位置插入元素e"></a>顺序表中第i个位置插入元素e</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表中第i个位置插入元素e</span></span><br><span class="line"><span class="comment">//因为线性表长为 L.length 删除只能删除1到L.length上的东西</span></span><br><span class="line"><span class="comment">//插入可以插入第一个位置，也可以插入最后一个的后面所以是1~Llength+1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序表中第i个位置插入元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断i的范围是否有效</span></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将i位置元素依次后移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将e插入到i位置</span></span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有序顺序表插入元素x后依然有序"><a href="#有序顺序表插入元素x后依然有序" class="headerlink" title="有序顺序表插入元素x后依然有序"></a>有序顺序表插入元素x后依然有序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有序顺序表插入元素x后依然有序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] &gt; x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt;= i + <span class="number">1</span>; j--) &#123;</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[i] = x;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="comment">//返回插入位置的下标</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表中删除第i个位置的元素"><a href="#顺序表中删除第i个位置的元素" class="headerlink" title="顺序表中删除第i个位置的元素"></a>顺序表中删除第i个位置的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表中删除第i个位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, <span class="keyword">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表中删除最小值"><a href="#顺序表中删除最小值" class="headerlink" title="顺序表中删除最小值"></a>顺序表中删除最小值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表中删除最小值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Del_Min</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//顺序表为空返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> min = L.data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] &lt; min) &#123;</span><br><span class="line">            min = L.data[i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = pos; j &lt; L.length - <span class="number">1</span>;j++) &#123;</span><br><span class="line">        L.data[j] = L.data[j + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表删除所有值为x的元素"><a href="#顺序表删除所有值为x的元素" class="headerlink" title="顺序表删除所有值为x的元素"></a>顺序表删除所有值为x的元素</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><img src="/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/image-20230613203457829.png" class="" title="image-20230613203457829">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="comment">//每删除一个x元素，则该x后边的元素往前移动k+1个</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_x_1</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (L.data[i] ==x) &#123;</span><br><span class="line">            k = k + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            L.data[i - k] = L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = L.length - k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><img src="/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/image-20230613210508093.png" class="" title="image-20230613210508093">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//双指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_x_2</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i]!=x) &#123;</span><br><span class="line">            L.data[j] = L.data[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    L.length = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表删除所有值在s与t之间的元素"><a href="#顺序表删除所有值在s与t之间的元素" class="headerlink" title="顺序表删除所有值在s与t之间的元素"></a>顺序表删除所有值在s与t之间的元素</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><img src="/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/image-20230613212114257.png" class="" title="image-20230613212114257">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思想同上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_s_t_1</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span> || s&gt;=t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            L.data[i - k] = L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = L.length - k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//双指针思想同上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_s_t_2</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span> || s&gt;=t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] &lt; s || L.data[i] &gt; t) &#123;</span><br><span class="line">            L.data[j] = L.data[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = j;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="有序顺序表中删除所有重复的元素"><a href="#有序顺序表中删除所有重复的元素" class="headerlink" title="有序顺序表中删除所有重复的元素"></a>有序顺序表中删除所有重复的元素</h3><img src="/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/image-20230614205838689.png" class="" title="image-20230614205838689">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有序顺序表中删除所有重复的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_Same</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] != L.data[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            L.data[j] = L.data[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有序顺序表删除所有值在s与t之间的元素"><a href="#有序顺序表删除所有值在s与t之间的元素" class="headerlink" title="有序顺序表删除所有值在s与t之间的元素"></a>有序顺序表删除所有值在s与t之间的元素</h3><img src="/2023/06/09/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/%E6%90%9E%E5%AE%9A%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%A0%81/image-20230614211533484.png" class="" title="image-20230614211533484">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有序顺序表删除所有值在s与t之间的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_s_t</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="comment">//经过此次循环j的值为大于等于s</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; L.length &amp;&amp; L.data[j] &lt; s; j++);</span><br><span class="line">    <span class="keyword">if</span> (j == L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//经过此次循环i的值大于t</span></span><br><span class="line">    <span class="keyword">for</span> (i = j; i &lt; L.length &amp;&amp; L.data[i] &lt;= t; i++);</span><br><span class="line">    <span class="comment">//从t后的第一个元素开始，将其后的元素统一向前挪</span></span><br><span class="line">    <span class="keyword">for</span> (i,j; i&lt;L.length&amp;&amp;j &lt; L.length; i++, j++) &#123;</span><br><span class="line">        L.data[j] = L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = j;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两个有序顺序表合并成为一个新的顺序表C"><a href="#两个有序顺序表合并成为一个新的顺序表C" class="headerlink" title="两个有序顺序表合并成为一个新的顺序表C"></a>两个有序顺序表合并成为一个新的顺序表C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Merge</span><span class="params">(SqList A, SqList B, SqList&amp; C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length + B.length &gt; C.MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; A.length &amp;&amp; j &lt; B.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.data[i] &lt; B.data[j]) &#123;</span><br><span class="line">            C.data[k] = A.data[i];</span><br><span class="line">            k++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            C.data[k] = B.data[j];</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; A.length) &#123;</span><br><span class="line">        C.data[k] = A.data[i];</span><br><span class="line">        k++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; B.length) &#123;</span><br><span class="line">        C.data[k] = B.data[j];</span><br><span class="line">        k++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    C.length = k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表的结构体定义"><a href="#单链表的结构体定义" class="headerlink" title="单链表的结构体定义"></a>单链表的结构体定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode ,*LinkList;  </span><br></pre></td></tr></table></figure>

<h3 id="单链表的遍历输出（带头节点"><a href="#单链表的遍历输出（带头节点" class="headerlink" title="单链表的遍历输出（带头节点)"></a>单链表的遍历输出（带头节点)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历链表（带头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListVisit</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="comment">//p为遍历指针</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="带头结点的按位查找和按值查找"><a href="#带头结点的按位查找和按值查找" class="headerlink" title="带头结点的按位查找和按值查找"></a>带头结点的按位查找和按值查找</h3><h4 id="单链表的按位查找"><a href="#单链表的按位查找" class="headerlink" title="单链表的按位查找"></a>单链表的按位查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">Search_i</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; k &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回查找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单链表的按值查找"><a href="#单链表的按值查找" class="headerlink" title="单链表的按值查找"></a>单链表的按值查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">Search_e</span><span class="params">(LinkList L, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回查找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//头节点的next指针指向NULL必要</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="comment">//s为指向每次新创建节点的指针</span></span><br><span class="line">    LNode* s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        <span class="comment">//头插法核心代码</span></span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//这里头节点的next指针是否指向NULL可有可无,尾部新插一个元素就没有null的事了</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//r指针为指向最后一个节点的指针</span></span><br><span class="line">    LNode* s, * r = L;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        <span class="comment">//尾插法核心代码</span></span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建完成后尾部结点指针记得指向NULL</span></span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="单链表的就地逆置"><a href="#单链表的就地逆置" class="headerlink" title="单链表的就地逆置"></a>单链表的就地逆置</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的就地逆置（头插法实现）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(LinkList&amp; L)</span></span>&#123;</span><br><span class="line">    <span class="comment">//p指向第一个节点(即从第一个节点开始遍历),r指针为防断链指针(断链了之后还能找到下个节点的位置)</span></span><br><span class="line">    LNode* p = L-&gt;next, * r;</span><br><span class="line">    <span class="comment">//头节点先和后边的节点先断开</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        r = p-&gt;next;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">        p = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将一个单链表分解成两个单链表且相对顺序不变"><a href="#将一个单链表分解成两个单链表且相对顺序不变" class="headerlink" title="将一个单链表分解成两个单链表且相对顺序不变"></a>将一个单链表分解成两个单链表且相对顺序不变</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将一个单链表分解成两个单链表且相对顺序不变</span></span><br><span class="line"><span class="function">LinkList <span class="title">Create_A_B</span><span class="params">(LinkList &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//B表初始化</span></span><br><span class="line">    LinkList B = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    B-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//通过尾插法来实现相对顺序不变，故ra为A表的尾指针 rb为B表的尾指针</span></span><br><span class="line">    LNode* p = A-&gt;next, * ra = A, * rb = B;</span><br><span class="line">    <span class="comment">//A表断开</span></span><br><span class="line">    A-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ra-&gt;next = p;</span><br><span class="line">        ra = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="comment">//考虑整个链表只有奇数个的情况</span></span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            rb-&gt;next = p;</span><br><span class="line">            rb = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ra-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    rb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//返回B链表</span></span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>解决sql注入版</title>
    <url>/2022/04/27/Mysql/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决sql注入问题</span></span><br><span class="line"><span class="comment">     只要用户提供的信息不参于SQL语句的编译过程，问题就能解决</span></span><br><span class="line"><span class="comment">     即使用户提供的信息含有sql的关键字，但没有参与编译，故就不起作用</span></span><br><span class="line"><span class="comment">     PreparedStatement是预编译的数据库操作对象</span></span><br><span class="line"><span class="comment">     PrepareStatement的原理是，预先对sql语句的框架进行编译，然后再给sql语句传值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化一个界面</span></span><br><span class="line">        Map&lt;String,String&gt; userLoginInfo=initUI();</span><br><span class="line">        <span class="comment">//验证用户名和密码</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess=login (userLoginInfo);</span><br><span class="line">        <span class="comment">//最后输出结果</span></span><br><span class="line">        System.out.println(loginSuccess?<span class="string">&quot;登录成功&quot;</span>:<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户登陆信息</span></span><br><span class="line"><span class="comment">     * 传入用户信息判断是否登陆成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false表示失败，true表示成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要有打标记的意识</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        String loginName=userLoginInfo.get(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">        String loginPwd=userLoginInfo.get(<span class="string">&quot;loginPwd&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDBC代码</span></span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;<span class="comment">//使用预编译的数据库对象</span></span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.取得连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/westos?&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            <span class="comment">//3获取数据库操作对象</span></span><br><span class="line">            <span class="comment">//sql语句的框子，其中？代表占位符，一个？将来接受一个值，注意占位符不能使用单引号括起来</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from t_user where loginName= ? and loginPwd= ?&quot;</span>;</span><br><span class="line">            <span class="comment">//发送sql语句给DBMS，然后将DBMS进行sql语句的预编译</span></span><br><span class="line">            ps= conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符？传值（第一个问号下标是1，第二个为2， JDBC中所有下标从1开始</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,loginName);</span><br><span class="line">            ps.setString(<span class="number">2</span>,loginPwd);</span><br><span class="line">            <span class="comment">//4执行sql</span></span><br><span class="line">            rs=ps.executeQuery();</span><br><span class="line">            <span class="comment">//5.处理结果集</span></span><br><span class="line">            <span class="keyword">if</span>(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//登陆成功</span></span><br><span class="line"></span><br><span class="line">                loginSuccess =<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *初始化用户界面</span></span><br><span class="line"><span class="comment">    * return 用户输入的用户名和密码等登录信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">initUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">        String loginName = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        String loginPwd=s.nextLine();</span><br><span class="line">        Map&lt;String,String&gt;userLoginInfo=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;loginName&quot;</span>,loginName);</span><br><span class="line">        userLoginInfo.put(<span class="string">&quot;loginPwd&quot;</span>,loginPwd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/27/Mysql/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/image-20220427092815637.png"></p>
<p><img src="/2022/04/27/Mysql/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E7%99%BB%E9%99%86%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/%E8%A7%A3%E5%86%B3sql%E6%B3%A8%E5%85%A5%E7%89%88/image-20220427093859166.png"></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定数据结构</title>
    <url>/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="普通型"><a href="#普通型" class="headerlink" title="普通型"></a>普通型</h2><p><a href="https://www.bilibili.com/video/BV1fi4y1M7Dv/?spm_id_from=333.999.0.0&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h2 id="log类型"><a href="#log类型" class="headerlink" title="log类型"></a>log类型</h2><p><a href="https://www.bilibili.com/video/BV11f4y1x7HS/?spm_id_from=333.999.0.0&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h2 id="递归形"><a href="#递归形" class="headerlink" title="递归形"></a>递归形</h2><p><a href="https://www.bilibili.com/video/BV1kQ4y1o7jx/?spm_id_from=333.999.0.0&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629174433552.png" class="" title="image-20230629174433552">

<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="顺序表的结构体定义及初始化"><a href="#顺序表的结构体定义及初始化" class="headerlink" title="顺序表的结构体定义及初始化"></a>顺序表的结构体定义及初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态顺序表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个静态顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class="line">        L.data[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//动态顺序表    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//顺序表当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个动态顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">  	L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList &amp;L,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p=L.data;</span><br><span class="line">    L.data=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((InitSize+len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//将数据复制到新区域</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        L.data[i]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序表最大长度增加len</span></span><br><span class="line">    L.MaxSize=L.MaxSize+len;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="顺序表插入-顺序表中第i个位置插入元素e"><a href="#顺序表插入-顺序表中第i个位置插入元素e" class="headerlink" title="顺序表插入-顺序表中第i个位置插入元素e"></a>顺序表插入-顺序表中第i个位置插入元素e</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表中第i个位置插入元素e</span></span><br><span class="line"><span class="comment">//因为线性表长为 L.length 删除只能删除1到L.length上的东西</span></span><br><span class="line"><span class="comment">//插入可以插入第一个位置，也可以插入最后一个的后面所以是1~Llength+1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序表中第i个位置插入元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断i的范围是否有效</span></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将i位置元素依次后移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将e插入到i位置</span></span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;</span><br><span class="line">    L.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表删除-顺序表中删除第i个位置的元素"><a href="#顺序表删除-顺序表中删除第i个位置的元素" class="headerlink" title="顺序表删除-顺序表中删除第i个位置的元素"></a>顺序表删除-顺序表中删除第i个位置的元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表中删除第i个位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, <span class="keyword">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表查找-查找顺序表中值为e的数据元素所在位置（按值查找）"><a href="#顺序表查找-查找顺序表中值为e的数据元素所在位置（按值查找）" class="headerlink" title="顺序表查找-查找顺序表中值为e的数据元素所在位置（按值查找）"></a>顺序表查找-查找顺序表中值为e的数据元素所在位置（按值查找）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找顺序表中值为e的数据元素所在位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_e</span><span class="params">(SqList L, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; L.length; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[k] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表查找-查找顺序表中第i个位置的数据元素值-按位查找-（简单基本不考）"><a href="#顺序表查找-查找顺序表中第i个位置的数据元素值-按位查找-（简单基本不考）" class="headerlink" title="顺序表查找-查找顺序表中第i个位置的数据元素值(按位查找)（简单基本不考）"></a>顺序表查找-查找顺序表中第i个位置的数据元素值(按位查找)（简单基本不考）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找顺序表中第i个位置的数据元素值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_i</span><span class="params">(SqList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="顺序表合并-两个有序顺序表合并成为一个新的顺序表C-常考）"><a href="#顺序表合并-两个有序顺序表合并成为一个新的顺序表C-常考）" class="headerlink" title="顺序表合并-两个有序顺序表合并成为一个新的顺序表C (常考）"></a>顺序表合并-两个有序顺序表合并成为一个新的顺序表C (常考）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Merge</span><span class="params">(SqList A, SqList B, SqList&amp; C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length + B.length &gt; C.MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; A.length &amp;&amp; j &lt; B.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.data[i] &lt; B.data[j]) &#123;</span><br><span class="line">            C.data[k] = A.data[i];</span><br><span class="line">            k++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            C.data[k] = B.data[j];</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; A.length) &#123;</span><br><span class="line">        C.data[k] = A.data[i];</span><br><span class="line">        k++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; B.length) &#123;</span><br><span class="line">        C.data[k] = B.data[j];</span><br><span class="line">        k++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    C.length = k;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表的结构体定义"><a href="#单链表的结构体定义" class="headerlink" title="单链表的结构体定义"></a>单链表的结构体定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode ,*LinkList;  </span><br></pre></td></tr></table></figure>

<h3 id="单链表的查找-带头结点"><a href="#单链表的查找-带头结点" class="headerlink" title="单链表的查找-带头结点"></a>单链表的查找-带头结点</h3><h4 id="单链表的按位查找"><a href="#单链表的按位查找" class="headerlink" title="单链表的按位查找"></a>单链表的按位查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">Search_i</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; k &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回查找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单链表的按值查找"><a href="#单链表的按值查找" class="headerlink" title="单链表的按值查找"></a>单链表的按值查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">Search_e</span><span class="params">(LinkList L, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回查找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表的修改"><a href="#单链表的修改" class="headerlink" title="单链表的修改"></a>单链表的修改</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的修改</span></span><br><span class="line"><span class="comment">//链表内容的修改,在链表中修改值为x的元素变为k</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_Replace</span><span class="params">(LinkList&amp; L, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == x) &#123;</span><br><span class="line">            p-&gt;data = k;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表的遍历输出-带头节点"><a href="#单链表的遍历输出-带头节点" class="headerlink" title="单链表的遍历输出-带头节点"></a>单链表的遍历输出-带头节点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历链表（带头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListVisit</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    LNode* p = L-&gt;next;</span><br><span class="line">    <span class="comment">//p为遍历指针</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h3><h4 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629171452930.png" class="" title="image-20230629171452930">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//头节点的next指针指向NULL必要</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="comment">//s为指向每次新创建节点的指针</span></span><br><span class="line">    LNode* s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        <span class="comment">//头插法核心代码</span></span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629171509734.png" class="" title="image-20230629171509734">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="comment">//这里头节点的next指针是否指向NULL可有可无,尾部新插一个元素就没有null的事了</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//r指针为指向最后一个节点的指针</span></span><br><span class="line">    LNode* s, * r = L;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        <span class="comment">//尾插法核心代码</span></span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建完成后尾部结点指针记得指向NULL</span></span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="位置插法"><a href="#位置插法" class="headerlink" title="位置插法"></a>位置插法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629170425171.png" class="" title="image-20230629170425171">

<h3 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h3><h4 id="头删除"><a href="#头删除" class="headerlink" title="(头删除)"></a>(头删除)</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629170545698.png" class="" title="image-20230629170545698">

<h4 id="尾删除"><a href="#尾删除" class="headerlink" title="(尾删除)"></a>(尾删除)</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629170909813.png" class="" title="image-20230629170909813">

<h4 id="位置删除"><a href="#位置删除" class="headerlink" title="(位置删除)"></a>(位置删除)</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629171151377.png" class="" title="image-20230629171151377">

<h3 id="单链表的合并"><a href="#单链表的合并" class="headerlink" title="单链表的合并"></a>单链表的合并</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个有序单链表合并为一个有序单链表</span></span><br><span class="line"><span class="function">LinkList <span class="title">MergeList</span><span class="params">(LinkList&amp; A, LinkList&amp; B)</span> </span>&#123;</span><br><span class="line">    LNode* p = A-&gt;next, * q = B-&gt;next;</span><br><span class="line">    <span class="comment">//防断链指针r(一想到头插法就需想到定义防断链指针）</span></span><br><span class="line">    LNode* r;</span><br><span class="line">    <span class="comment">//头节点A先断开</span></span><br><span class="line">    A-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt;= q-&gt;data) &#123;</span><br><span class="line">            r = p-&gt;next;</span><br><span class="line">            <span class="comment">//头插法核心代码</span></span><br><span class="line">            p-&gt;next = A-&gt;next;</span><br><span class="line">            A-&gt;next = p;</span><br><span class="line">            p = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            r = q-&gt;next;</span><br><span class="line">            q-&gt;next = A-&gt;next;</span><br><span class="line">            A-&gt;next = q;</span><br><span class="line">            q = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只写一套代码实现剩余部分的插入</span></span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        p-&gt;next=A-&gt;next;</span><br><span class="line">        A-&gt;next = p;</span><br><span class="line">        p = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(B);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表的反转"><a href="#单链表的反转" class="headerlink" title="单链表的反转"></a>单链表的反转</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629173938311.png" class="" title="image-20230629173938311">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表的就地逆置（头插法实现）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(LinkList&amp; L)</span></span>&#123;</span><br><span class="line">    <span class="comment">//p指向第一个节点(即从第一个节点开始遍历),r指针为防断链指针(断链了之后还能找到下个节点的位置)</span></span><br><span class="line">    LNode* p = L-&gt;next, * r;</span><br><span class="line">    <span class="comment">//头节点先和后边的节点先断开</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        r = p-&gt;next;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">        p = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>C语言具有指针能力，可以非常容易地操作内存中的地址和数据。但如早期的编程语言并没有指针，链表结构应该怎么样实现呢？</p>
<p>所以人们通过数组来代替指针进而描述单链表。通过让数组元素由data和cur两个数据域组成，也就是说每一个数组下标都对应一个data和cur。data域用来存放数据元素，cur则相当于单链表中的next指针，存放该元素的后继在数组中的下标，通常把cur叫做游标，这种用数组来描述单链表的方法称作游标实现法。</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/63a004b6bc24430a8c846bdbcfc600b4.png" class="" title="在这里插入图片描述">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize 10<span class="comment">//定义静态链表的最大长度</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>//定义静态链表结构类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="keyword">int</span> next;<span class="comment">//游标：为下一个数据元素的数组下标，类似于指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSLinkList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>[<span class="title">Maxsize</span>];</span><span class="comment">//数组a作为静态链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/m0_64365419/article/details/126431032">https://blog.csdn.net/m0_64365419/article/details/126431032</a></p>
<h3 id="双链表的结构体定义"><a href="#双链表的结构体定义" class="headerlink" title="双链表的结构体定义"></a>双链表的结构体定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> data;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">line</span> *<span class="title">pre</span>;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">line</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;line,*a</span><br><span class="line"><span class="comment">//分别表示该节点的前驱(pre),后继(next),以及当前数据(data)</span></span><br></pre></td></tr></table></figure>

<h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629173445050.png" class="" title="image-20230629173445050">

<h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629173745601.png" class="" title="image-20230629173745601">

<h3 id="循环链表-一般不考"><a href="#循环链表-一般不考" class="headerlink" title="循环链表(一般不考)"></a>循环链表(一般不考)</h3><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629174242292.png" class="" title="image-20230629174242292">

<h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230629174302085.png" class="" title="image-20230629174302085">

<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701164910718.png" class="" title="image-20230701164910718">

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701171911904.png" class="" title="image-20230701171911904">

<h3 id="栈的常考题"><a href="#栈的常考题" class="headerlink" title="栈的常考题"></a>栈的常考题</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701172025480.png" class="" title="image-20230701172025480">

<h3 id="栈的顺序存储实现"><a href="#栈的顺序存储实现" class="headerlink" title="栈的顺序存储实现"></a>栈的顺序存储实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];<span class="comment">//存放栈的元素</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure>

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701172121201.png" class="">

<h3 id="栈的链式存储实现（了解即可）"><a href="#栈的链式存储实现（了解即可）" class="headerlink" title="栈的链式存储实现（了解即可）"></a>栈的链式存储实现（了解即可）</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701172138160.png" class="" title="image-20230701172138160">



<h3 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701171932107.png" class="" title="image-20230701171932107">

<h4 id="栈的初始化"><a href="#栈的初始化" class="headerlink" title="栈的初始化"></a>栈的初始化</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack&amp; S)</span> </span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的判空"><a href="#栈的判空" class="headerlink" title="栈的判空"></a>栈的判空</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈的判空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(Stack&amp; S, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以下两步可直接写成 S.data[++S.top]=x;</span></span><br><span class="line">    S.top++;</span><br><span class="line">    S.data[S.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(Stack&amp; S, <span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以下两步可直接写成 x=S.data[S.top--]</span></span><br><span class="line">    x = S.data[S.top];</span><br><span class="line">    S.top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(Stack S, <span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = S.data[S.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230701172253882.png" class="" title="image-20230701172253882">

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702155122252.png" class="" title="image-20230702155122252">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702155300133.png" class="" title="image-20230702155300133">

<h3 id="队列的基本概念"><a href="#队列的基本概念" class="headerlink" title="队列的基本概念"></a>队列的基本概念</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702182701515.png" class="" title="image-20230702182701515">

<h3 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702155345403.png" class="" title="image-20230702155345403">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702155419068.png" class="" title="image-20230702155419068">

<h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><h5 id="队列的顺序存储实现"><a href="#队列的顺序存储实现" class="headerlink" title="队列的顺序存储实现"></a>队列的顺序存储实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span>  front, rear;<span class="comment">//头尾指针</span></span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure>

<h5 id="队列的链式存储实现"><a href="#队列的链式存储实现" class="headerlink" title="队列的链式存储实现"></a>队列的链式存储实现</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702170910510.png" class="" title="image-20230702170910510">

<h4 id="创建空队列"><a href="#创建空队列" class="headerlink" title="创建空队列"></a>创建空队列</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(Queue&amp; Q)</span> </span>&#123;</span><br><span class="line">    Q.front = <span class="number">0</span>;</span><br><span class="line">    Q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断为空"><a href="#判断为空" class="headerlink" title="判断为空"></a>判断为空</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(Queue&amp; Q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//入队操作尾指针</span></span><br><span class="line">    <span class="keyword">if</span> (Q.rear == MaxSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.data[Q.rear] = x;</span><br><span class="line">    Q.rear++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(Queue&amp; Q, <span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    Q.front++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="取头部元素"><a href="#取头部元素" class="headerlink" title="取头部元素"></a>取头部元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x=Q.data[Q.front]</span><br></pre></td></tr></table></figure>

<h4 id="取尾部元素"><a href="#取尾部元素" class="headerlink" title="取尾部元素"></a>取尾部元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x=Q.data[Q.rear]</span><br></pre></td></tr></table></figure>

<h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702171518824.png" class="" title="image-20230702171518824">

<h4 id="循环队列的顺序表中，为什么要空一个位置"><a href="#循环队列的顺序表中，为什么要空一个位置" class="headerlink" title="循环队列的顺序表中，为什么要空一个位置"></a>循环队列的顺序表中，为什么要空一个位置</h4><p>1、引入循环队列的目的：为了充分利用向量空间，克服假溢出的现象</p>
<p>2、循环队列的概念：将向量空间想象为一个首尾相接的圆环，并称这种向量为。循环向量。存储在其中的队列称为循环队列（Circular Queue）。简单来讲，循环队列就把顺序队列尾相连，把存储队列元素的表从逻辑上看成一个环。</p>
<p><strong>3、明确两个指针：一个指向队列头front,一个指向队列尾rear。在循环队列中，当队列为空时，有front=rear；而当所有队列空间全占满时，也有front=rear。所以，为了区别这两种情况，规定循环队列最多只能有MaxSize-1个队列元素（也就是空一个位置），当循环队列中只剩下一个空存储单元时，队列就已经满了。因此，队列判空的条件是front=rear，而队列判满的条件是front=（rear+1)%MaxSize。</strong></p>
<p><strong>综上：这个空位置，主要就是为了用来区分队空与队满情况的。</strong></p>
<h3 id="结构体定义-1"><a href="#结构体定义-1" class="headerlink" title="结构体定义"></a>结构体定义</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230702171759592.png" class="" title="image-20230702171759592">

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(Queue&amp; Q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否已满</span></span><br><span class="line">    <span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MaxSize == Q.front) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.data[Q.rear] = x;</span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//出队操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(Queue&amp; Q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703154357441.png" class="" title="image-20230703154357441">

<h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><h3 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161122905.png" class="" title="image-20230703161122905">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703155443525.png" class="" title="image-20230703155443525">

<h3 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161146106.png" class="" title="image-20230703161146106">

<h4 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161207795.png" class="" title="image-20230703161207795">

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703160454101.png" class="" title="image-20230703160454101">

<h4 id="中缀转后缀练习"><a href="#中缀转后缀练习" class="headerlink" title="中缀转后缀练习"></a>中缀转后缀练习</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161314284.png" class="" title="image-20230703161314284">

<h4 id="后缀表达式的计算"><a href="#后缀表达式的计算" class="headerlink" title="后缀表达式的计算"></a>后缀表达式的计算</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161400081.png" class="" title="image-20230703161400081">

<h4 id="栈实现过程"><a href="#栈实现过程" class="headerlink" title="栈实现过程"></a>栈实现过程</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161533489.png" class="" title="image-20230703161533489">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703161633254.png" class="" title="image-20230703161633254">

<h3 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703162934344.png" class="" title="image-20230703162934344">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703163002820.png" class="" title="image-20230703163002820">

<h2 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703163623401.png" class="" title="image-20230703163623401">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703163637148.png" class="" title="image-20230703163637148">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230703163650387.png" class="" title="image-20230703163650387">

<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706150713045.png" class="" title="image-20230706150713045">

<h2 id="串的概念"><a href="#串的概念" class="headerlink" title="串的概念"></a>串的概念</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706150916081.png" class="" title="image-20230706150916081">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706151419337.png" class="" title="image-20230706151419337">

<h2 id="串的存储（了解）"><a href="#串的存储（了解）" class="headerlink" title="串的存储（了解）"></a>串的存储（了解）</h2><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706172254003.png" class="" title="image-20230706172254003">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> ch[MAXLEN + <span class="number">1</span>];<span class="comment">//存储串的一维数组，ch[0]~ch[255],共256个</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//串的当前长度</span></span><br><span class="line">&#125;String;</span><br></pre></td></tr></table></figure>

<h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706172322011.png" class="" title="image-20230706172322011">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkStrNode;</span><br><span class="line"><span class="keyword">typedef</span> LinkStrNode * LinkString;    <span class="comment">//链式串的指针</span></span><br></pre></td></tr></table></figure>

<h2 id="串的基本操作"><a href="#串的基本操作" class="headerlink" title="串的基本操作"></a>串的基本操作</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706151451497.png" class="" title="image-20230706151451497">

<h3 id="常见操作（太简单，一般不考）"><a href="#常见操作（太简单，一般不考）" class="headerlink" title="常见操作（太简单，一般不考）"></a>常见操作（太简单，一般不考）</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706171851916.png" class="" title="image-20230706171851916">



<h2 id="普通的串的模式匹配算法"><a href="#普通的串的模式匹配算法" class="headerlink" title="普通的串的模式匹配算法"></a>普通的串的模式匹配算法</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706152221672.png" class="" title="image-20230706152221672">

<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706152556074.png" class="" title="image-20230706152556074">

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706152721249.png" class="" title="image-20230706152721249">

<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><h3 id="KMP算法的原理"><a href="#KMP算法的原理" class="headerlink" title="KMP算法的原理"></a>KMP算法的原理</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706153209683.png" class="" title="image-20230706153209683">

<h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706170949456.png" class="" title="image-20230706170949456">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706171022159.png" class="" title="image-20230706171022159">

<h3 id="next的改进版-nextval"><a href="#next的改进版-nextval" class="headerlink" title="next的改进版 nextval"></a>next的改进版 nextval</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230706171101792.png" class="" title="image-20230706171101792">

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>知道规律，根据题目推导。注意第一个元素的起始下标</strong></p>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707155750186.png" class="" title="image-20230707155750186">

<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707155826929.png" class="" title="image-20230707155826929">

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708153255718.png" class="" title="image-20230708153255718">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708153637468.png" class="" title="image-20230708153637468">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708153729846.png" class="" title="image-20230708153729846">

<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="特殊矩阵压缩-对称矩阵"><a href="#特殊矩阵压缩-对称矩阵" class="headerlink" title="特殊矩阵压缩-对称矩阵"></a>特殊矩阵压缩-对称矩阵</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707160708857.png" class="" title="image-20230707160708857">

<h3 id="特殊矩阵压缩-三角矩阵"><a href="#特殊矩阵压缩-三角矩阵" class="headerlink" title="特殊矩阵压缩-三角矩阵"></a>特殊矩阵压缩-三角矩阵</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707162246685.png" class="" title="image-20230707162246685">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707162413250.png" class="" title="image-20230707162413250">

<h3 id="特殊矩阵压缩-对角矩阵"><a href="#特殊矩阵压缩-对角矩阵" class="headerlink" title="特殊矩阵压缩-对角矩阵"></a>特殊矩阵压缩-对角矩阵</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230707162659626.png" class="" title="image-20230707162659626">

<h4 id="三对角矩阵"><a href="#三对角矩阵" class="headerlink" title="三对角矩阵"></a>三对角矩阵</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708170754644.png" class="" title="image-20230708170754644">

<h3 id="特殊矩阵压缩-稀疏矩阵"><a href="#特殊矩阵压缩-稀疏矩阵" class="headerlink" title="特殊矩阵压缩-稀疏矩阵"></a>特殊矩阵压缩-稀疏矩阵</h3><h4 id="三元组存储稀疏矩阵"><a href="#三元组存储稀疏矩阵" class="headerlink" title="三元组存储稀疏矩阵"></a>三元组存储稀疏矩阵</h4><p>三元组定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TSMatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple data[MAX_SIZE+<span class="number">1</span>];<span class="comment">//多余的一个位置用于存放非零元的个数</span></span><br><span class="line">    <span class="keyword">int</span> m_row,m_col,m_num;<span class="comment">//矩阵的行数、列数(固定)和非零元的个数</span></span><br><span class="line">&#125;TSMatrix;</span><br></pre></td></tr></table></figure>

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708170832225.png" class="" title="image-20230708170832225">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708171029404.png" class="" title="image-20230708171029404">

<h4 id="十字链表存储稀疏矩阵"><a href="#十字链表存储稀疏矩阵" class="headerlink" title="十字链表存储稀疏矩阵"></a>十字链表存储稀疏矩阵</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708170910492.png" class="" title="image-20230708170910492">

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708171055965.png" class="" title="image-20230708171055965">

<h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><h3 id="广义表定义"><a href="#广义表定义" class="headerlink" title="广义表定义"></a>广义表定义</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708165050742.png" class="" title="image-20230708165050742">

<h3 id="广义表特点"><a href="#广义表特点" class="headerlink" title="广义表特点"></a>广义表特点</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708165119586.png" class="" title="image-20230708165119586">

<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708171934476.png" class="" title="image-20230708171934476">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230708171950914.png" class="" title="image-20230708171950914">

<h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712151649615.png" class="" title="image-20230712151649615">

<h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712151900954.png" class="" title="image-20230712151900954">

<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712152101849.png" class="" title="image-20230712152101849">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712152410951.png" class="" title="image-20230712152410951">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712153741066.png" class="" title="image-20230712153741066">

<h2 id="度为m的树和与m叉树的区别"><a href="#度为m的树和与m叉树的区别" class="headerlink" title="度为m的树和与m叉树的区别"></a>度为m的树和与m叉树的区别</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712154443110.png" class="" title="image-20230712154443110">

<h2 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712153758287.png" class="" title="image-20230712153758287">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712153810428.png" class="" title="image-20230712153810428">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712154508662.png" class="" title="image-20230712154508662">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712154540907.png" class="" title="image-20230712154540907">

<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712160631857.png" class="" title="image-20230712160631857">

<h3 id="二叉树与度为2的树的区别"><a href="#二叉树与度为2的树的区别" class="headerlink" title="二叉树与度为2的树的区别"></a>二叉树与度为2的树的区别</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712160645127.png" class="" title="image-20230712160645127">

<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171310446.png" class="" title="image-20230712171310446">

<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171333657.png" class="" title="image-20230712171333657">

<h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171359218.png" class="" title="image-20230712171359218">

<h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717164715628.png" class="" title="image-20230717164715628">

<h4 id="创建二叉排序树"><a href="#创建二叉排序树" class="headerlink" title="创建二叉排序树"></a>创建二叉排序树</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717165100496.png" class="" title="image-20230717165100496">

<h4 id="删除二叉排序树的结点"><a href="#删除二叉排序树的结点" class="headerlink" title="删除二叉排序树的结点"></a>删除二叉排序树的结点</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717172120534.png" class="" title="image-20230717172120534">

<p><strong>要删除的结点可分为三种情况：</strong><br><strong>1.要删除的结点为叶子结点</strong><br><strong>2.要删除的结点有且仅有一棵子树</strong><br><strong>3.要删除的结点有两棵子树</strong></p>
<p>参考博客:<a href="https://blog.csdn.net/a982801238/article/details/99205329">https://blog.csdn.net/a982801238/article/details/99205329</a></p>
<h4 id="二叉排序树的查找效率分析"><a href="#二叉排序树的查找效率分析" class="headerlink" title="二叉排序树的查找效率分析"></a>二叉排序树的查找效率分析</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717172808314.png" class="" title="image-20230717172808314">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717173043931.png" class="" title="image-20230717173043931">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717173150457.png" class="" title="image-20230717173150457">

<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230718155406576.png" class="" title="image-20230718155406576">

<h4 id="平衡二叉树转换"><a href="#平衡二叉树转换" class="headerlink" title="平衡二叉树转换"></a>平衡二叉树转换</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230718182502137.png" class="" title="image-20230718182502137">

<p>需要LL旋转的情况：麻烦结点在不平衡发现者的左子树的左子树上，因而叫LL插入，需要LL旋转；</p>
<p>需要RR旋转的情况：麻烦结点在不平衡发现者的右子树的右子树上，因而叫RR插入，需要RR旋转；</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230718182634784.png" class="" title="image-20230718182634784">

<p>需要LR旋转的情况：麻烦结点在不平衡发现者的左子树的右子树上，因而叫LR插入，需要LR旋转</p>
<p>需要RL旋转的情况：麻烦结点在不平衡发现者的右子树的左子树上，因而叫RL插入，需要RL旋转；</p>
<h4 id="平衡二叉排序树"><a href="#平衡二叉排序树" class="headerlink" title="平衡二叉排序树"></a>平衡二叉排序树</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230718170238306.png" class="" title="image-20230718170238306">

<p><a href="https://www.bilibili.com/video/BV1mB4y1j739/?spm_id_from=333.337.search-card.all.click&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<p><a href="https://www.bilibili.com/video/BV16m4y1F7do/?spm_id_from=333.337.search-card.all.click&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h4 id="平衡二叉树结点数与树高"><a href="#平衡二叉树结点数与树高" class="headerlink" title="平衡二叉树结点数与树高"></a>平衡二叉树结点数与树高</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230718170312359.png" class="" title="image-20230718170312359">

<h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><h4 id="什么是路径"><a href="#什么是路径" class="headerlink" title="什么是路径"></a>什么是路径</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719145922384.png" class="" title="image-20230719145922384">

<h4 id="什么是路径长度"><a href="#什么是路径长度" class="headerlink" title="什么是路径长度"></a>什么是路径长度</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719145943394.png" class="" title="image-20230719145943394">

<h4 id="什么是带权路径长度"><a href="#什么是带权路径长度" class="headerlink" title="什么是带权路径长度"></a>什么是带权路径长度</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719150028317.png" class="" title="image-20230719150028317">

<h4 id="什么是树的带权路径长度"><a href="#什么是树的带权路径长度" class="headerlink" title="什么是树的带权路径长度"></a>什么是树的带权路径长度</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719150121285.png" class="" title="image-20230719150121285">

<h4 id="什么是哈夫曼树"><a href="#什么是哈夫曼树" class="headerlink" title="什么是哈夫曼树"></a>什么是哈夫曼树</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719150202279.png" class="" title="image-20230719150202279">

<h4 id="哈夫曼树的基本概念"><a href="#哈夫曼树的基本概念" class="headerlink" title="哈夫曼树的基本概念"></a>哈夫曼树的基本概念</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719150656616.png" class="" title="image-20230719150656616">

<h4 id="构建哈夫曼树"><a href="#构建哈夫曼树" class="headerlink" title="构建哈夫曼树"></a>构建哈夫曼树</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719151724682.png" class="" title="image-20230719151724682">

<p>如：对 下图中的六个带权叶子结点来构造一棵哈夫曼树，步骤如下：</p>
<p><img src="/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81/20131205234828406" alt="img"></p>
<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719151821669.png" class="" title="image-20230719151821669">

<p><a href="https://blog.csdn.net/QQQZSJ/article/details/98162688">浅谈 前缀编码与哈夫曼编码</a></p>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230715155808688-1699519562138.png" class="" title="image-20230715155808688">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230715160819724.png" class="" title="image-20230715160819724">

<h3 id="完全二叉树的顺序存储"><a href="#完全二叉树的顺序存储" class="headerlink" title="完全二叉树的顺序存储"></a>完全二叉树的顺序存储</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171543205.png" class="" title="image-20230712171543205">

<h3 id="普通二叉树的顺序存储"><a href="#普通二叉树的顺序存储" class="headerlink" title="普通二叉树的顺序存储"></a>普通二叉树的顺序存储</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171618347.png" class="" title="image-20230712171618347">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171651687.png" class="" title="image-20230712171651687">

<h3 id="普通二叉树的链式存储"><a href="#普通二叉树的链式存储" class="headerlink" title="普通二叉树的链式存储"></a>普通二叉树的链式存储</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义结点代码：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br></pre></td></tr></table></figure>

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230719170659409.png" class="" title="image-20230719170659409">

<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171822723.png" class="" title="image-20230712171822723">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712171837826.png" class="" title="image-20230712171837826">

<h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713155540062.png" class="" title="image-20230713155540062">

<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713155607711.png" class="" title="image-20230713155607711">

<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713155728723.png" class="" title="image-20230713155728723">

<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713155927820.png" class="" title="image-20230713155927820">

<h4 id="二叉树遍历的实现"><a href="#二叉树遍历的实现" class="headerlink" title="二叉树遍历的实现"></a>二叉树遍历的实现</h4><h5 id="递归方案实现"><a href="#递归方案实现" class="headerlink" title="递归方案实现"></a>递归方案实现</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713160108960.png" class="" title="image-20230713160108960">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713160143748.png" class="" title="image-20230713160143748">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713160230897.png" class="" title="image-20230713160230897">

<h5 id="非递归方案实现"><a href="#非递归方案实现" class="headerlink" title="非递归方案实现"></a>非递归方案实现</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713161341689.png" class="" title="image-20230713161341689">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713161357861.png" class="" title="image-20230713161357861">

<p><a href="https://www.bilibili.com/video/BV1RP4y1G79Z/?spm_id_from=333.337.search-card.all.click&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h3 id="由遍历序列确定二叉树"><a href="#由遍历序列确定二叉树" class="headerlink" title="由遍历序列确定二叉树"></a>由遍历序列确定二叉树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713165515219.png" class="" title="image-20230713165515219">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230713170109050.png" class="" title="image-20230713170109050">

<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716153148608.png" class="" title="image-20230716153148608">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716153351912.png" class="" title="image-20230716153351912">

<h4 id="二叉树线索化"><a href="#二叉树线索化" class="headerlink" title="二叉树线索化"></a>二叉树线索化</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716153526341.png" class="" title="image-20230716153526341">

<h5 id="先序线索二叉树"><a href="#先序线索二叉树" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716155019086.png" class="" title="image-20230716155019086">

<h5 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716155041512.png" class="" title="image-20230716155041512">

<h5 id="后续线索二叉树"><a href="#后续线索二叉树" class="headerlink" title="后续线索二叉树"></a>后续线索二叉树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716155132515.png" class="" title="image-20230716155132515">

<h4 id="线索二叉树的数据结构"><a href="#线索二叉树的数据结构" class="headerlink" title="线索二叉树的数据结构"></a>线索二叉树的数据结构</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716155755043.png" class="" title="image-20230716155755043">

<h4 id="线索二叉树求前驱后继"><a href="#线索二叉树求前驱后继" class="headerlink" title="线索二叉树求前驱后继"></a>线索二叉树求前驱后继</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716155853329.png" class="" title="image-20230716155853329">

<h5 id="先序线索二叉树求后继"><a href="#先序线索二叉树求后继" class="headerlink" title="先序线索二叉树求后继"></a>先序线索二叉树求后继</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716160217767.png" class="" title="image-20230716160217767">

<h5 id="后序线索二叉树求前驱"><a href="#后序线索二叉树求前驱" class="headerlink" title="后序线索二叉树求前驱"></a>后序线索二叉树求前驱</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716160434350.png" class="" title="image-20230716160434350">

<h5 id="中序线索二叉树求前驱后继"><a href="#中序线索二叉树求前驱后继" class="headerlink" title="中序线索二叉树求前驱后继"></a>中序线索二叉树求前驱后继</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716160532175.png" class="" title="image-20230716160532175">

<h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716170415708.png" class="" title="image-20230716170415708">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716170424402.png" class="" title="image-20230716170424402">

<h2 id="树与二叉树的性质"><a href="#树与二叉树的性质" class="headerlink" title="树与二叉树的性质"></a>树与二叉树的性质</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230712153541893.png" class="" title="image-20230712153541893(1)">

<h2 id="树、二叉树、森林"><a href="#树、二叉树、森林" class="headerlink" title="树、二叉树、森林"></a>树、二叉树、森林</h2><h3 id="树、二叉树、森林的转换"><a href="#树、二叉树、森林的转换" class="headerlink" title="树、二叉树、森林的转换"></a>树、二叉树、森林的转换</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716163956191.png" class="" title="image-20230716163956191">

<h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><h5 id="树转换二叉树"><a href="#树转换二叉树" class="headerlink" title="树转换二叉树"></a>树转换二叉树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716172424282.png" class="" title="image-20230716172424282">

<h5 id="二叉树转换树"><a href="#二叉树转换树" class="headerlink" title="二叉树转换树"></a>二叉树转换树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716172438094.png" class="" title="image-20230716172438094">

<h5 id="森林转换为二叉树"><a href="#森林转换为二叉树" class="headerlink" title="森林转换为二叉树"></a>森林转换为二叉树</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716172447878.png" class="" title="image-20230716172447878">

<h5 id="二叉树转换为森林"><a href="#二叉树转换为森林" class="headerlink" title="二叉树转换为森林"></a>二叉树转换为森林</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230716172456427.png" class="" title="image-20230716172456427">

<h3 id="树的三种存储结构"><a href="#树的三种存储结构" class="headerlink" title="树的三种存储结构"></a>树的三种存储结构</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717154754304.png" class="" title="image-20230717154754304">

<h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717154900987.png" class="" title="image-20230717154900987">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717154959933.png" class="" title="image-20230717154959933">

<h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717155030028.png" class="" title="image-20230717155030028">

<h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717155208919.png" class="" title="image-20230717155208919">

<h3 id="二叉链表存储树和二叉树"><a href="#二叉链表存储树和二叉树" class="headerlink" title="二叉链表存储树和二叉树"></a>二叉链表存储树和二叉树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717163340291.png" class="" title="image-20230717163340291">

<h3 id="树、森林的遍历"><a href="#树、森林的遍历" class="headerlink" title="树、森林的遍历"></a>树、森林的遍历</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717161528177.png" class="" title="image-20230717161528177">

<h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717161823130.png" class="" title="image-20230717161823130">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230925084843997.png" class="" title="image-20230925084843997">

<h4 id="森林的遍历"><a href="#森林的遍历" class="headerlink" title="森林的遍历"></a>森林的遍历</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230717161840773.png" class="" title="image-20230717161840773">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230925085343915.png" class="" title="image-20230925085343915">

<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723150103764.png" class="" title="image-20230723150103764">

<h2 id="图的定义及其特点"><a href="#图的定义及其特点" class="headerlink" title="图的定义及其特点"></a>图的定义及其特点</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723150407231.png" class="" title="image-20230723150407231">

<h3 id="无向图、有向图"><a href="#无向图、有向图" class="headerlink" title="无向图、有向图"></a>无向图、有向图</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723150825688.png" class="" title="image-20230723150825688">

<h3 id="简单图、多重图"><a href="#简单图、多重图" class="headerlink" title="简单图、多重图"></a>简单图、多重图</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723151219926.png" class="" title="image-20230723151219926">

<h3 id="度、入度和出度"><a href="#度、入度和出度" class="headerlink" title="度、入度和出度"></a>度、入度和出度</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723151356912.png" class="" title="image-20230723151356912">

<h3 id="路径、回路、连通、强连通"><a href="#路径、回路、连通、强连通" class="headerlink" title="路径、回路、连通、强连通"></a>路径、回路、连通、强连通</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723151811918.png" class="" title="image-20230723151811918">

<h3 id="连通图、强连通图"><a href="#连通图、强连通图" class="headerlink" title="连通图、强连通图"></a>连通图、强连通图</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723152217014-1690358221803.png" class="" title="image-20230723152217014">

<h3 id="子图、生成子图"><a href="#子图、生成子图" class="headerlink" title="子图、生成子图"></a>子图、生成子图</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723153231249.png" class="" title="image-20230723153231249">

<h3 id="连通分量、强连通分量"><a href="#连通分量、强连通分量" class="headerlink" title="连通分量、强连通分量"></a>连通分量、强连通分量</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723153338960.png" class="" title="image-20230723153338960">

<p>区别极小连通子图和极大连通子图</p>
<p>连通分量（极大连通子图）是图的一个不被另外任何一个连通子图所包含的子图。<br>故：<br>1、连通图的极大连通子图就是它本身。<br>2、非连通图中有多个连通分量也就是可以有多个极大连通子图。</p>
<p>如:</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/v2-ad55764dc5553bdaa10e1e61bc409869_720w.webp" class="" title="img">

<p>极小就更好理解啦，其实就是包含最少的边，但同时要保证连通。</p>
<p>一个连通图的生成树是它的极小连通子图</p>
<h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723153635092.png" class="" title="image-20230723153635092">

<h3 id="生成森林"><a href="#生成森林" class="headerlink" title="生成森林"></a>生成森林</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723153842175.png" class="" title="image-20230723153842175">

<h3 id="带权图-网"><a href="#带权图-网" class="headerlink" title="带权图/网"></a>带权图/网</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723153915240.png" class="" title="image-20230723153915240">

<h3 id="几种特殊的图"><a href="#几种特殊的图" class="headerlink" title="几种特殊的图"></a>几种特殊的图</h3><h4 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723154142737.png" class="" title="image-20230723154142737">

<h4 id="稀疏图和稠密图"><a href="#稀疏图和稠密图" class="headerlink" title="稀疏图和稠密图"></a>稀疏图和稠密图</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723154303610.png" class="" title="image-20230723154303610">

<h4 id="树、森林、有向树"><a href="#树、森林、有向树" class="headerlink" title="树、森林、有向树"></a>树、森林、有向树</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723154436107.png" class="" title="image-20230723154436107">

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723154800780.png" class="" title="image-20230723154800780">

<h2 id="图的存储结构和表示"><a href="#图的存储结构和表示" class="headerlink" title="图的存储结构和表示"></a>图的存储结构和表示</h2><h3 id="邻接矩阵-顺序存储-数组"><a href="#邻接矩阵-顺序存储-数组" class="headerlink" title="邻接矩阵-顺序存储(数组)"></a>邻接矩阵-顺序存储(数组)</h3><h4 id="非带权图"><a href="#非带权图" class="headerlink" title="非带权图"></a>非带权图</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723155200219.png" class="" title="image-20230723155200219">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723155508892.png" class="" title="image-20230723155508892">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723155754936.png" class="" title="image-20230723155754936">

<h4 id="带权图-网-1"><a href="#带权图-网-1" class="headerlink" title="带权图/网"></a>带权图/网</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723160019940.png" class="" title="image-20230723160019940">

<h4 id="邻接矩阵的效率分析"><a href="#邻接矩阵的效率分析" class="headerlink" title="邻接矩阵的效率分析"></a>邻接矩阵的效率分析</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723160204328.png" class="" title="image-20230723160204328">

<h4 id="邻接矩阵的性质"><a href="#邻接矩阵的性质" class="headerlink" title="邻接矩阵的性质"></a>邻接矩阵的性质</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723160617209.png" class="" title="image-20230723160617209">

<h3 id="邻接表-顺序存储-链式存储-数组-链表"><a href="#邻接表-顺序存储-链式存储-数组-链表" class="headerlink" title="邻接表-顺序存储+链式存储(数组+链表)"></a>邻接表-顺序存储+链式存储(数组+链表)</h3><h4 id="结构体定义-2"><a href="#结构体定义-2" class="headerlink" title="结构体定义"></a>结构体定义</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723161738789.png" class="" title="image-20230723161738789">

<h4 id="孩子表示法的类比（顺序存储-链式存储的另一个应用）"><a href="#孩子表示法的类比（顺序存储-链式存储的另一个应用）" class="headerlink" title="孩子表示法的类比（顺序存储+链式存储的另一个应用）"></a>孩子表示法的类比（顺序存储+链式存储的另一个应用）</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723161830296.png" class="" title="image-20230723161830296">

<h4 id="邻接表存储有向图和无向图"><a href="#邻接表存储有向图和无向图" class="headerlink" title="邻接表存储有向图和无向图"></a>邻接表存储有向图和无向图</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723161924936.png" class="" title="image-20230723161924936">

<h4 id="逆邻接表和邻接表的区别"><a href="#逆邻接表和邻接表的区别" class="headerlink" title="逆邻接表和邻接表的区别"></a>逆邻接表和邻接表的区别</h4><p>邻接表：反映的是顶点出度的情况。<br>逆邻接表：反映的是顶点的入度情况。</p>
<p><a href="https://blog.csdn.net/m0_54234010/article/details/122277453">参考博客</a></p>
<h3 id="邻接表和邻接矩阵的对比"><a href="#邻接表和邻接矩阵的对比" class="headerlink" title="邻接表和邻接矩阵的对比"></a>邻接表和邻接矩阵的对比</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723163252668.png" class="" title="image-20230723163252668">

<h3 id="邻接表、邻接矩阵存储无向图"><a href="#邻接表、邻接矩阵存储无向图" class="headerlink" title="邻接表、邻接矩阵存储无向图"></a>邻接表、邻接矩阵存储无向图</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723163809059.png" class="" title="image-20230723163809059">

<h3 id="邻接多重表、十字链表简单说明"><a href="#邻接多重表、十字链表简单说明" class="headerlink" title="邻接多重表、十字链表简单说明"></a>邻接多重表、十字链表简单说明</h3><p><strong>无向图特有:邻接多重表。有向图特有:十字链表，边集数组。二者共有:邻接表，邻接矩阵。</strong></p>
<h2 id="图的基本操作"><a href="#图的基本操作" class="headerlink" title="图的基本操作"></a>图的基本操作</h2><h3 id="判断图G中是否存在顶点v到w的边"><a href="#判断图G中是否存在顶点v到w的边" class="headerlink" title="判断图G中是否存在顶点v到w的边"></a>判断图G中是否存在顶点v到w的边</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723165308982.png" class="" title="image-20230723165308982">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723165514479.png" class="" title="image-20230723165514479">

<h3 id="列出图G中与顶点v邻接的边"><a href="#列出图G中与顶点v邻接的边" class="headerlink" title="列出图G中与顶点v邻接的边"></a>列出图G中与顶点v邻接的边</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723165354119.png" class="" title="image-20230723165354119">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723165438595.png" class="" title="image-20230723165438595">

<h3 id="在图G中插入顶点v"><a href="#在图G中插入顶点v" class="headerlink" title="在图G中插入顶点v"></a>在图G中插入顶点v</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723165645287.png" class="" title="image-20230723165645287">

<h3 id="从图G中删除顶点v"><a href="#从图G中删除顶点v" class="headerlink" title="从图G中删除顶点v"></a>从图G中删除顶点v</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723170235087.png" class="" title="image-20230723170235087">

<h3 id="在图中插入一条从顶点v到w的边"><a href="#在图中插入一条从顶点v到w的边" class="headerlink" title="在图中插入一条从顶点v到w的边"></a>在图中插入一条从顶点v到w的边</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723171545323.png" class="" title="image-20230723171545323">

<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="广度优先搜索（树的层次遍历）"><a href="#广度优先搜索（树的层次遍历）" class="headerlink" title="广度优先搜索（树的层次遍历）"></a>广度优先搜索（树的层次遍历）</h3><h4 id="图的广度优先搜索"><a href="#图的广度优先搜索" class="headerlink" title="图的广度优先搜索"></a>图的广度优先搜索</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723171838601.png" class="" title="image-20230723171838601">

<h4 id="BFS算法效率分析"><a href="#BFS算法效率分析" class="headerlink" title="BFS算法效率分析"></a>BFS算法效率分析</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723172134054.png" class="" title="image-20230723172134054">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723172206175.png" class="" title="image-20230723172206175">

<h4 id="广度优先生成树、生成森林"><a href="#广度优先生成树、生成森林" class="headerlink" title="广度优先生成树、生成森林"></a>广度优先生成树、生成森林</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230723172259676.png" class="" title="image-20230723172259676">

<h3 id="深度优先搜索（树的先序遍历）"><a href="#深度优先搜索（树的先序遍历）" class="headerlink" title="深度优先搜索（树的先序遍历）"></a>深度优先搜索（树的先序遍历）</h3><h4 id="图的深度优先搜索"><a href="#图的深度优先搜索" class="headerlink" title="图的深度优先搜索"></a>图的深度优先搜索</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230724172326416.png" class="" title="image-20230724172326416">

<p><strong>深度优先搜索（Depth First Search,DFS）</strong>类似于树的先序遍历，是树的先序遍历的推广。</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727174540455.png" class="" title="image-20230727174540455">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727174600608.png" class="" title="image-20230727174600608">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727174629191.png" class="" title="image-20230727174629191">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727174643042.png" class="" title="image-20230727174643042">

<h4 id="DFS算法效率分析"><a href="#DFS算法效率分析" class="headerlink" title="DFS算法效率分析"></a>DFS算法效率分析</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230724172042437.png" class="" title="image-20230724172042437">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230724172054970.png" class="" title="image-20230724172054970">

<h4 id="深度优先生成树、生成森林"><a href="#深度优先生成树、生成森林" class="headerlink" title="深度优先生成树、生成森林"></a>深度优先生成树、生成森林</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230724172130493.png" class="" title="image-20230724172130493">

<h3 id="图的两种遍历总结"><a href="#图的两种遍历总结" class="headerlink" title="图的两种遍历总结"></a>图的两种遍历总结</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230724172213282.png" class="" title="image-20230724172213282">

<h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725151104915.png" class="" title="image-20230725151104915">

<h4 id="普里姆-Prime-算法"><a href="#普里姆-Prime-算法" class="headerlink" title="普里姆(Prime)算法"></a>普里姆(Prime)算法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725150955456.png" class="" title="image-20230725150955456">

<h4 id="克鲁斯卡算法"><a href="#克鲁斯卡算法" class="headerlink" title="克鲁斯卡算法"></a>克鲁斯卡算法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725151242383.png" class="" title="image-20230725151242383">

<h4 id="两种算法对比"><a href="#两种算法对比" class="headerlink" title="两种算法对比"></a>两种算法对比</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725151406144.png" class="" title="image-20230725151406144">

<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725152015002.png" class="" title="image-20230725152015002">

<h4 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h4><h5 id="广度优先算法BFS（无权图"><a href="#广度优先算法BFS（无权图" class="headerlink" title="广度优先算法BFS（无权图)"></a>广度优先算法BFS（无权图)</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725154748569.png" class="" title="image-20230725154748569">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725154822835.png" class="" title="image-20230725154822835">

<h5 id="迪杰斯特拉算法-Dijkstra（无权图、带权图）"><a href="#迪杰斯特拉算法-Dijkstra（无权图、带权图）" class="headerlink" title="迪杰斯特拉算法 Dijkstra（无权图、带权图）"></a>迪杰斯特拉算法 Dijkstra（无权图、带权图）</h5><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725152203574.png" class="" title="image-20230725152203574">

<h6 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h6><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230729175612981.png" class="" title="image-20230729175612981">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230729175625280.png" class="" title="image-20230729175625280">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725154915800.png" class="" title="image-20230725154915800">

<h4 id="顶点间最短路径"><a href="#顶点间最短路径" class="headerlink" title="顶点间最短路径"></a>顶点间最短路径</h4><h5 id="弗罗伊德算法-Floyd-无权图、带权图"><a href="#弗罗伊德算法-Floyd-无权图、带权图" class="headerlink" title="弗罗伊德算法 Floyd (无权图、带权图)"></a>弗罗伊德算法 Floyd (无权图、带权图)</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725155024140.png" class="" title="image-20230725155024140">

<h6 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h6><p>1</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725155607531.png" class="" title="image-20230725155607531">

<p>2</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725155626926.png" class="" title="image-20230725155626926">

<p>3</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725155644773.png" class="" title="image-20230725155644773">

<p>4</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725155722708.png" class="" title="image-20230725155722708">

<h6 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h6><p>初始化</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160532881.png" class="" title="image-20230725160532881">

<p>加入顶点V0中转</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160541602.png" class="" title="image-20230725160541602">

<p>加入顶点V1中转</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160551995.png" class="" title="image-20230725160551995">

<p>加入顶点V2中转</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160602991.png" class="" title="image-20230725160602991">

<p>加入顶点V3中转</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160614676.png" class="" title="image-20230725160614676">

<p>加入顶点V4中转</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725160626980.png" class="" title="image-20230725160626980">

<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="拓扑排序-1"><a href="#拓扑排序-1" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>拓扑排序：由一个集合上的一个偏序来得到集合上的一个全序。所以只能用在有向图中，且如果有向图存在环的话也无法得到图的所有节点，所以拓扑排序只能用在有向无环图中。 （即产生线性序列的话只有在有向无环图中）</p>
<p>拓扑排序算法:该算法用在有向图中来检查是否存在环。拓扑排序算法仅能适用于有向无环图（×）</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725164523713.png" class="" title="image-20230725164523713">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725164538400.png" class="" title="image-20230725164538400">

<h3 id="逆拓扑排序"><a href="#逆拓扑排序" class="headerlink" title="逆拓扑排序"></a>逆拓扑排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725164554153.png" class="" title="image-20230725164554153">

<h3 id="算法效率分析"><a href="#算法效率分析" class="headerlink" title="算法效率分析"></a>算法效率分析</h3><p>拓扑排序时间复杂度是O(n+e)    </p>
<p><a href="https://baijiahao.baidu.com/s?id=1761786726881493665&wfr=spider&for=pc">参考</a></p>
<h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725164831876.png" class="" title="image-20230725164831876">

<h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><h3 id="AOE网"><a href="#AOE网" class="headerlink" title="AOE网"></a>AOE网</h3><h4 id="AOE网特点"><a href="#AOE网特点" class="headerlink" title="AOE网特点"></a>AOE网特点</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727181203406.png" class="" title="image-20230727181203406">

<h4 id="关键路径和关键活动"><a href="#关键路径和关键活动" class="headerlink" title="关键路径和关键活动"></a>关键路径和关键活动</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230728161106532.png" class="" title="image-20230728161106532">

<h4 id="AOE网注意事项"><a href="#AOE网注意事项" class="headerlink" title="AOE网注意事项"></a>AOE网注意事项</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727181250913.png" class="" title="image-20230727181250913">

<h4 id="通常问题"><a href="#通常问题" class="headerlink" title="通常问题"></a>通常问题</h4><p>AOE-网在工程计划和经营管理中有广泛的应用，针对实际的应用问题，通常需要解决以下两个问题：</p>
<ol>
<li>估算完成整项工程至少需要多少时间</li>
<li>判断哪些活动是影响工程进度的关键</li>
</ol>
<h3 id="关键路径求解"><a href="#关键路径求解" class="headerlink" title="关键路径求解"></a>关键路径求解</h3><h4 id="题型样式"><a href="#题型样式" class="headerlink" title="题型样式"></a>题型样式</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230727181232049.png" class="" title="image-20230727181232049">

<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p><strong>事件最早发生时间按照拓扑排序的顺序计算，最迟发生时间按逆拓扑排序的顺序计算！</strong></p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725171828120.png" class="" title="image-20230725171828120">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725172108298.png" class="" title="image-20230725172108298">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230725172121078.png" class="" title="image-20230725172121078">

<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730150520001.png" class="" title="image-20230730150520001">

<h2 id="查找的基本概念"><a href="#查找的基本概念" class="headerlink" title="查找的基本概念"></a>查找的基本概念</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730154350811.png" class="" title="image-20230730154350811">

<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730150818527.png" class="" title="image-20230730150818527">

<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730154425615.png" class="" title="image-20230730154425615">

<h3 id="顺序查找优化"><a href="#顺序查找优化" class="headerlink" title="顺序查找优化"></a>顺序查找优化</h3><h4 id="设置哨兵"><a href="#设置哨兵" class="headerlink" title="设置哨兵"></a>设置哨兵</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730154556969.png" class="" title="image-20230730154556969">

<h4 id="先排序"><a href="#先排序" class="headerlink" title="先排序"></a>先排序</h4><h5 id="查找代码"><a href="#查找代码" class="headerlink" title="查找代码"></a>查找代码</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730160452771.png" class="" title="image-20230730160452771">

<h5 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h5><h5 id="无序查找表"><a href="#无序查找表" class="headerlink" title="无序查找表"></a>无序查找表</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730183334570.png" class="" title="image-20230730183334570">

<h5 id="有序查找表"><a href="#有序查找表" class="headerlink" title="有序查找表"></a>有序查找表</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730161504871.png" class="" title="image-20230730161504871">

<h4 id="跳跃"><a href="#跳跃" class="headerlink" title="跳跃"></a>跳跃</h4><h5 id="查找代码-1"><a href="#查找代码-1" class="headerlink" title="查找代码"></a>查找代码</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730162755524.png" class="" title="image-20230730162755524">

<h5 id="效率分析-1"><a href="#效率分析-1" class="headerlink" title="效率分析"></a>效率分析</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730163009817.png" class="" title="image-20230730163009817">

<h4 id="按查找概率从小到大排列"><a href="#按查找概率从小到大排列" class="headerlink" title="按查找概率从小到大排列"></a>按查找概率从小到大排列</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730163424101.png" class="" title="image-20230730163424101">

<h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730163558005.png" class="" title="image-20230730163558005">

<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730165255660.png" class="" title="image-20230730165255660">

<h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730165700016.png" class="" title="image-20230730165700016">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730170135777.png" class="" title="image-20230730170135777">

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730165918080.png" class="" title="image-20230730165918080">

<h3 id="效率分析-2"><a href="#效率分析-2" class="headerlink" title="效率分析"></a>效率分析</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730170316188.png" class="" title="image-20230730170316188">

<h3 id="查找判定树分析"><a href="#查找判定树分析" class="headerlink" title="查找判定树分析"></a>查找判定树分析</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730170530501.png" class="" title="image-20230730170530501">

<h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><h3 id="顺序查找索引表"><a href="#顺序查找索引表" class="headerlink" title="顺序查找索引表"></a>顺序查找索引表</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731153537156.png" class="" title="image-20230731153537156">

<h4 id="查找成功"><a href="#查找成功" class="headerlink" title="查找成功"></a>查找成功</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731153412801.png" class="" title="image-20230731153412801">

<h4 id="查找失败"><a href="#查找失败" class="headerlink" title="查找失败"></a>查找失败</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731153438300.png" class="" title="image-20230731153438300">

<h3 id="折半查找索引表"><a href="#折半查找索引表" class="headerlink" title="折半查找索引表"></a>折半查找索引表</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731154327974.png" class="" title="image-20230731154327974">

<h3 id="分块查找效率分析"><a href="#分块查找效率分析" class="headerlink" title="分块查找效率分析"></a>分块查找效率分析</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730172636542.png" class="" title="image-20230730172636542">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731154619109.png" class="" title="image-20230731154619109">

<h2 id="三种查找相关公式"><a href="#三种查找相关公式" class="headerlink" title="三种查找相关公式"></a>三种查找相关公式</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730173619058.png" class="" title="image-20230730173619058">

<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230730174341568.png" class="" title="image-20230730174341568">

<h3 id="M叉排序树"><a href="#M叉排序树" class="headerlink" title="M叉排序树"></a>M叉排序树</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731160717163.png" class="" title="image-20230731160717163">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731160618753.png" class="" title="image-20230731160618753">

<h3 id="B树的性质"><a href="#B树的性质" class="headerlink" title="B树的性质"></a>B树的性质</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731163540255.png" class="" title="image-20230731163540255">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731163549149.png" class="" title="image-20230731163549149">

<h3 id="B树的考点"><a href="#B树的考点" class="headerlink" title="B树的考点"></a>B树的考点</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731163933099.png" class="" title="image-20230731163933099">

<p><a href="https://www.bilibili.com/video/BV1oN411Q7Yz?p=78&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h3 id="B树的插入"><a href="#B树的插入" class="headerlink" title="B树的插入"></a>B树的插入</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801154234446.png" class="" title="image-20230801154234446">

<p><a href="https://www.bilibili.com/video/BV1oN411Q7Yz/?p=79&spm_id_from=pageDriver&vd_source=b56f8e821959da5c3bdd92155f73e40a">参考视频</a></p>
<h3 id="B树的删除"><a href="#B树的删除" class="headerlink" title="B树的删除"></a>B树的删除</h3><h4 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h4><p>删除53</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801154924209.png" class="" title="image-20230801154924209">



<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801154935303.png" class="" title="image-20230801154935303">



<h4 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h4><p>删掉50</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801155611103.png" class="" title="image-20230801155611103">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801155656318.png" class="" title="image-20230801155656318">

<h5 id="向右兄弟结点借"><a href="#向右兄弟结点借" class="headerlink" title="向右兄弟结点借"></a>向右兄弟结点借</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801155553915.png" class="" title="image-20230801155553915">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801155716981.png" class="" title="image-20230801155716981">

<h5 id="向左兄弟结点借"><a href="#向左兄弟结点借" class="headerlink" title="向左兄弟结点借"></a>向左兄弟结点借</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801155744592.png" class="" title="image-20230801155744592">



<h4 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h4><p>删除28</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160334076.png" class="" title="image-20230801160334076">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160415054.png" class="" title="image-20230801160415054">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160450875.png" class="" title="image-20230801160450875">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160533188.png" class="" title="image-20230801160533188">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160601601.png" class="" title="image-20230801160601601"> 

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801160719654.png" class="" title="image-20230801160719654">

<h4 id="第四种情况"><a href="#第四种情况" class="headerlink" title="第四种情况"></a>第四种情况</h4><h5 id="后继结点代替"><a href="#后继结点代替" class="headerlink" title="后继结点代替"></a>后继结点代替</h5><p>删除70</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162421976.png" class="" title="image-20230801162421976">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162548595.png" class="" title="image-20230801162548595">

<h5 id="前驱节点代替"><a href="#前驱节点代替" class="headerlink" title="前驱节点代替"></a>前驱节点代替</h5><p>删除81 </p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162647250.png" class="" title="image-20230801162647250">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162659686.png" class="" title="image-20230801162659686">

<h5 id="演变成第三种情况"><a href="#演变成第三种情况" class="headerlink" title="演变成第三种情况"></a>演变成第三种情况</h5><p>删除69</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162750471.png" class="" title="image-20230801162750471">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162806340.png" class="" title="image-20230801162806340">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162832236.png" class="" title="image-20230801162832236">



<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162903362.png" class="" title="image-20230801162903362">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801162918763.png" class="" title="image-20230801162918763">

<h3 id="B树总结"><a href="#B树总结" class="headerlink" title="B树总结"></a>B树总结</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731165341059.png" class="" title="image-20230731165341059">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230731165357748.png" class="" title="image-20230731165357748">

<h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801182042112.png" class="" title="image-20230801182042112">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801170606162.png" class="" title="image-20230801170606162">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801163554157.png" class="" title="image-20230801163554157">

<h3 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801163605257.png" class="" title="image-20230801163605257">

<h3 id="B树和B-树的对比"><a href="#B树和B-树的对比" class="headerlink" title="B树和B+树的对比"></a>B树和B+树的对比</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801170646639.png" class="" title="image-20230801170646639">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801170811636.png" class="" title="image-20230801170811636">

<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801174257675.png" class="" title="image-20230801174257675">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801173213502.png" class="" title="image-20230801173213502">

<h3 id="散列表的效率分析"><a href="#散列表的效率分析" class="headerlink" title="散列表的效率分析"></a>散列表的效率分析</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801175034103.png" class="" title="image-20230801175034103">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801175229018.png" class="" title="image-20230801175229018">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801175250599.png" class="" title="image-20230801175250599">

<h3 id="散列函数的设计"><a href="#散列函数的设计" class="headerlink" title="散列函数的设计"></a>散列函数的设计</h3><h4 id="除留余数法"><a href="#除留余数法" class="headerlink" title="除留余数法"></a>除留余数法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801175410487.png" class="" title="image-20230801175410487">

<h5 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230803153311778.png" class="" title="image-20230803153311778">

<h5 id="开放定址法（最容易考）"><a href="#开放定址法（最容易考）" class="headerlink" title="开放定址法（最容易考）"></a>开放定址法（最容易考）</h5><h6 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h6><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801180755390.png" class="" title="image-20230801180755390">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801181141506.png" class="" title="image-20230801181141506">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/500fd9f9d72a605951bac546d222e597023bbae3.jpeg" class="" title="img">

<h6 id="平方探测法"><a href="#平方探测法" class="headerlink" title="平方探测法"></a>平方探测法</h6><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801181352765.png" class="" title="image-20230801181352765">

<h6 id="伪随机序列法"><a href="#伪随机序列法" class="headerlink" title="伪随机序列法"></a>伪随机序列法</h6><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801181434090.png" class="" title="image-20230801181434090">

<h5 id="再散列"><a href="#再散列" class="headerlink" title="再散列"></a>再散列</h5><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801181510748.png" class="" title="image-20230801181510748">

<h4 id="直接定址法（最常用）"><a href="#直接定址法（最常用）" class="headerlink" title="直接定址法（最常用）"></a>直接定址法（最常用）</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801175547578.png" class="" title="image-20230801175547578">

<h4 id="数字分析法"><a href="#数字分析法" class="headerlink" title="数字分析法"></a>数字分析法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801180520753.png" class="" title="image-20230801180520753">

<h4 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a>平方取中法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801180712477.png" class="" title="image-20230801180712477">

<h4 id="随机数法"><a href="#随机数法" class="headerlink" title="随机数法"></a>随机数法</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801180727565.png" class="" title="image-20230801180727565">

<h3 id="散列函数的设计原则"><a href="#散列函数的设计原则" class="headerlink" title="散列函数的设计原则"></a>散列函数的设计原则</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230801181528525.png" class="" title="image-20230801181528525">

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804150953194.png" class="" title="image-20230804150953194">

<h2 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>所有相等的数经过某种排序方法后，仍能保持它们在排序之前的相对次序，我们就说这种排序方法是稳定的。反之，就是非稳定的。</strong></p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804151236294.png" class="" title="image-20230804151236294">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804151552957.png" class="" title="image-20230804151552957">

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804151643239.png" class="" title="image-20230804151643239">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804152524224.png" class="" title="image-20230804152524224">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804152644450.png" class="" title="image-20230804152644450">

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804154229574.png" class="" title="image-20230804154229574">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804154951109.png" class="" title="image-20230804154951109">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804154823879.png" class="" title="image-20230804154823879">

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804153214722.png" class="">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/9210c3dce60441ac978f419bcc8bfb68.png" class="" title="img">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804153427335.png" class="" title="image-20230804153427335">

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160342502.png" class="" title="image-20230804160342502">

<h4 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160522003.png" class="" title="image-20230804160522003">

<h4 id="排序思想"><a href="#排序思想" class="headerlink" title="排序思想"></a>排序思想</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160557053.png" class="" title="image-20230804160557053">

<h4 id="构造堆"><a href="#构造堆" class="headerlink" title="构造堆"></a>构造堆</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160652600.png" class="" title="image-20230804160652600">

<h4 id="构造大根堆"><a href="#构造大根堆" class="headerlink" title="构造大根堆"></a>构造大根堆</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160825267.png" class="" title="image-20230804160825267">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160839284.png" class="" title="image-20230804160839284">

<h4 id="构造小根堆"><a href="#构造小根堆" class="headerlink" title="构造小根堆"></a>构造小根堆</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160900757.png" class="" title="image-20230804160900757">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160933258.png" class="" title="image-20230804160933258">

<table>
<thead>
<tr>
<th>稳定性</th>
<th>不稳定</th>
</tr>
</thead>
<tbody><tr>
<td>时间复杂度</td>
<td>O(nlogn)</td>
</tr>
<tr>
<td>空间复杂度</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804153615188.png" class="" title="image-20230804153615188">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/277330-20200310110402028-1046542615.png" class="" title="img">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804154100493.png" class="" title="image-20230804154100493">

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155141185.png" class="" title="image-20230804155141185">

<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155352690.png" class="" title="image-20230804155352690">

<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155405932.png" class="" title="image-20230804155405932">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155721055.png" class="" title="image-20230804155721055">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155733293.png" class="" title="image-20230804155733293">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155818230.png" class="" title="image-20230804155818230">

<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804155901406.png" class="" title="image-20230804155901406">    

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804160126689.png" class="" title="image-20230804160126689">

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804161130200.png" class="" title="image-20230804161130200">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804161238479.png" class="" title="image-20230804161238479">

<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20230804161354798.png" class="" title="image-20230804161354798">

<h2 id="时间复杂度、稳定性总结"><a href="#时间复杂度、稳定性总结" class="headerlink" title="时间复杂度、稳定性总结"></a>时间复杂度、稳定性总结</h2><p><a href="https://blog.csdn.net/qq_53414724/article/details/125016223">参考博客</a></p>
<p>Ο(1)&lt;Ο(log2n)&lt;Ο(n)&lt;Ο(nlog2n)&lt;Ο(n2)&lt;Ο(n3)&lt; Ο(nk) &lt; Ο(2n)</p>
<img src="/2023/06/29/%E8%80%83%E7%A0%94%E6%96%87%E4%BB%B6%E5%A4%B9/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/image-20231014201026577.png" class="" title="image-20231014201026577">]]></content>
      <categories>
        <category>考研</category>
      </categories>
  </entry>
  <entry>
    <title>141</title>
    <url>/2022/10/27/leetcode/leetcode%E9%A2%98/141/141/</url>
    <content><![CDATA[<h1 id="快慢双指针"><a href="#快慢双指针" class="headerlink" title="快慢双指针"></a>快慢双指针</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow=<span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode fast=<span class="keyword">new</span> ListNode();</span><br><span class="line">        slow=head;</span><br><span class="line">        fast=head;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>&amp;&amp;fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>20</title>
    <url>/2022/10/12/leetcode/leetcode%E9%A2%98/20/20/</url>
    <content><![CDATA[<img src="/2022/10/12/leetcode/leetcode%E9%A2%98/20/20/image-20221012214615945.png" class="" title="image-20221012214615945">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] c=s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.length==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">&#x27;(&#x27;</span>||c[i]==<span class="string">&#x27;[&#x27;</span>||c[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                stack.push(c[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(c[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(stack.pop()!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(stack.pop()!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(stack.pop()!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>203</title>
    <url>/2022/10/11/leetcode/leetcode%E9%A2%98/203/203/</url>
    <content><![CDATA[<img src="/2022/10/11/leetcode/leetcode%E9%A2%98/203/203/image-20221011180435305.png" class="" title="image-20221011180435305">



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">           ListNode dummy =<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">           dummy.next=head;</span><br><span class="line">           ListNode previous=dummy;</span><br><span class="line">           previous.next=head;</span><br><span class="line">           <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(head.val!=val)&#123;</span><br><span class="line">                   previous=head;</span><br><span class="line">                   head=head.next;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span>&#123;</span><br><span class="line">                 previous.next=head.next;</span><br><span class="line">                 head=head.next;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/03/02/leetcode/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>动态规划三要素：起始状态+终止状态+方程式</p>
<p>动态规划就是通过起始状态到终止状态结合方程式求出中间所有的元素并将其放入数组中</p>
<p>能做什么？ </p>
<p>eg：斐波那契数列</p>
<img src="/2022/03/02/leetcode/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220422204215970.png" class="" title="image-20220422204215970">



]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>27</title>
    <url>/2022/03/06/leetcode/leetcode%E9%A2%98/27/27/</url>
    <content><![CDATA[<p>1双指针法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow=<span class="number">0</span>,fast=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;nums.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">                fast++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fast++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>215</title>
    <url>/2022/10/17/leetcode/leetcode%E9%A2%98/215/215/</url>
    <content><![CDATA[<img src="/2022/10/17/leetcode/leetcode%E9%A2%98/215/215/image-20221017141826536.png" class="" title="image-20221017141826536">

<h1 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; maxHeap=<span class="keyword">new</span> PriorityQueue&lt;&gt;(Collections.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            maxHeap.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            maxHeap.poll();</span><br><span class="line">            k=k-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxHeap.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>206</title>
    <url>/2022/10/11/leetcode/leetcode%E9%A2%98/206/206/</url>
    <content><![CDATA[<img src="/2022/10/11/leetcode/leetcode%E9%A2%98/206/206/image-20221011220940761.png" class="" title="image-20221011220940761">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">            ListNode dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            dummy.next=head;</span><br><span class="line">            ListNode hnext=<span class="keyword">null</span>;</span><br><span class="line">            ListNode dnext=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(head!=<span class="keyword">null</span>&amp;&amp;head.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               hnext=head.next;</span><br><span class="line">               dnext=dummy.next;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">               dummy.next=hnext;</span><br><span class="line">               head.next=hnext.next;</span><br><span class="line">               hnext.next=dnext; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>283</title>
    <url>/2022/03/05/leetcode/leetcode%E9%A2%98/283/283/</url>
    <content><![CDATA[<p><img src="/2022/03/05/leetcode/leetcode%E9%A2%98/283/283/image-20220305173240536.png"></p>
<p>1填充法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[index]=nums[i];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2双指针法（快慢双指针）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fast=<span class="number">0</span>,slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;nums.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=slow;i&lt;nums.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3自己差方法</p>
<p>双指针法用时1ms，此156ms</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j=i;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">              <span class="keyword">while</span>(nums[j]==<span class="number">0</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">if</span>(j==nums.length-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                     j++;</span><br><span class="line">              &#125;</span><br><span class="line">               temp=nums[i];</span><br><span class="line">               nums[i]=nums[j];</span><br><span class="line">               nums[j]=temp;</span><br><span class="line">               System.out.println(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>217</title>
    <url>/2022/10/15/leetcode/leetcode%E9%A2%98/217/217/</url>
    <content><![CDATA[<img src="/2022/10/15/leetcode/leetcode%E9%A2%98/217/217/image-20221015134254183.png" class="" title="image-20221015134254183">

<h1 id="双遍历"><a href="#双遍历" class="headerlink" title="双遍历"></a>双遍历</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> m=nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>);j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(m==nums[j])&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="哈希表（自带函数）"><a href="#哈希表（自带函数）" class="headerlink" title="哈希表（自带函数）"></a>哈希表（自带函数）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num)) &#123;</span><br><span class="line">                map.put(num,map.get(num)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(num,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k:map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(k)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="哈希表（数组）"><a href="#哈希表（数组）" class="headerlink" title="哈希表（数组）"></a>哈希表（数组）</h1><img src="/2022/10/15/leetcode/leetcode%E9%A2%98/217/217/image-20221015151852432.png" class="" title="image-20221015151852432">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sizeS=s.length();</span><br><span class="line">        <span class="keyword">int</span> sizeT=t.length();</span><br><span class="line">        <span class="keyword">int</span>[] table=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">if</span>(sizeS==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t.charAt(<span class="number">0</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sizeT;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;sizeS)&#123;</span><br><span class="line">                table[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            table[t.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(table[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>  (<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(num))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>389</title>
    <url>/2022/10/15/leetcode/leetcode%E9%A2%98/389/389/</url>
    <content><![CDATA[<img src="/2022/10/15/leetcode/leetcode%E9%A2%98/389/389/image-20221015140255415.png" class="" title="image-20221015140255415">

<h1 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map1=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] c1=s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] c2=t.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> end=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:c1)&#123;</span><br><span class="line">             <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                 map.put(c,map.get(c)+<span class="number">1</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:c2)&#123;</span><br><span class="line">             <span class="keyword">if</span>(map1.containsKey(c))&#123;</span><br><span class="line">                map1.put(c,map1.get(c)+<span class="number">1</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map1.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:c2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(c)!=map1.get(c))</span><br><span class="line">                end=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>485</title>
    <url>/2022/03/01/leetcode/leetcode%E9%A2%98/485/485/</url>
    <content><![CDATA[<img src="/2022/03/01/leetcode/leetcode%E9%A2%98/485/485/image-20221010165104417.png" class="" title="image-20221010165104417">

<p>1一次遍历</p>
<p>指针指向第一个元素，设立maxones（当前最大连续数），和max（最终最大连续数），先对第一个元素进行处理，如果为一，则maxones为一，反之为零；随着遍历，如果当前元素为1，则maxones加一，反之maxones变为零；每次遍历完一个元素，maxones与max进行一次比较。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mxaones=<span class="number">0</span>,max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                maxones++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                maxones=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxones&gt;max)</span><br><span class="line">            max=maxones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2动态规划</p>
<p>动态规划三要素：起始状态+终止状态+方程式</p>
<p>动态规划就是通过起始状态到终止状态结合方程式求出中间所有的元素并将其放入数组中</p>
<p>起始状态：第一个元素</p>
<p>终止状态：最后一个元素结束</p>
<p>方程式：<img src="/2022/03/01/leetcode/leetcode%E9%A2%98/485/485/1.png" class=""> </p>
<p>通过方程式将中间元素求出来并填入数组，这里为了节省空间，选择覆盖原数组的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i]=nums[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(result&lt;nums[i])</span><br><span class="line">                result=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>705</title>
    <url>/2022/10/16/leetcode/leetcode%E9%A2%98/705/705/</url>
    <content><![CDATA[<img src="/2022/10/16/leetcode/leetcode%E9%A2%98/705/705/image-20221016182937545.png" class="" title="image-20221016182937545">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       nums=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10000001</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        nums[key]=<span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        nums[key]=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyHashSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyHashSet obj = new MyHashSet();</span></span><br><span class="line"><span class="comment"> * obj.add(key);</span></span><br><span class="line"><span class="comment"> * obj.remove(key);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.contains(key);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>933</title>
    <url>/2022/10/11/leetcode/leetcode%E9%A2%98/933/933/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecentCounter</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecentCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ping</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        queue.add(t);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()&gt;<span class="number">0</span>&amp;&amp;t-queue.peek()&gt;<span class="number">3000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>496</title>
    <url>/2022/10/12/leetcode/leetcode%E9%A2%98/496/496/</url>
    <content><![CDATA[<img src="/2022/10/12/leetcode/leetcode%E9%A2%98/496/496/image-20221012214822498.png" class="" title="image-20221012214822498">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] end=<span class="keyword">new</span> <span class="keyword">int</span>[nums1.length];</span><br><span class="line">        Stack&lt;Integer&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums2)&#123;</span><br><span class="line">            stack.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">            Stack&lt;Integer&gt; temp=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> max=-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isBound=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty()&amp;&amp;isBound==<span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> top=stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(nums1[i]&gt;top)&#123;</span><br><span class="line">                    temp.push(top);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]==top)&#123;</span><br><span class="line">                    temp.push(top);</span><br><span class="line">                    isBound=<span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    temp.push(top);</span><br><span class="line">                    max=top;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            end[i]=max;</span><br><span class="line">            <span class="keyword">while</span>(!temp.isEmpty())&#123;</span><br><span class="line">                stack.add(temp.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
</search>
